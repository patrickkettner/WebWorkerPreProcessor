From 79f1a4f88f5fffb508d2ca49f6483629f30a01e5 Mon Sep 17 00:00:00 2001
From: Patrick Kettner <patrickkettner@gmail.com>
Date: Thu, 24 Nov 2016 14:49:52 -0800
Subject: [PATCH] .

---
 lib/slim/do_inserter.rb       |   2 +-
 lib/slim/embedded.rb          |   4 +-
 lib/slim/end_inserter.rb      |   4 +-
 lib/slim/engine.rb            |   3 +-
 lib/slim/interpolation.rb     |  17 ++++--
 lib/slim/logic_less/filter.rb |   2 +-
 lib/slim/parser.rb            | 128 +++++++++++++++++++++++-------------------
 lib/slim/splat/builder.rb     |   2 +-
 slim.gemspec                  |   3 +-
 9 files changed, 91 insertions(+), 74 deletions(-)

diff --git a/lib/slim/do_inserter.rb b/lib/slim/do_inserter.rb
index a61c4a0..14e3a5e 100644
--- a/lib/slim/do_inserter.rb
+++ b/lib/slim/do_inserter.rb
@@ -7,7 +7,7 @@ module Slim
   #
   # @api private
   class DoInserter < Filter
-    BLOCK_REGEX = /(\A(if|unless|else|elsif|when|begin|rescue|ensure)\b)|do\s*(\|[^\|]*\|\s*)?\Z/
+    BLOCK_REGEX = /(^(if|unless|else|elsif|when|begin|rescue|ensure)\b)|do\s*(\|[^\|]*\|\s*)?$/
 
     # Handle control expression `[:slim, :control, code, content]`
     #
diff --git a/lib/slim/embedded.rb b/lib/slim/embedded.rb
index 4612f88..d88cb5b 100644
--- a/lib/slim/embedded.rb
+++ b/lib/slim/embedded.rb
@@ -8,7 +8,7 @@ module Slim
     end
 
     def on_slim_interpolate(text)
-      @collected << text
+      @collected += text
       nil
     end
   end
@@ -37,7 +37,7 @@ module Slim
     end
 
     def on_static(text)
-      @collected << text
+      @collected += text
       nil
     end
 
diff --git a/lib/slim/end_inserter.rb b/lib/slim/end_inserter.rb
index c566e3c..7be3b4e 100644
--- a/lib/slim/end_inserter.rb
+++ b/lib/slim/end_inserter.rb
@@ -10,8 +10,8 @@ module Slim
   #
   # @api private
   class EndInserter < Filter
-    BLOCK_REGEX = /\A(else|elsif|when|rescue|ensure)\b/
-    END_REGEX = /\Aend\b/
+    BLOCK_REGEX = /^(else|elsif|when|rescue|ensure)\b/
+    END_REGEX = /^end\b/
 
     # Handle multi expression `[:multi, *exps]`
     #
diff --git a/lib/slim/engine.rb b/lib/slim/engine.rb
index 53b5c0a..bf8891b 100644
--- a/lib/slim/engine.rb
+++ b/lib/slim/engine.rb
@@ -13,7 +13,6 @@ module Slim
                    :generator => Temple::Generators::ArrayBuffer,
                    :default_tag => 'div'
 
-    filter :Encoding, :encoding
     filter :RemoveBOM
     use Slim::Parser, :file, :tabsize, :shortcut, :default_tag
     use Slim::Embedded, :enable_engines, :disable_engines, :pretty
@@ -34,7 +33,7 @@ module Slim
       (options[:streaming] ? Temple::Filters::StaticMerger : Temple::Filters::DynamicInliner).new
     end
     use :Generator do
-      options[:generator].new(options.to_hash.reject {|k,v| !options[:generator].default_options.valid_keys.include?(k) })
+      options[:generator].new()
     end
   end
 end
diff --git a/lib/slim/interpolation.rb b/lib/slim/interpolation.rb
index 7bcf0e7..77c76c6 100644
--- a/lib/slim/interpolation.rb
+++ b/lib/slim/interpolation.rb
@@ -12,23 +12,28 @@ module Slim
       # Interpolate variables in text (#{variable}).
       # Split the text into multiple dynamic and static parts.
       block = [:multi]
-      begin
+      loop do
         case string
-        when /\A\\#\{/
+        when /^\\#\{/
           # Escaped interpolation
           block << [:static, '#{']
           string = $'
-        when /\A#\{/
+        when /^#\{/
           # Interpolation
           string, code = parse_expression($')
-          escape = code !~ /\A\{.*\}\Z/
+          escape = code !~ /^\{.*\}$/
           block << [:slim, :output, escape, escape ? code : code[1..-2], [:multi]]
-        when /\A([#\\]|[^#\\]*)/
+        when /^([#\\]|[^#\\]*)/
           # Static text
           block << [:static, $&]
           string = $'
         end
-      end until string.empty?
+        if string.empty?
+          break
+        else
+          next
+        end
+      end
       block
     end
 
diff --git a/lib/slim/logic_less/filter.rb b/lib/slim/logic_less/filter.rb
index 12782aa..2a40a0c 100644
--- a/lib/slim/logic_less/filter.rb
+++ b/lib/slim/logic_less/filter.rb
@@ -34,7 +34,7 @@ module Slim
     # Interpret control blocks as sections or inverted sections
     def on_slim_control(name, content)
       method =
-        if name =~ /\A!\s*(.*)/
+	if name =~ /^!\s*(.*)/
           name = $1
           'inverted_section'
         else
diff --git a/lib/slim/parser.rb b/lib/slim/parser.rb
index 0dfd63e..cf0f524 100644
--- a/lib/slim/parser.rb
+++ b/lib/slim/parser.rb
@@ -37,7 +37,7 @@ module Slim
       super
       tabsize = options[:tabsize]
       if tabsize > 1
-        @tab_re = /\G((?: {#{tabsize}})*) {0,#{tabsize-1}}\t/
+        @tab_re = /((?: {#{tabsize}})*) {0,#{tabsize-1}}\t/
         @tab = '\1' + ' ' * tabsize
       else
         @tab_re = "\t"
@@ -52,8 +52,8 @@ module Slim
           raise ArgumentError, 'You can only use special characters for attribute shortcuts' if k =~ /(#{WORD_RE}|-)/
         end
       end
-      @attr_shortcut_re = /\A(#{Regexp.union @attr_shortcut.keys})(#{WORD_RE}(?:#{WORD_RE}|-)*#{WORD_RE}|#{WORD_RE}+)/
-      @tag_re = /\A(?:#{Regexp.union @tag_shortcut.keys}|\*(?=[^\s]+)|(#{WORD_RE}(?:#{WORD_RE}|:|-)*#{WORD_RE}|#{WORD_RE}+))/
+      @attr_shortcut_re = /^(#{@attr_shortcut.keys.map {|v| Regexp.escape v}.join('|')})(#{WORD_RE}(?:#{WORD_RE}|-)*#{WORD_RE}|#{WORD_RE}+)/
+      @tag_re = /^(?:#{@tag_shortcut.keys.map {|v| Regexp.escape v}.join('|')}|\*(?=[^\s]+)|(#{WORD_RE}(?:#{WORD_RE}|:|-)*#{WORD_RE}|#{WORD_RE}+))/
     end
 
     # Compile string to Temple expression
@@ -78,10 +78,10 @@ module Slim
       '{' => '}',
     }.freeze
 
-    WORD_RE = ''.respond_to?(:encoding) ? '\p{Word}' : '\w'
-    DELIM_RE = /\A[#{Regexp.escape DELIMS.keys.join}]/
-    ATTR_DELIM_RE = /\A\s*([#{Regexp.escape DELIMS.keys.join}])/
-    ATTR_NAME = "\\A\\s*(#{WORD_RE}(?:#{WORD_RE}|:|-)*)"
+    WORD_RE = '\w'
+    DELIM_RE = /^[#{Regexp.escape DELIMS.keys.join}]/
+    ATTR_DELIM_RE = /^\s*([#{Regexp.escape DELIMS.keys.join}])/
+    ATTR_NAME = "\^\\s*(#{WORD_RE}(?:#{WORD_RE}|:|-)*)"
     QUOTED_ATTR_RE = /#{ATTR_NAME}\s*=(=?)\s*("|')/
     CODE_ATTR_RE = /#{ATTR_NAME}\s*=(=?)\s*/
 
@@ -125,11 +125,11 @@ module Slim
     def get_indent(line)
       # Figure out the indentation. Kinda ugly/slow way to support tabs,
       # but remember that this is only done at parsing time.
-      line[/\A[ \t]*/].gsub(@tab_re, @tab).size
+      line[/^[ \t]*/].gsub(@tab_re, @tab).size
     end
 
     def parse_line
-      if @line =~ /\A\s*\Z/
+      if @line =~ /^\s*$/
         @stacks.last << [:newline]
         return
       end
@@ -137,7 +137,7 @@ module Slim
       indent = get_indent(@line)
 
       # Remove the indentation
-      @line.lstrip!
+      @line = @line.lstrip
 
       # If there's more stacks than indents, it means that the previous
       # line is expecting this line to be indented.
@@ -176,48 +176,50 @@ module Slim
 
     def parse_line_indicators
       case @line
-      when /\A\/!( ?)/
+      when /^\/!( ?)/
         # HTML comment
         @stacks.last << [:html, :comment, [:slim, :text, parse_text_block($', @indents.last + $1.size + 2)]]
-      when /\A\/\[\s*(.*?)\s*\]\s*\Z/
+      when /^\/\[\s*(.*?)\s*\]\s*$/
         # HTML conditional comment
         block = [:multi]
         @stacks.last << [:html, :condcomment, $1, block]
         @stacks << block
-      when /\A\//
+      when /^\//
         # Slim comment
         parse_comment_block
-      when /\A([\|'])( ?)/
+      when /^([\|'])( ?)/
         # Found a text block.
         trailing_ws = $1 == "'"
         @stacks.last << [:slim, :text, parse_text_block($', @indents.last + $2.size + 1)]
         @stacks.last << [:static, ' '] if trailing_ws
-      when /\A</
+      when /^</
         # Inline html
         block = [:multi]
         @stacks.last << [:multi, [:slim, :interpolate, @line], block]
         @stacks << block
-      when /\A-/
+      when /^-/
         # Found a code block.
         # We expect the line to be broken or the next line to be indented.
-        @line.slice!(0)
+        @line = @line.slice(1..-1)
         block = [:multi]
         @stacks.last << [:slim, :control, parse_broken_line, block]
         @stacks << block
-      when /\A=(=?)(['<>]*)/
+      when /^=(=?)(['<>]*)/
         # Found an output block.
         # We expect the line to be broken or the next line to be indented.
         @line = $'
-        trailing_ws = $2.include?('\'') || $2.include?('>')
+        a = $1 || ''
+        b = $2 || ''
+        trailing_ws = b.include?('\'') || b.include?('>')
         block = [:multi]
-        @stacks.last << [:static, ' '] if $2.include?('<')
-        @stacks.last << [:slim, :output, $1.empty?, parse_broken_line, block]
+        @stacks.last << [:static, ' '] if b.include?('<')
+        @stacks.last << [:slim, :output, a.empty?, parse_broken_line, block]
         @stacks.last << [:static, ' '] if trailing_ws
         @stacks << block
-      when /\A(\w+):\s*\Z/
+      when /^(\w+):\s*$/
         # Embedded template detected. It is treated as block.
         @stacks.last << [:slim, :embedded, $1, parse_text_block]
-      when /\Adoctype\s+/i
+      when /^doctype\s+/i
         # Found doctype declaration
         @stacks.last << [:html, :doctype, $'.strip]
       when @tag_re
@@ -231,7 +233,7 @@ module Slim
     end
 
     def parse_comment_block
-      while !@lines.empty? && (@lines.first =~ /\A\s*\Z/ || get_indent(@lines.first) > @indents.last)
+      while !@lines.empty? && (@lines.first =~ /^\s*$/ || get_indent(@lines.first) > @indents.last)
         next_line
         @stacks.last << [:newline]
       end
@@ -247,7 +249,7 @@ module Slim
 
       empty_lines = 0
       until @lines.empty?
-        if @lines.first =~ /\A\s*\Z/
+        if @lines.first =~ /^\s*$/
           next_line
           result << [:newline]
           empty_lines += 1 if text_indent
@@ -261,7 +263,7 @@ module Slim
           end
 
           next_line
-          @line.lstrip!
+          @line = @line.lstrip
 
           # The text block lines must be at least indented
           # as deep as the first line.
@@ -284,16 +286,16 @@ module Slim
 
     def parse_broken_line
       broken_line = @line.strip
-      while broken_line =~ /[,\\]\Z/
+      while broken_line =~ /[,\\]$/
         expect_next_line
-        broken_line << "\n" << @line
+        broken_line += "\n" + @line
       end
       broken_line
     end
 
     def parse_tag(tag)
       if @tag_shortcut[tag]
-        @line.slice!(0, tag.size) unless @attr_shortcut[tag]
+        @line = @line.slice!(tag.size..-1) unless @attr_shortcut[tag]
         tag = @tag_shortcut[tag]
       end
 
@@ -306,7 +308,7 @@ module Slim
         @line = $'
       end
 
-      @line =~ /\A[<>']*/
+      @line =~ /^[<>']*/
       @line = $'
       trailing_ws = $&.include?('\'') || $&.include?('>')
       leading_ws = $&.include?('<')
@@ -320,7 +322,7 @@ module Slim
       @stacks.last << [:static, ' '] if trailing_ws
 
       case @line
-      when /\A\s*:\s*/
+      when /^\s*:\s*/
         # Block expansion
         @line = $'
         (@line =~ @tag_re) || syntax_error!('Expected tag')
@@ -331,25 +333,27 @@ module Slim
         @stacks << content
         parse_tag($&)
         @stacks.delete_at(i)
-      when /\A\s*=(=?)(['<>]*)/
+      when /^\s*=(=?)(['<>]*)/
         # Handle output code
         @line = $'
-        trailing_ws2 = $2.include?('\'') || $2.include?('>')
+        a = $1 || ''
+        b = $2 || ''
+        trailing_ws2 = b.include?('\'') || b.include?('>')
         block = [:multi]
-        @stacks.last << [:static, ' '] if !leading_ws && $2.include?('<')
-        tag << [:slim, :output, $1 != '=', parse_broken_line, block]
+        @stacks.last << [:static, ' '] if !leading_ws && b.include?('<')
+        tag << [:slim, :output, a != '=', parse_broken_line, block]
         @stacks.last << [:static, ' '] if !trailing_ws && trailing_ws2
         @stacks << block
-      when /\A\s*\/\s*/
+      when /^\s*\/\s*/
         # Closed tag. Do nothing
         @line = $'
         syntax_error!('Unexpected text after closed tag') unless @line.empty?
-      when /\A\s*\Z/
+      when /^\s*$/
         # Empty content
         content = [:multi]
         tag << content
         @stacks << content
-      when /\A( ?)(.*)\Z/
+      when /^( ?)(.*)$/
         # Text content
         tag << [:slim, :text, parse_text_block($2, @orig_line.size - @line.size + $1.size, true)]
       end
@@ -364,26 +368,30 @@ module Slim
       end
 
       if delimiter
-        boolean_attr_re = /#{ATTR_NAME}(?=(\s|#{Regexp.escape delimiter}|\Z))/
-        end_re = /\A\s*#{Regexp.escape delimiter}/
+        boolean_attr_re = /#{ATTR_NAME}(?=(\s|#{Regexp.escape delimiter}|$))/
+        end_re = /^\s*#{Regexp.escape delimiter}/
       end
 
       while true
         case @line
-        when /\A\s*\*(?=[^\s]+)/
+        when /^\s*\*(?=[^\s]+)/
           # Splat attribute
           @line = $'
           attributes << [:slim, :splat, parse_ruby_code(delimiter)]
         when QUOTED_ATTR_RE
           # Value is quoted (static)
           @line = $'
-          attributes << [:html, :attr, $1,
-                         [:escape, $2.empty?, [:slim, :interpolate, parse_quoted_attribute($3)]]]
+          a = $1 || ''
+          b = $2 || ''
+          attributes << [:html, :attr, a,
+                         [:escape, b.empty?, [:slim, :interpolate, parse_quoted_attribute($3)]]]
         when CODE_ATTR_RE
           # Value is ruby code
           @line = $'
-          name = $1
-          escape = $2.empty?
+          a = $1 || ''
+          b = $2 || ''
+          name = a
+          escape = b.empty?
           value = parse_ruby_code(delimiter)
           syntax_error!('Invalid empty attribute') if value.empty?
           attributes << [:html, :attr, name, [:slim, :attrvalue, escape, value]]
@@ -401,7 +409,7 @@ module Slim
             break
           else
             # Found something where an attribute should be
-            @line.lstrip!
+            @line = @line.lstrip
             syntax_error!('Expected attribute') unless @line.empty?
 
             # Attributes span multiple lines
@@ -417,11 +425,11 @@ module Slim
       code, count, delimiter, close_delimiter = '', 0, nil, nil
 
       # Attribute ends with space or attribute delimiter
-      end_re = /\A[\s#{Regexp.escape outer_delimiter.to_s}]/
+      end_re = /^[\s#{Regexp.escape outer_delimiter.to_s}]/
 
       until @line.empty? || (count == 0 && @line =~ end_re)
-        if @line =~ /\A[,\\]\Z/
-          code << @line << "\n"
+        if @line =~ /^[,\\]$/
+          code += @line + "\n"
           expect_next_line
         else
           if count > 0
@@ -434,7 +442,9 @@ module Slim
             count = 1
             delimiter, close_delimiter = $&, DELIMS[$&]
           end
-          code << @line.slice!(0)
+          firstChar = @line.slice(0)
+          @line = @line.slice(1..-1)
+          code += firstChar
         end
       end
       syntax_error!("Expected closing delimiter #{close_delimiter}") if count != 0
@@ -445,8 +455,8 @@ module Slim
       value, count = '', 0
 
       until @line.empty? || (count == 0 && @line[0] == quote[0])
-        if @line =~ /\A\\\Z/
-          value << ' '
+        if @line =~ /^\\$/
+          value += ' '
           expect_next_line
         else
           if count > 0
@@ -455,17 +465,21 @@ module Slim
             elsif @line[0] == ?}
               count -= 1
             end
-          elsif @line =~ /\A#\{/
-            value << @line.slice!(0)
+          elsif @line =~ /^#\{/
+            firstChar = @line.slice(0)
+            @line = @line.slice(1..-1)
+            value += firstChar
             count = 1
           end
-          value << @line.slice!(0)
+          firstChar = @line.slice(0)
+          @line = @line.slice(1..-1)
+          value += firstChar
         end
       end
 
       syntax_error!("Expected closing brace }") if count != 0
       syntax_error!("Expected closing quote #{quote}") if @line[0] != quote[0]
-      @line.slice!(0)
+      @line = @line.slice(1..-1)
 
       value
     end
@@ -478,7 +492,7 @@ module Slim
 
     def expect_next_line
       next_line || syntax_error!('Unexpected end of file')
-      @line.strip!
+      @line = @line.strip
     end
   end
 end
diff --git a/lib/slim/splat/builder.rb b/lib/slim/splat/builder.rb
index 338d478..f64962b 100644
--- a/lib/slim/splat/builder.rb
+++ b/lib/slim/splat/builder.rb
@@ -37,7 +37,7 @@ module Slim
       def attr(name, value)
         if @attrs[name]
           if delim = @options[:merge_attrs][name]
-            @attrs[name] << delim << value
+            @attrs[name] += delim + value
           else
             raise("Multiple #{name} attributes specified")
           end
diff --git a/slim.gemspec b/slim.gemspec
index 8850571..f4e42ec 100644
--- a/slim.gemspec
+++ b/slim.gemspec
@@ -17,6 +17,5 @@ Gem::Specification.new do |s|
   s.executables   = `git ls-files -- bin/*`.split("\n").map{ |f| File.basename(f) }
   s.require_paths = %w(lib)
 
-  s.add_runtime_dependency('temple', ['~> 0.6.5'])
-  s.add_runtime_dependency('tilt', ['~> 1.3', '>= 1.3.3'])
+  s.add_runtime_dependency('temple', ['= 0.6.5'])
 end
-- 
2.10.0

