From 0dd57240794cbb43826b9a2514f11afb9f0c2294 Mon Sep 17 00:00:00 2001
From: Patrick Kettner <patrickkettner@gmail.com>
Date: Sun, 20 Nov 2016 15:43:40 -0800
Subject: [PATCH] .

---
 lib/slim/embedded_engine.rb   |   6 +--
 lib/slim/end_inserter.rb      |   4 +-
 lib/slim/interpolation.rb     |  17 ++++---
 lib/slim/logic_less/filter.rb |   2 +-
 lib/slim/parser.rb            | 109 ++++++++++++++++++++++--------------------
 slim.gemspec                  |   8 ----
 6 files changed, 73 insertions(+), 73 deletions(-)

diff --git a/lib/slim/embedded_engine.rb b/lib/slim/embedded_engine.rb
index b47fe21..3a370e7 100644
--- a/lib/slim/embedded_engine.rb
+++ b/lib/slim/embedded_engine.rb
@@ -8,7 +8,7 @@ module Slim
     end
 
     def on_slim_interpolate(text)
-      @collected << text
+      @collected += text
       nil
     end
   end
@@ -37,12 +37,12 @@ module Slim
     end
 
     def on_static(text)
-      @collected << text
+      @collected += text
       nil
     end
 
     def on_slim_output(escape, text, content)
-      @collected << "pro#{@protect.size}tect"
+      @collected += "pro#{@protect.size}tect"
       @protect << [:slim, :output, escape, text, content]
       nil
     end
diff --git a/lib/slim/end_inserter.rb b/lib/slim/end_inserter.rb
index 309864d..1787654 100644
--- a/lib/slim/end_inserter.rb
+++ b/lib/slim/end_inserter.rb
@@ -10,8 +10,8 @@ module Slim
   #
   # @api private
   class EndInserter < Filter
-    ELSE_REGEX = /\A(else|elsif|when)\b/
-    END_REGEX = /\Aend\b/
+    ELSE_REGEX = /^(else|elsif|when)\b/
+    END_REGEX = /^end\b/
 
     # Handle multi expression `[:multi, *exps]`
     #
diff --git a/lib/slim/interpolation.rb b/lib/slim/interpolation.rb
index 7bcf0e7..77c76c6 100644
--- a/lib/slim/interpolation.rb
+++ b/lib/slim/interpolation.rb
@@ -12,23 +12,28 @@ module Slim
       # Interpolate variables in text (#{variable}).
       # Split the text into multiple dynamic and static parts.
       block = [:multi]
-      begin
+      loop do
         case string
-        when /\A\\#\{/
+        when /^\\#\{/
           # Escaped interpolation
           block << [:static, '#{']
           string = $'
-        when /\A#\{/
+        when /^#\{/
           # Interpolation
           string, code = parse_expression($')
-          escape = code !~ /\A\{.*\}\Z/
+          escape = code !~ /^\{.*\}$/
           block << [:slim, :output, escape, escape ? code : code[1..-2], [:multi]]
-        when /\A([#\\]|[^#\\]*)/
+        when /^([#\\]|[^#\\]*)/
           # Static text
           block << [:static, $&]
           string = $'
         end
-      end until string.empty?
+        if string.empty?
+          break
+        else
+          next
+        end
+      end
       block
     end
 
diff --git a/lib/slim/logic_less/filter.rb b/lib/slim/logic_less/filter.rb
index 26c7f67..2c30976 100644
--- a/lib/slim/logic_less/filter.rb
+++ b/lib/slim/logic_less/filter.rb
@@ -29,7 +29,7 @@ module Slim
 
     # Interpret control blocks as sections or inverted sections
     def on_slim_control(name, content)
-      if name =~ /\A!\s*(.*)/
+      if name =~ /^!\s*(.*)/
         on_slim_inverted_section($1, content)
       else
         on_slim_section(name, content)
diff --git a/lib/slim/parser.rb b/lib/slim/parser.rb
index 20f5a21..19fb408 100644
--- a/lib/slim/parser.rb
+++ b/lib/slim/parser.rb
@@ -39,15 +39,15 @@ module Slim
       @tab = ' ' * options[:tabsize]
       @shortcut = {}
       options[:shortcut].each do |k,v|
-        @shortcut[k] = if v =~ /\A([^\s]+)\s+([^\s]+)\Z/
+        @shortcut[k] = if v =~ /^([^\s]+)\s+([^\s]+)$/
                          [$1, $2]
                        else
                          [options[:default_tag], v]
                        end
       end
       shortcut = "[#{Regexp.escape @shortcut.keys.join}]"
-      @shortcut_regex = /\A(#{shortcut})(\w[\w-]*\w|\w+)/
-      @tag_regex = /\A(?:#{shortcut}|\*(?=[^\s]+)|(\w[\w:-]*\w|\w+))/
+      @shortcut_regex = /^(#{shortcut})(\w[\w-]*\w|\w+)/
+      @tag_regex = /^(?:#{shortcut}|\*(?=[^\s]+)|(\w[\w:-]*\w|\w+))/
     end
 
     # Compile string to Temple expression
@@ -74,20 +74,13 @@ module Slim
       '{' => '}',
     }.freeze
 
-    DELIMITER_REGEX = /\A[#{Regexp.escape DELIMITERS.keys.join}]/
-    ATTR_NAME = '\A\s*(\w[:\w-]*)'
+    DELIMITER_REGEX = /^[#{Regexp.escape DELIMITERS.keys.join}]/
+    ATTR_NAME = '^\s*(\w[:\w-]*)'
     QUOTED_ATTR_REGEX = /#{ATTR_NAME}=(=?)("|')/
     CODE_ATTR_REGEX = /#{ATTR_NAME}=(=?)/
 
     # Set string encoding if option is set
     def set_encoding(s)
-      if options[:encoding] && s.respond_to?(:encoding)
-        old_enc = s.encoding
-        s = s.dup if s.frozen?
-        s.force_encoding(options[:encoding])
-        # Fall back to old encoding if new encoding is invalid
-        s.force_encoding(old_enc) unless s.valid_encoding?
-      end
       s
     end
 
@@ -95,12 +88,12 @@ module Slim
     def remove_bom(s)
       if s.respond_to?(:encoding)
         if s.encoding.name =~ /^UTF-(8|16|32)(BE|LE)?/
-          s.gsub(Regexp.new("\\A\uFEFF".encode(s.encoding.name)), '')
+          s.gsub(Regexp.new("\^\uFEFF".encode(s.encoding.name)), '')
         else
           s
         end
       else
-        s.gsub(/\A\xEF\xBB\xBF/, '')
+        s.gsub(/^\xEF\xBB\xBF/, '')
       end
     end
 
@@ -144,11 +137,11 @@ module Slim
     def get_indent(line)
       # Figure out the indentation. Kinda ugly/slow way to support tabs,
       # but remember that this is only done at parsing time.
-      line[/\A[ \t]*/].gsub("\t", @tab).size
+      line[/^[ \t]*/].gsub("\t", @tab).size
     end
 
     def parse_line
-      if @line =~ /\A\s*\Z/
+      if @line =~ /^\s*$/
         @stacks.last << [:newline]
         return
       end
@@ -156,7 +149,7 @@ module Slim
       indent = get_indent(@line)
 
       # Remove the indentation
-      @line.lstrip!
+      @line = @line.lstrip
 
       # If there's more stacks than indents, it means that the previous
       # line is expecting this line to be indented.
@@ -195,48 +188,50 @@ module Slim
 
     def parse_line_indicators
       case @line
-      when /\A\/!( ?)/
+      when /^\/!( ?)/
         # HTML comment
         @stacks.last << [:html, :comment, [:slim, :text, parse_text_block($', @indents.last + $1.size + 2)]]
-      when /\A\/\[\s*(.*?)\s*\]\s*\Z/
+      when /^\/\[\s*(.*?)\s*\]\s*$/
         # HTML conditional comment
         block = [:multi]
         @stacks.last << [:html, :condcomment, $1, block]
         @stacks << block
-      when /\A\//
+      when /^\//
         # Slim comment
         parse_comment_block
-      when /\A([\|'])( ?)/
+      when /^([\|'])( ?)/
         # Found a text block.
         trailing_ws = $1 == "'"
         @stacks.last << [:slim, :text, parse_text_block($', @indents.last + $2.size + 1)]
         @stacks.last << [:static, ' '] if trailing_ws
-      when /\A</
+      when /^</
         # Inline html
         # @stacks.last << parse_text_block(@line, @indents.last + 1)
         block = [:multi]
         @stacks.last << [:multi, [:slim, :interpolate, @line], block]
         @stacks << block
-      when /\A-/
+      when /^-/
         # Found a code block.
         # We expect the line to be broken or the next line to be indented.
-        @line.slice!(0)
+        @line = @line.slice(1..-1)
         block = [:multi]
         @stacks.last << [:slim, :control, parse_broken_line, block]
         @stacks << block
-      when /\A=/
+      when /^=/
         # Found an output block.
         # We expect the line to be broken or the next line to be indented.
-        @line =~ /\A=(=?)('?)/
+        @line =~ /^=(=?)('?)/
         @line = $'
+        a = $1 || ''
+        b = $2 || ''
         block = [:multi]
-        @stacks.last << [:slim, :output, $1.empty?, parse_broken_line, block]
-        @stacks.last << [:static, ' '] unless $2.empty?
+        @stacks.last << [:slim, :output, a.empty?, parse_broken_line, block]
+        @stacks.last << [:static, ' '] unless b.empty?
         @stacks << block
-      when /\A(\w+):\s*\Z/
+      when /^(\w+):\s*$/
         # Embedded template detected. It is treated as block.
         @stacks.last << [:slim, :embedded, $1, parse_text_block]
-      when /\Adoctype\s+/i
+      when /^doctype\s+/i
         # Found doctype declaration
         @stacks.last << [:html, :doctype, $'.strip]
       when @tag_regex
@@ -250,7 +245,7 @@ module Slim
     end
 
     def parse_comment_block
-      while !@lines.empty? && (@lines.first =~ /\A\s*\Z/ || get_indent(@lines.first) > @indents.last)
+      while !@lines.empty? && (@lines.first =~ /^\s*$/ || get_indent(@lines.first) > @indents.last)
         next_line
         @stacks.last << [:newline]
       end
@@ -266,7 +261,7 @@ module Slim
 
       empty_lines = 0
       until @lines.empty?
-        if @lines.first =~ /\A\s*\Z/
+        if @lines.first =~ /^\s*$/
           next_line
           result << [:newline]
           empty_lines += 1 if text_indent
@@ -280,7 +275,7 @@ module Slim
           end
 
           next_line
-          @line.lstrip!
+          @line = @line.lstrip
 
           # The text block lines must be at least indented
           # as deep as the first line.
@@ -303,9 +298,9 @@ module Slim
 
     def parse_broken_line
       broken_line = @line.strip
-      while broken_line =~ /[,\\]\Z/
+      while broken_line =~ /[,\\]$/
         next_line || syntax_error!('Unexpected end of file')
-        broken_line << "\n" << @line.strip
+        broken_line += "\n" + @line.strip
       end
       broken_line
     end
@@ -315,7 +310,7 @@ module Slim
       @stacks.last << tag
 
       case @line
-      when /\A\s*:\s*/
+      when /^\s*:\s*/
         # Block expansion
         @line = $'
         (@line =~ @tag_regex) || syntax_error!('Expected tag')
@@ -326,21 +321,23 @@ module Slim
         @stacks << content
         parse_tag($&)
         @stacks.delete_at(i)
-      when /\A\s*=(=?)('?)/
+      when /^\s*=(=?)('?)/
         # Handle output code
         @line = $'
+        a = $1 || ''
+        b = $2 || ''
         block = [:multi]
-        tag << [:slim, :output, $1 != '=', parse_broken_line, block]
-        @stacks.last << [:static, ' '] unless $2.empty?
+        tag << [:slim, :output, a != '=', parse_broken_line, block]
+        @stacks.last << [:static, ' '] unless b.empty?
         @stacks << block
-      when /\A\s*\//
+      when /^\s*\//
         # Closed tag. Do nothing
-      when /\A\s*\Z/
+      when /^\s*$/
         # Empty content
         content = [:multi]
         tag << content
         @stacks << content
-      when /\A( ?)(.*)\Z/
+      when /^( ?)(.*)$/
         # Text content
         tag << [:slim, :text, parse_text_block($2, @orig_line.size - @line.size + $1.size, true)]
       end
@@ -361,17 +358,17 @@ module Slim
       delimiter = nil
       if @line =~ DELIMITER_REGEX
         delimiter = DELIMITERS[$&]
-        @line.slice!(0)
+        @line = @line.slice(1..-1)
       end
 
       if delimiter
-        boolean_attr_regex = /#{ATTR_NAME}(?=(\s|#{Regexp.escape delimiter}|\Z))/
-        end_regex = /\A\s*#{Regexp.escape delimiter}/
+        boolean_attr_regex = /#{ATTR_NAME}(?=(\s|#{Regexp.escape delimiter}|$))/
+        end_regex = /^\s*#{Regexp.escape delimiter}/
       end
 
       while true
         case @line
-        when /\A\s*\*(?=[^\s]+)/
+        when /^\s*\*(?=[^\s]+)/
           # Splat attribute
           @line = $'
           attributes << [:slim, :splat, parse_ruby_code(delimiter)]
@@ -407,7 +404,7 @@ module Slim
             break
           else
             # Found something where an attribute should be
-            @line.lstrip!
+            @line = @line.lstrip
             syntax_error!('Expected attribute') unless @line.empty?
 
             # Attributes span multiple lines
@@ -425,7 +422,7 @@ module Slim
       code, count, delimiter, close_delimiter = '', 0, nil, nil
 
       # Attribute ends with space or attribute delimiter
-      end_regex = /\A[\s#{Regexp.escape outer_delimiter.to_s}]/
+      end_regex = /^[\s#{Regexp.escape outer_delimiter.to_s}]/
 
       until @line.empty? || (count == 0 && @line =~ end_regex)
         if count > 0
@@ -438,7 +435,9 @@ module Slim
           count = 1
           delimiter, close_delimiter = $&, DELIMITERS[$&]
         end
-        code << @line.slice!(0)
+        firstChar = @line.slice(0)
+        @line = @line.slice(1..-1)
+        code += firstChar
       end
       syntax_error!("Expected closing delimiter #{close_delimiter}") if count != 0
       code
@@ -454,16 +453,20 @@ module Slim
           elsif @line[0] == ?}
             count -= 1
           end
-        elsif @line =~ /\A#\{/
-          value << @line.slice!(0)
+        elsif @line =~ /^#\{/
+          firstChar = @line.slice(0)
+          @line = @line.slice(1..-1)
+          value += firstChar
           count = 1
         end
-        value << @line.slice!(0)
+        firstChar = @line.slice(0)
+        @line = @line.slice(1..-1)
+        value += firstChar
       end
 
       syntax_error!("Expected closing brace }") if count != 0
       syntax_error!("Expected closing quote #{quote}") if @line[0] != quote[0]
-      @line.slice!(0)
+      @line = @line.slice(1..-1)
 
       value
     end
diff --git a/slim.gemspec b/slim.gemspec
index 699d2cc..0fc5fd8 100644
--- a/slim.gemspec
+++ b/slim.gemspec
@@ -18,12 +18,4 @@ Gem::Specification.new do |s|
   s.require_paths = %w(lib)
 
   s.add_runtime_dependency('temple', ['~> 0.5.5'])
-  s.add_runtime_dependency('tilt', ['~> 1.3.3'])
-
-  s.add_development_dependency('rake', ['>= 0.8.7'])
-  s.add_development_dependency('sass', ['>= 3.1.0'])
-  s.add_development_dependency('minitest', ['>= 0'])
-  s.add_development_dependency('kramdown', ['>= 0'])
-  s.add_development_dependency('creole', ['>= 0'])
-  s.add_development_dependency('builder', ['>= 0'])
 end
-- 
2.10.0

