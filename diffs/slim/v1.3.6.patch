From f91fa9787bdcf2f175c64cc8a3fb1cf93ebd5c11 Mon Sep 17 00:00:00 2001
From: Patrick Kettner <patrickkettner@gmail.com>
Date: Sun, 6 Nov 2016 05:09:12 -0800
Subject: [PATCH] .

---
 lib/slim/interpolation.rb |  8 ++--
 lib/slim/parser.rb        | 94 ++++++++++++++++++++++++-----------------------
 slim.gemspec              |  1 -
 3 files changed, 53 insertions(+), 50 deletions(-)

diff --git a/lib/slim/interpolation.rb b/lib/slim/interpolation.rb
index 7bcf0e7..134d066 100644
--- a/lib/slim/interpolation.rb
+++ b/lib/slim/interpolation.rb
@@ -14,16 +14,16 @@ module Slim
       block = [:multi]
       begin
         case string
-        when /\A\\#\{/
+	when /^\\#\{/
           # Escaped interpolation
           block << [:static, '#{']
           string = $'
-        when /\A#\{/
+	when /^#\{/
           # Interpolation
           string, code = parse_expression($')
-          escape = code !~ /\A\{.*\}\Z/
+	  escape = code !~ /^\{.*\}$/
           block << [:slim, :output, escape, escape ? code : code[1..-2], [:multi]]
-        when /\A([#\\]|[^#\\]*)/
+	when /^([#\\]|[^#\\]*)/
           # Static text
           block << [:static, $&]
           string = $'
diff --git a/lib/slim/parser.rb b/lib/slim/parser.rb
index f548447..e93285e 100644
--- a/lib/slim/parser.rb
+++ b/lib/slim/parser.rb
@@ -47,8 +47,8 @@ module Slim
           raise ArgumentError, 'You can only use special characters for attribute shortcuts' if k =~ /[\w-]/
         end
       end
-      @attr_shortcut_regex = /\A(#{shortcut_regex @attr_shortcut})(\w[\w-]*\w|\w+)/
-      @tag_regex = /\A(?:#{shortcut_regex @tag_shortcut}|\*(?=[^\s]+)|(\w[\w:-]*\w|\w+))/
+      @attr_shortcut_regex = /^(#{shortcut_regex @attr_shortcut})(\w[\w-]*\w|\w+)/
+      @tag_regex = /^(?:#{shortcut_regex @tag_shortcut}|\*(?=[^\s]+)|(\w[\w:-]*\w|\w+))/
     end
 
     # Compile string to Temple expression
@@ -75,15 +75,15 @@ module Slim
       '{' => '}',
     }.freeze
 
-    DELIMITER_REGEX = /\A[#{Regexp.escape DELIMITERS.keys.join}]/
-    ATTR_NAME = '\A\s*(\w[:\w-]*)'
+    DELIMITER_REGEX = /^[#{Regexp.escape DELIMITERS.keys.join}]/
+    ATTR_NAME = '^\s*(\w[:\w-]*)'
     QUOTED_ATTR_REGEX = /#{ATTR_NAME}=(=?)("|')/
     CODE_ATTR_REGEX = /#{ATTR_NAME}=(=?)/
 
     # Convert deprecated string shortcut to hash
     def deprecated_shortcut(v)
       warn "Slim :shortcut string values are deprecated, use hash like { '#' => { :tag => 'div', :attr => 'id' } }"
-      if v =~ /\A([^\s]+)\s+([^\s]+)\Z/
+      if v =~ /^([^\s]+)\s+([^\s]+)$/
         { :tag => $1, :attr => $2 }
       else
         { :attr => v }
@@ -101,8 +101,6 @@ module Slim
         old_enc = s.encoding
         s = s.dup if s.frozen?
         s.force_encoding(options[:encoding])
-        # Fall back to old encoding if new encoding is invalid
-        s.force_encoding(old_enc) unless s.valid_encoding?
       end
       s
     end
@@ -111,12 +109,12 @@ module Slim
     def remove_bom(s)
       if s.respond_to?(:encoding)
         if s.encoding.name =~ /^UTF-(8|16|32)(BE|LE)?/
-          s.gsub(Regexp.new("\\A\uFEFF".encode(s.encoding.name)), '')
+	  s.gsub(Regexp.new("\^\uFEFF".encode(s.encoding.name)), '')
         else
           s
         end
       else
-        s.gsub(/\A\xEF\xBB\xBF/, '')
+	s.gsub(/^\xEF\xBB\xBF/, '')
       end
     end
 
@@ -160,11 +158,11 @@ module Slim
     def get_indent(line)
       # Figure out the indentation. Kinda ugly/slow way to support tabs,
       # but remember that this is only done at parsing time.
-      line[/\A[ \t]*/].gsub("\t", @tab).size
+      line[/^[ \t]*/].gsub("\t", @tab).size
     end
 
     def parse_line
-      if @line =~ /\A\s*\Z/
+      if @line =~ /^\s*$/
         @stacks.last << [:newline]
         return
       end
@@ -172,7 +170,7 @@ module Slim
       indent = get_indent(@line)
 
       # Remove the indentation
-      @line.lstrip!
+      @line = @line.lstrip
 
       # If there's more stacks than indents, it means that the previous
       # line is expecting this line to be indented.
@@ -211,48 +209,48 @@ module Slim
 
     def parse_line_indicators
       case @line
-      when /\A\/!( ?)/
+      when /^\/!( ?)/
         # HTML comment
         @stacks.last << [:html, :comment, [:slim, :text, parse_text_block($', @indents.last + $1.size + 2)]]
-      when /\A\/\[\s*(.*?)\s*\]\s*\Z/
+      when /^\/\[\s*(.*?)\s*\]\s*$/
         # HTML conditional comment
         block = [:multi]
         @stacks.last << [:html, :condcomment, $1, block]
         @stacks << block
-      when /\A\//
+      when /^\//
         # Slim comment
         parse_comment_block
-      when /\A([\|'])( ?)/
+      when /^([\|'])( ?)/
         # Found a text block.
         trailing_ws = $1 == "'"
         @stacks.last << [:slim, :text, parse_text_block($', @indents.last + $2.size + 1)]
         @stacks.last << [:static, ' '] if trailing_ws
-      when /\A</
+      when /^</
         # Inline html
         # @stacks.last << parse_text_block(@line, @indents.last + 1)
         block = [:multi]
         @stacks.last << [:multi, [:slim, :interpolate, @line], block]
         @stacks << block
-      when /\A-/
+      when /^-/
         # Found a code block.
         # We expect the line to be broken or the next line to be indented.
-        @line.slice!(0)
+	@line = @line.slice(1..-1)
         block = [:multi]
         @stacks.last << [:slim, :control, parse_broken_line, block]
         @stacks << block
-      when /\A=/
+      when /^=/
         # Found an output block.
         # We expect the line to be broken or the next line to be indented.
-        @line =~ /\A=(=?)('?)/
+	@line =~ /^=(=?)('?)/
         @line = $'
         block = [:multi]
         @stacks.last << [:slim, :output, $1.empty?, parse_broken_line, block]
         @stacks.last << [:static, ' '] unless $2.empty?
         @stacks << block
-      when /\A(\w+):\s*\Z/
+      when /^(\w+):\s*$/
         # Embedded template detected. It is treated as block.
         @stacks.last << [:slim, :embedded, $1, parse_text_block]
-      when /\Adoctype\s+/i
+      when /^doctype\s+/i
         # Found doctype declaration
         @stacks.last << [:html, :doctype, $'.strip]
       when @tag_regex
@@ -266,7 +264,7 @@ module Slim
     end
 
     def parse_comment_block
-      while !@lines.empty? && (@lines.first =~ /\A\s*\Z/ || get_indent(@lines.first) > @indents.last)
+      while !@lines.empty? && (@lines.first =~ /^\s*$/ || get_indent(@lines.first) > @indents.last)
         next_line
         @stacks.last << [:newline]
       end
@@ -282,7 +280,7 @@ module Slim
 
       empty_lines = 0
       until @lines.empty?
-        if @lines.first =~ /\A\s*\Z/
+	if @lines.first =~ /^\s*$/
           next_line
           result << [:newline]
           empty_lines += 1 if text_indent
@@ -296,7 +294,7 @@ module Slim
           end
 
           next_line
-          @line.lstrip!
+	  @line = @line.lstrip
 
           # The text block lines must be at least indented
           # as deep as the first line.
@@ -319,7 +317,7 @@ module Slim
 
     def parse_broken_line
       broken_line = @line.strip
-      while broken_line =~ /[,\\]\Z/
+      while broken_line =~ /[,\\]$/
         expect_next_line
         broken_line << "\n" << @line
       end
@@ -336,7 +334,7 @@ module Slim
       @stacks.last << tag
 
       case @line
-      when /\A\s*:\s*/
+      when /^\s*:\s*/
         # Block expansion
         @line = $'
         (@line =~ @tag_regex) || syntax_error!('Expected tag')
@@ -347,21 +345,21 @@ module Slim
         @stacks << content
         parse_tag($&)
         @stacks.delete_at(i)
-      when /\A\s*=(=?)('?)/
+      when /^\s*=(=?)('?)/
         # Handle output code
         @line = $'
         block = [:multi]
         tag << [:slim, :output, $1 != '=', parse_broken_line, block]
         @stacks.last << [:static, ' '] unless $2.empty?
         @stacks << block
-      when /\A\s*\//
+      when /^\s*\//
         # Closed tag. Do nothing
-      when /\A\s*\Z/
+      when /^\s*$/
         # Empty content
         content = [:multi]
         tag << content
         @stacks << content
-      when /\A( ?)(.*)\Z/
+      when /^( ?)(.*)$/
         # Text content
         tag << [:slim, :text, parse_text_block($2, @orig_line.size - @line.size + $1.size, true)]
       end
@@ -382,17 +380,17 @@ module Slim
       delimiter = nil
       if @line =~ DELIMITER_REGEX
         delimiter = DELIMITERS[$&]
-        @line.slice!(0)
+	@line = @line.slice(1..-1)
       end
 
       if delimiter
-        boolean_attr_regex = /#{ATTR_NAME}(?=(\s|#{Regexp.escape delimiter}|\Z))/
-        end_regex = /\A\s*#{Regexp.escape delimiter}/
+	boolean_attr_regex = /#{ATTR_NAME}(?=(\s|#{Regexp.escape delimiter}|$))/
+	end_regex = /^\s*#{Regexp.escape delimiter}/
       end
 
       while true
         case @line
-        when /\A\s*\*(?=[^\s]+)/
+	when /^\s*\*(?=[^\s]+)/
           # Splat attribute
           @line = $'
           attributes << [:slim, :splat, parse_ruby_code(delimiter)]
@@ -428,7 +426,7 @@ module Slim
             break
           else
             # Found something where an attribute should be
-            @line.lstrip!
+	    @line = @line.lstrip
             syntax_error!('Expected attribute') unless @line.empty?
 
             # Attributes span multiple lines
@@ -446,10 +444,10 @@ module Slim
       code, count, delimiter, close_delimiter = '', 0, nil, nil
 
       # Attribute ends with space or attribute delimiter
-      end_regex = /\A[\s#{Regexp.escape outer_delimiter.to_s}]/
+      end_regex = /^[\s#{Regexp.escape outer_delimiter.to_s}]/
 
       until @line.empty? || (count == 0 && @line =~ end_regex)
-        if @line =~ /\A[,\\]\Z/
+        if @line =~ /^[,\\]$/
           code << @line << "\n"
           expect_next_line
         else
@@ -463,7 +461,9 @@ module Slim
             count = 1
             delimiter, close_delimiter = $&, DELIMITERS[$&]
           end
-          code << @line.slice!(0)
+          firstChar = @line.slice(0)
+          @line = @line.slice(1..-1)
+          code += firstChar
         end
       end
       syntax_error!("Expected closing delimiter #{close_delimiter}") if count != 0
@@ -474,7 +474,7 @@ module Slim
       value, count = '', 0
 
       until @line.empty? || (count == 0 && @line[0] == quote[0])
-        if @line =~ /\A\\\Z/
+        if @line =~ /^\\$/
           value << ' '
           expect_next_line
         else
@@ -484,17 +484,21 @@ module Slim
             elsif @line[0] == ?}
               count -= 1
             end
-          elsif @line =~ /\A#\{/
-            value << @line.slice!(0)
+          elsif @line =~ /^#\{/
+            firstChar = @line.slice(0)
+            @line = @line.slice(1..-1)
+            value += firstChar
             count = 1
           end
-          value << @line.slice!(0)
+          firstChar = @line.slice(0)
+          @line = @line.slice(1..-1)
+          value += firstChar
         end
       end
 
       syntax_error!("Expected closing brace }") if count != 0
       syntax_error!("Expected closing quote #{quote}") if @line[0] != quote[0]
-      @line.slice!(0)
+      @line = @line.slice(1..-1)
 
       value
     end
diff --git a/slim.gemspec b/slim.gemspec
index a32718a..163e8bc 100644
--- a/slim.gemspec
+++ b/slim.gemspec
@@ -18,7 +18,6 @@ Gem::Specification.new do |s|
   s.require_paths = %w(lib)
 
   s.add_runtime_dependency('temple', ['~> 0.5.5'])
-  s.add_runtime_dependency('tilt', ['~> 1.3.3'])
 
   s.add_development_dependency('rake', ['>= 0.8.7'])
   s.add_development_dependency('sass', ['>= 3.1.0'])
-- 
2.10.0

