From 45d495256e932e6f55af2ee2cb758e3fe106e461 Mon Sep 17 00:00:00 2001
From: Patrick Kettner <patrickkettner@gmail.com>
Date: Sun, 6 Nov 2016 01:11:22 -0700
Subject: [PATCH] .

---
 lib/slim/interpolation.rb |  8 ++---
 lib/slim/parser.rb        | 80 +++++++++++++++++++++++++----------------------
 slim.gemspec              |  1 -
 3 files changed, 46 insertions(+), 43 deletions(-)

diff --git a/lib/slim/interpolation.rb b/lib/slim/interpolation.rb
index 1899aac..01f197e 100644
--- a/lib/slim/interpolation.rb
+++ b/lib/slim/interpolation.rb
@@ -14,18 +14,18 @@ module Slim
       block = [:multi]
       begin
         case string
-        when /\A\\#\{/
+        when /^\\#\{/
           # Escaped interpolation
           # HACK: Use :slim :output because this is used by InterpolateTiltEngine
           # to filter out protected strings (Issue #141).
           block << [:slim, :output, false, '\'#{\'', [:multi]]
           string = $'
-        when /\A#\{/
+        when /^#\{/
           # Interpolation
           string, code = parse_expression($')
-          escape = code !~ /\A\{.*\}\Z/
+          escape = code !~ /^\{.*\}$/
           block << [:slim, :output, escape, escape ? code : code[1..-2], [:multi]]
-        when /\A(#|[^#]*)/
+        when /^(#|[^#]*)/
           # Static text
           block << [:static, $&]
           string = $'
diff --git a/lib/slim/parser.rb b/lib/slim/parser.rb
index 091dd2a..81cc4f1 100644
--- a/lib/slim/parser.rb
+++ b/lib/slim/parser.rb
@@ -45,8 +45,6 @@ module Slim
         old_enc = str.encoding
         str = str.dup if str.frozen?
         str.force_encoding(options[:encoding])
-        # Fall back to old encoding if new encoding is invalid
-        str.force_encoding(old_enc) unless str.valid_encoding?
       end
 
       result = [:multi]
@@ -71,10 +69,10 @@ module Slim
       '.' => 'class',
     }.freeze
 
-    DELIMITER_REGEX = /\A[\(\[\{]/
-    ATTR_NAME_REGEX = '\A\s*(\w[:\w-]*)'
-    CLASS_ID_REGEX = /\A(#|\.)(\w[\w-]*\w|\w+)/
-    TAG_REGEX = /\A([#\.]|\w[\w:-]*\w|\w+)/
+    DELIMITER_REGEX = /^[\(\[\{]/
+    ATTR_NAME_REGEX = '^\s*(\w[:\w-]*)'
+    CLASS_ID_REGEX = /^(#|\.)(\w[\w-]*\w|\w+)/
+    TAG_REGEX = /^([#\.]|\w[\w:-]*\w|\w+)/
 
     def reset(lines = nil, stacks = nil)
       # Since you can indent however you like in Slim, we need to keep a list
@@ -116,11 +114,11 @@ module Slim
     def get_indent(line)
       # Figure out the indentation. Kinda ugly/slow way to support tabs,
       # but remember that this is only done at parsing time.
-      line[/\A[ \t]*/].gsub("\t", @tab).size
+      line[/^[ \t]*/].gsub("\t", @tab).size
     end
 
     def parse_line
-      if @line =~ /\A\s*\Z/
+      if @line =~ /^\s*$/
         @stacks.last << [:newline]
         return
       end
@@ -128,7 +126,7 @@ module Slim
       indent = get_indent(@line)
 
       # Remove the indentation
-      @line.lstrip!
+      @line = @line.lstrip
 
       # If there's more stacks than indents, it means that the previous
       # line is expecting this line to be indented.
@@ -167,12 +165,12 @@ module Slim
 
     def parse_line_indicators
       case @line
-      when /\A\//
+      when /^\//
         # Found a comment block.
-        if @line =~ %r{\A/!( ?)(.*)\Z}
+        if @line =~ %r{^/!( ?)(.*)$}
           # HTML comment
           @stacks.last << [:html, :comment, parse_text_block($2, @indents.last + $1.size + 2)]
-        elsif @line =~ %r{\A/\[\s*(.*?)\s*\]\s*\Z}
+        elsif @line =~ %r{^/\[\s*(.*?)\s*\]\s*$}
           # HTML conditional comment
           block = [:multi]
           @stacks.last << [:slim, :condcomment, $1, block]
@@ -181,31 +179,31 @@ module Slim
           # Slim comment
           parse_comment_block
         end
-      when /\A([\|'])( ?)(.*)\Z/
+      when /^([\|'])( ?)(.*)$/
         # Found a text block.
         trailing_ws = $1 == "'"
         @stacks.last << parse_text_block($3, @indents.last + $2.size + 1)
         @stacks.last << [:static, ' '] if trailing_ws
-      when /\A-/
+      when /^-/
         # Found a code block.
         # We expect the line to be broken or the next line to be indented.
         block = [:multi]
-        @line.slice!(0)
+        @line = @line.slice(1..-1)
         @stacks.last << [:slim, :control, parse_broken_line, block]
         @stacks << block
-      when /\A=/
+      when /^=/
         # Found an output block.
         # We expect the line to be broken or the next line to be indented.
-        @line =~ /\A=(=?)('?)/
+        @line =~ /^=(=?)('?)/
         @line = $'
         block = [:multi]
         @stacks.last << [:slim, :output, $1.empty?, parse_broken_line, block]
         @stacks.last << [:static, ' '] unless $2.empty?
         @stacks << block
-      when /\A(\w+):\s*\Z/
+      when /^(\w+):\s*$/
         # Embedded template detected. It is treated as block.
         @stacks.last << [:slim, :embedded, $1, parse_text_block]
-      when /\Adoctype\s+/i
+      when /^doctype\s+/i
         # Found doctype declaration
         @stacks.last << [:html, :doctype, $'.strip]
       when TAG_REGEX
@@ -218,7 +216,7 @@ module Slim
     end
 
     def parse_comment_block
-      while !@lines.empty? && (@lines.first =~ /\A\s*\Z/ || get_indent(@lines.first) > @indents.last)
+      while !@lines.empty? && (@lines.first =~ /^\s*$/ || get_indent(@lines.first) > @indents.last)
         next_line
         @stacks.last << [:newline]
       end
@@ -234,7 +232,7 @@ module Slim
 
       empty_lines = 0
       until @lines.empty?
-        if @lines.first =~ /\A\s*\Z/
+        if @lines.first =~ /^\s*$/
           next_line
           result << [:newline]
           empty_lines += 1 if text_indent
@@ -278,14 +276,14 @@ module Slim
       if tag == '#' || tag == '.'
         tag = options[:default_tag]
       else
-        @line.slice!(0, tag.size)
+        @line = @line.slice(tag.size..-1)
       end
 
       tag = [:html, :tag, tag, parse_attributes]
       @stacks.last << tag
 
       case @line
-      when /\A\s*:\s*/
+      when /^\s*:\s*/
         # Block expansion
         @line = $'
         (@line =~ TAG_REGEX) || syntax_error!('Expected tag')
@@ -295,7 +293,7 @@ module Slim
         @stacks << content
         parse_tag($1)
         @stacks.delete_at(i)
-      when /\A\s*=(=?)('?)/
+      when /^\s*=(=?)('?)/
         # Handle output code
         block = [:multi]
         @line = $'
@@ -303,14 +301,14 @@ module Slim
         tag << content
         @stacks.last << [:static, ' '] unless $2.empty?
         @stacks << block
-      when /\A\s*\//
+      when /^\s*\//
         # Closed tag. Do nothing
-      when /\A\s*\Z/
+      when /^\s*$/
         # Empty content
         content = [:multi]
         tag << content
         @stacks << content
-      when /\A( ?)(.*)\Z/
+      when /^( ?)(.*)$/
         # Text content
         tag << parse_text_block($2, @orig_line.size - @line.size + $1.size)
       end
@@ -331,7 +329,7 @@ module Slim
       delimiter = nil
       if @line =~ DELIMITER_REGEX
         delimiter = DELIMITERS[$&]
-        @line.slice!(0)
+	@line = @line.slice(1..-1)
       end
 
       orig_line = @orig_line
@@ -344,14 +342,14 @@ module Slim
           name = $1
           if delimiter && $2 != '='
             attributes << [:slim, :attr, name, false, 'true']
-          elsif @line =~ /\A["']/
+	  elsif @line =~ /^["']/
             # Value is quoted (static)
             @line = $'
             attributes << [:html, :attr, name, [:slim, :interpolate, parse_quoted_attribute($&)]]
           else
             # Value is ruby code
             escape = @line[0] != ?=
-            @line.slice!(0) unless escape
+	    @line = @line.slice(1..-1) unless escape
             attributes << [:slim, :attr, name, escape, parse_ruby_attribute(delimiter)]
           end
         end
@@ -360,13 +358,13 @@ module Slim
         break unless delimiter
 
         # Find ending delimiter
-        if @line =~ /\A\s*#{Regexp.escape delimiter}/
+	if @line =~ /^\s*#{Regexp.escape delimiter}/
           @line = $'
           break
         end
 
         # Found something where an attribute should be
-        @line.lstrip!
+	@line = @line.lstrip
         syntax_error!('Expected attribute') unless @line.empty?
 
         # Attributes span multiple lines
@@ -384,7 +382,7 @@ module Slim
       value, count, delimiter, close_delimiter = '', 0, nil, nil
 
       # Attribute ends with space or attribute delimiter
-      end_regex = /\A[\s#{Regexp.escape outer_delimiter.to_s}]/
+      end_regex = /^[\s#{Regexp.escape outer_delimiter.to_s}]/
 
       until @line.empty? || (count == 0 && @line =~ end_regex)
         if count > 0
@@ -397,7 +395,9 @@ module Slim
           count = 1
           delimiter, close_delimiter = $&, DELIMITERS[$&]
         end
-        value << @line.slice!(0)
+	firstChar = @line.slice(0)
+	@line = @line.slice(1..-1)
+	value += firstChar
       end
 
       syntax_error!("Expected closing attribute delimiter #{close_delimiter}") if count != 0
@@ -421,15 +421,19 @@ module Slim
           elsif @line[0] == ?}
             count -= 1
           end
-        elsif @line =~ /\A#\{/
-          value << @line.slice!(0)
+	elsif @line =~ /^#\{/
+	  firstChar = @line.slice(0)
+	  @line = @line.slice(1..-1)
+	  value += firstChar
           count = 1
         end
-        value << @line.slice!(0)
+	firstChar = @line.slice(0)
+	@line = @line.slice(1..-1)
+	value += firstChar
       end
 
       syntax_error!("Expected closing brace }") if count != 0
-      @line.slice!(0)
+      @line = @line.slice(0)
       value
     end
 
diff --git a/slim.gemspec b/slim.gemspec
index 3190414..1c63b73 100644
--- a/slim.gemspec
+++ b/slim.gemspec
@@ -20,7 +20,6 @@ Gem::Specification.new do |s|
   s.require_paths = %w(lib)
 
   s.add_runtime_dependency('temple', ['~> 0.3.5'])
-  s.add_runtime_dependency('tilt', ['~> 1.3.2'])
 
   s.add_development_dependency('rake', ['>= 0.8.7'])
   s.add_development_dependency('sass', ['>= 3.1.0'])
-- 
2.10.0

