From 55539f09f0ed3f70f9007c0f202a7086747f0660 Mon Sep 17 00:00:00 2001
From: Patrick Kettner <patrickkettner@gmail.com>
Date: Fri, 18 Nov 2016 11:09:03 -0800
Subject: [PATCH] .

---
 lib/slim/embedded_engine.rb |  6 +--
 lib/slim/end_inserter.rb    |  4 +-
 lib/slim/interpolation.rb   | 17 ++++++---
 lib/slim/parser.rb          | 89 ++++++++++++++++++++++-----------------------
 lib/slim/sections.rb        |  2 +-
 slim.gemspec                | 10 -----
 6 files changed, 60 insertions(+), 68 deletions(-)

diff --git a/lib/slim/embedded_engine.rb b/lib/slim/embedded_engine.rb
index e70dac4..ea43b7e 100644
--- a/lib/slim/embedded_engine.rb
+++ b/lib/slim/embedded_engine.rb
@@ -8,7 +8,7 @@ module Slim
     end
 
     def on_slim_interpolate(text)
-      @collected << text
+      @collected += text
       nil
     end
   end
@@ -37,12 +37,12 @@ module Slim
     end
 
     def on_static(text)
-      @collected << text
+      @collected += text
       nil
     end
 
     def on_slim_output(escape, text, content)
-      @collected << "pro#{@protect.size}tect"
+      @collected += "pro#{@protect.size}tect"
       @protect << [:slim, :output, escape, text, content]
       nil
     end
diff --git a/lib/slim/end_inserter.rb b/lib/slim/end_inserter.rb
index 7eb23e8..0289cda 100644
--- a/lib/slim/end_inserter.rb
+++ b/lib/slim/end_inserter.rb
@@ -10,8 +10,8 @@ module Slim
   #
   # @api private
   class EndInserter < Filter
-    ELSE_REGEX = /\Aelse|elsif|when\b/
-    END_REGEX = /\Aend\b/
+    ELSE_REGEX = /^else|elsif|when\b/
+    END_REGEX = /&end\b/
 
     # Handle multi expression `[:multi, *exps]`
     #
diff --git a/lib/slim/interpolation.rb b/lib/slim/interpolation.rb
index 1899aac..5ced289 100644
--- a/lib/slim/interpolation.rb
+++ b/lib/slim/interpolation.rb
@@ -12,25 +12,30 @@ module Slim
       # Interpolate variables in text (#{variable}).
       # Split the text into multiple dynamic and static parts.
       block = [:multi]
-      begin
+      loop do
         case string
-        when /\A\\#\{/
+        when /^\\#\{/
           # Escaped interpolation
           # HACK: Use :slim :output because this is used by InterpolateTiltEngine
           # to filter out protected strings (Issue #141).
           block << [:slim, :output, false, '\'#{\'', [:multi]]
           string = $'
-        when /\A#\{/
+        when /^#\{/
           # Interpolation
           string, code = parse_expression($')
-          escape = code !~ /\A\{.*\}\Z/
+          escape = code !~ /^\{.*\}$/
           block << [:slim, :output, escape, escape ? code : code[1..-2], [:multi]]
-        when /\A(#|[^#]*)/
+        when /^(#|[^#]*)/
           # Static text
           block << [:static, $&]
           string = $'
         end
-      end until string.empty?
+        if string.empty?
+          break
+        else
+          next
+        end
+      end
       block
     end
 
diff --git a/lib/slim/parser.rb b/lib/slim/parser.rb
index 8825e20..1cead69 100644
--- a/lib/slim/parser.rb
+++ b/lib/slim/parser.rb
@@ -40,15 +40,6 @@ module Slim
     # @param [String] str Slim code
     # @return [Array] Temple expression representing the code]]
     def call(str)
-      # Set string encoding if option is set
-      if options[:encoding] && str.respond_to?(:encoding)
-        old = str.encoding
-        str = str.dup if str.frozen?
-        str.force_encoding(options[:encoding])
-        # Fall back to old encoding if new encoding is invalid
-        str.force_encoding(old_enc) unless str.valid_encoding?
-      end
-
       result = [:multi]
       reset(str.split($/), [result])
 
@@ -71,13 +62,13 @@ module Slim
       '.' => 'class',
     }.freeze
 
-    DELIMITER_REGEX = /\A[\(\[\{]/
-    ATTR_NAME_REGEX = '\A\s*(\w[:\w-]*)'
+    DELIMITER_REGEX = /^[\(\[\{]/
+    ATTR_NAME_REGEX = '^\s*(\w[:\w-]*)'
 
     if RUBY_VERSION > '1.9'
-      CLASS_ID_REGEX = /\A(#|\.)([\w\u00c0-\uFFFF][\w:\u00c0-\uFFFF-]*)/
+      CLASS_ID_REGEX = /^(#|\.)([\w\u00c0-\uFFFF][\w:\u00c0-\uFFFF-]*)/
     else
-      CLASS_ID_REGEX = /\A(#|\.)(\w[\w:-]*)/
+      CLASS_ID_REGEX = /^(#|\.)(\w[\w:-]*)/
     end
 
     def reset(lines = nil, stacks = nil)
@@ -120,11 +111,11 @@ module Slim
     def get_indent(line)
       # Figure out the indentation. Kinda ugly/slow way to support tabs,
       # but remember that this is only done at parsing time.
-      line[/\A[ \t]*/].gsub("\t", @tab).size
+      line[/^[ \t]*/].gsub("\t", @tab).size
     end
 
     def parse_line
-      if @line =~ /\A\s*\Z/
+      if @line =~ /^\s*$/
         @stacks.last << [:newline]
         return
       end
@@ -132,7 +123,7 @@ module Slim
       indent = get_indent(@line)
 
       # Remove the indentation
-      @line.lstrip!
+      @line = @line.lstrip
 
       # If there's more stacks than indents, it means that the previous
       # line is expecting this line to be indented.
@@ -171,16 +162,16 @@ module Slim
 
     def parse_line_indicators
       case @line
-      when /\A\//
+      when /^\//
         # Found a comment block.
-        if @line =~ %r{\A/!( ?)(.*)\Z}
+        if @line =~ %r{^/!( ?)(.*)$}
           # HTML comment
           block = [:multi]
           @stacks.last <<  [:html, :comment, block]
           @stacks << block
           @stacks.last << [:slim, :interpolate, $2] unless $2.empty?
           parse_text_block($2.empty? ? nil : @indents.last + $1.size + 2)
-        elsif @line =~ %r{\A/\[\s*(.*?)\s*\]\s*\Z}
+        elsif @line =~ %r{^/\[\s*(.*?)\s*\]\s*$}
           # HTML conditional comment
           block = [:multi]
           @stacks.last << [:slim, :condcomment, $1, block]
@@ -189,39 +180,39 @@ module Slim
           # Slim comment
           parse_comment_block
         end
-      when /\A([\|'])( ?)(.*)\Z/
+      when /^([\|'])( ?)(.*)$/
         # Found a text block.
         trailing_ws = $1 == "'"
         @stacks.last << [:slim, :interpolate, $3] unless $3.empty?
         parse_text_block($3.empty? ? nil : @indents.last + $2.size + 1)
         @stacks.last << [:static, ' '] if trailing_ws
-      when /\A-/
+      when /^-/
         # Found a code block.
         # We expect the line to be broken or the next line to be indented.
         block = [:multi]
-        @line.slice!(0)
+        @line = @line.slice(1..-1)
         @stacks.last << [:slim, :control, parse_broken_line, block]
         @stacks << block
-      when /\A=/
+      when /^=/
         # Found an output block.
         # We expect the line to be broken or the next line to be indented.
-        @line =~ /\A=(=?)('?)/
+        @line =~ /^=(=?)('?)/
         @line = $'
         block = [:multi]
         @stacks.last << [:slim, :output, $1.empty?, parse_broken_line, block]
         @stacks.last << [:static, ' '] unless $2.empty?
         @stacks << block
-      when /\A(\w+):\s*\Z/
+      when /^(\w+):\s*$/
         # Embedded template detected. It is treated as block.
         block = [:multi]
         @stacks.last << [:newline] << [:slim, :embedded, $1, block]
         @stacks << block
         parse_text_block
         return # Don't append newline, this has already been done before
-      when /\Adoctype\s+/i
+      when /^doctype\s+/i
         # Found doctype declaration
         @stacks.last << [:html, :doctype, $'.strip]
-      when /\A([#\.]|\w[:\w-]*)/
+      when /^([#\.]|\w[:\w-]*)/
         # Found a HTML tag.
         parse_tag($&)
       else
@@ -231,7 +222,7 @@ module Slim
     end
 
     def parse_comment_block
-      while !@lines.empty? && (@lines.first =~ /\A\s*\Z/ || get_indent(@lines.first) > @indents.last)
+      while !@lines.empty? && (@lines.first =~ /^\s*$/ || get_indent(@lines.first) > @indents.last)
         next_line
         @stacks.last << [:newline]
       end
@@ -240,7 +231,7 @@ module Slim
     def parse_text_block(text_indent = nil)
       empty_lines = 0
       until @lines.empty?
-        if @lines.first =~ /\A\s*\Z/
+        if @lines.first =~ /^\s*$/
           next_line
           @stacks.last << [:newline]
           empty_lines += 1 if text_indent
@@ -254,7 +245,7 @@ module Slim
           end
 
           next_line
-          @line.lstrip!
+          @line = @line.lstrip
 
           # The text block lines must be at least indented
           # as deep as the first line.
@@ -283,14 +274,14 @@ module Slim
       if tag == '#' || tag == '.'
         tag = options[:default_tag]
       else
-        @line.slice!(0, tag.size)
+        @line = @line.slice(tag.size..-1)
       end
 
       tag = [:html, :tag, tag, parse_attributes]
       @stacks.last << tag
 
       case @line
-      when /\A\s*=(=?)('?)/
+      when /^\s*=(=?)('?)/
         # Handle output code
         block = [:multi]
         @line = $'
@@ -298,14 +289,14 @@ module Slim
         tag << content
         @stacks.last << [:static, ' '] unless $2.empty?
         @stacks << block
-      when /\A\s*\//
+      when /^\s*\//
         # Closed tag. Do nothing
-      when /\A\s*\Z/
+      when /^\s*$/
         # Empty content
         content = [:multi]
         tag << content
         @stacks << content
-      when /\A( ?)(.*)\Z/
+      when /^( ?)(.*)$/
         # Text content
         content = [:multi, [:slim, :interpolate, $2]]
         tag << content
@@ -329,7 +320,7 @@ module Slim
       delimiter = nil
       if @line =~ DELIMITER_REGEX
         delimiter = DELIMITERS[$&]
-        @line.slice!(0)
+        @line = @line.slice(1..-1)
       end
 
       orig_line = @orig_line
@@ -342,14 +333,14 @@ module Slim
           name = $1
           if delimiter && $2 != '='
             attributes << [:slim, :attr, name, false, 'true']
-          elsif @line =~ /\A["']/
+          elsif @line =~ /^["']/
             # Value is quoted (static)
             @line = $'
             attributes << [:html, :attr, name, [:slim, :interpolate, parse_quoted_attribute($&)]]
           else
             # Value is ruby code
             escape = @line[0] != ?=
-            @line.slice!(0) unless escape
+            @line = @line.slice(1..-1) unless escape
             attributes << [:slim, :attr, name, escape, parse_ruby_attribute(delimiter)]
           end
         end
@@ -358,13 +349,13 @@ module Slim
         break unless delimiter
 
         # Find ending delimiter
-        if @line =~ /\A\s*#{Regexp.escape delimiter}/
+        if @line =~ /^\s*#{Regexp.escape delimiter}/
           @line = $'
           break
         end
 
         # Found something where an attribute should be
-        @line.lstrip!
+        @line = @line.lstrip
         syntax_error!('Expected attribute') unless @line.empty?
 
         # Attributes span multiple lines
@@ -382,7 +373,7 @@ module Slim
       value, count, delimiter, close_delimiter = '', 0, nil, nil
 
       # Attribute ends with space or attribute delimiter
-      end_regex = /\A[\s#{Regexp.escape outer_delimiter.to_s}]/
+      end_regex = /^[\s#{Regexp.escape outer_delimiter.to_s}]/
 
       until @line.empty? || (count == 0 && @line =~ end_regex)
         if count > 0
@@ -395,7 +386,9 @@ module Slim
           count = 1
           delimiter, close_delimiter = $&, DELIMITERS[$&]
         end
-        value << @line.slice!(0)
+        firstChar = @line.slice(0)
+        @line = @line.slice(1..-1)
+        value += firstChar
       end
 
       syntax_error!("Expected closing attribute delimiter #{close_delimiter}") if count != 0
@@ -419,15 +412,19 @@ module Slim
           elsif @line[0] == ?}
             count -= 1
           end
-        elsif @line =~ /\A#\{/
-          value << @line.slice!(0)
+        elsif @line =~ /^#\{/
+          firstChar = @line.slice(0)
+          @line = @line.slice(1..-1)
+          value += firstChar
           count = 1
         end
-        value << @line.slice!(0)
+        firstChar = @line.slice(0)
+        @line = @line.slice(1..-1)
+        value += firstChar
       end
 
       syntax_error!("Expected closing brace }") if count != 0
-      @line.slice!(0)
+      @line = @line.slice(1..-1)
       value
     end
 
diff --git a/lib/slim/sections.rb b/lib/slim/sections.rb
index 54635b9..94a56dc 100644
--- a/lib/slim/sections.rb
+++ b/lib/slim/sections.rb
@@ -29,7 +29,7 @@ module Slim
 
     # Interpret control blocks as sections or inverted sections
     def on_slim_control(name, content)
-      if name =~ /\A!\s*(.*)/
+      if name =~ /^!\s*(.*)/
         on_slim_inverted_section($1, content)
       else
         on_slim_section(name, content)
diff --git a/slim.gemspec b/slim.gemspec
index 22e3806..39fc381 100644
--- a/slim.gemspec
+++ b/slim.gemspec
@@ -20,14 +20,4 @@ Gem::Specification.new do |s|
   s.require_paths = %w(lib)
 
   s.add_runtime_dependency('temple', ['~> 0.3.4'])
-  s.add_runtime_dependency('tilt', ['~> 1.3.2'])
-
-  s.add_development_dependency('rake', ['>= 0.8.7'])
-  s.add_development_dependency('sass', ['>= 3.1.0'])
-  s.add_development_dependency('minitest', ['>= 0'])
-  s.add_development_dependency('kramdown', ['>= 0'])
-  s.add_development_dependency('yard', ['>= 0'])
-  s.add_development_dependency('creole', ['>= 0'])
-  s.add_development_dependency('builder', ['>= 0'])
-  #s.add_development_dependency('rcov', ['>= 0'])
 end
-- 
2.10.0

