From f2ebdfd7867c9bb53596160f0ce6ac122b7b964f Mon Sep 17 00:00:00 2001
From: Patrick Kettner <patrickkettner@gmail.com>
Date: Tue, 15 Nov 2016 13:42:27 -0800
Subject: [PATCH] .

---
 lib/slim/embedded_engine.rb |  2 +-
 lib/slim/interpolation.rb   | 14 ++++++++++----
 lib/slim/parser.rb          | 29 ++++++++++++++++++++---------
 3 files changed, 31 insertions(+), 14 deletions(-)

diff --git a/lib/slim/embedded_engine.rb b/lib/slim/embedded_engine.rb
index b7fdc99..11e5537 100644
--- a/lib/slim/embedded_engine.rb
+++ b/lib/slim/embedded_engine.rb
@@ -23,7 +23,7 @@ module Slim
 
     def collect_text(body)
       body.inject('') do |text, exp|
-        text << exp[2] if exp[0] == :slim && exp[1] == :text
+        text += exp[2] if exp[0] == :slim && exp[1] == :text
         text
       end
     end
diff --git a/lib/slim/interpolation.rb b/lib/slim/interpolation.rb
index 09e5cb9..6b07f8a 100644
--- a/lib/slim/interpolation.rb
+++ b/lib/slim/interpolation.rb
@@ -36,20 +36,26 @@ module Slim
         if stack.empty? && string =~ /^\}/
           # Stack is empty, this means we are finished
           # if the next character is a closing bracket
-          string.slice!(0)
+          string = string.slice(1..-1)
           break
         elsif string =~ Parser::DELIMITER_REGEX
           # Delimiter found, push it on the stack
           stack << Parser::DELIMITERS[$1]
-          code << string.slice!(0)
+          firstChar = string.slice(0)
+          string = string.slice(1..-1)
+          code += firstChar
         elsif string =~ Parser::CLOSE_DELIMITER_REGEX
           # Closing delimiter found, pop it from the stack if everything is ok
           raise "Text interpolation: Unexpected closing #{$1}" if stack.empty?
           raise "Text interpolation: Expected closing #{stack.last}" if stack.last != $1
-          code << string.slice!(0)
+          firstChar = string.slice(0)
+          string = string.slice(1..-1)
+          code += firstChar
           stack.pop
         else
-          code << string.slice!(0)
+          firstChar = string.slice(0)
+          string = string.slice(1..-1)
+          code += firstChar
         end
       end
 
diff --git a/lib/slim/parser.rb b/lib/slim/parser.rb
index 163635a..f92dc44 100644
--- a/lib/slim/parser.rb
+++ b/lib/slim/parser.rb
@@ -75,7 +75,7 @@ module Slim
         lineno += 1
 
         # Remove the newline at the end
-        line.chomp!
+	line = line.chomp
 
         # Handle broken lines
         if broken_line
@@ -99,7 +99,7 @@ module Slim
         indent = line[/^[ \t]*/].gsub("\t", @tab).size
 
         # Remove the indentation
-        line.lstrip!
+        line = line.lstrip
 
         # Handle blocks with multiple lines
         if block_indent
@@ -165,7 +165,9 @@ module Slim
         case line[0]
         when ?|, ?', ?/
           # Found a block.
-          ch = line.slice!(0)
+          firstChar = line.slice(0)
+          line = line.slice(1..-1)
+          ch = firstChar
 
           # We're now expecting the next line to be indented, so we'll need
           # to push a block to the stack.
@@ -175,7 +177,7 @@ module Slim
                            [:multi, block, [:slim, :text, ' ']]
                          elsif ch == ?/ && line[0] == ?!
                            # HTML comment
-                           line.slice!(0)
+                           line = line.slice(1..-1)
                            [:slim, :comment, block]
                          else
                            in_comment = ch == ?/
@@ -280,10 +282,13 @@ module Slim
 
       # Check to see if there is a delimiter right after the tag name
       delimiter = ''
+      puts line;
+      puts line =~ DELIMITER_REGEX
       if line =~ DELIMITER_REGEX
         delimiter = DELIMITERS[$1]
         # Replace the delimiter with a space so we can continue parsing as normal.
-        line[0] = ?\s
+        newFirstChar = ?\s
+        line = newFirstChar + line.slice(1..-1)
       end
 
       # Parse attributes
@@ -304,7 +309,7 @@ module Slim
       # Find ending delimiter
       if !delimiter.empty?
         if line[0, 1] == delimiter
-          line.slice!(0)
+          line = line.slice(1..-1)
         else
           syntax_error! "Expected closing delimiter #{delimiter}", orig_line, lineno, orig_line.size - line.size
         end
@@ -351,15 +356,21 @@ module Slim
         elsif line =~ DELIMITER_REGEX
           # Delimiter found, push it on the stack
           stack << DELIMITERS[$1]
-          value << line.slice!(0)
+          firstChar = line.slice(0)
+          line = line.slice(1..-1)
+          value += firstChar
         elsif line =~ CLOSE_DELIMITER_REGEX
           # Closing delimiter found, pop it from the stack if everything is ok
           syntax_error! "Unexpected closing #{$1}", orig_line, lineno if stack.empty?
           syntax_error! "Expected closing #{stack.last}", orig_line, lineno if stack.last != $1
-          value << line.slice!(0)
+          firstChar = line.slice(0)
+          line = line.slice(1..-1)
+          value += firstChar
           stack.pop
         else
-          value << line.slice!(0)
+          firstChar = line.slice(0)
+          line = line.slice(1..-1)
+          value += firstChar
         end
       end
 
-- 
2.10.0

