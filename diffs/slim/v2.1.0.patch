From 0e09a5eb9877eb3f65cd6fab2c9381ef39959533 Mon Sep 17 00:00:00 2001
From: Patrick Kettner <patrickkettner@gmail.com>
Date: Sun, 11 Dec 2016 23:38:43 -0800
Subject: [PATCH] .

---
 lib/slim/controls.rb          |   2 +-
 lib/slim/do_inserter.rb       |   2 +-
 lib/slim/embedded.rb          |   4 +-
 lib/slim/end_inserter.rb      |   6 +--
 lib/slim/engine.rb            |   3 +-
 lib/slim/interpolation.rb     |  17 +++---
 lib/slim/logic_less/filter.rb |   2 +-
 lib/slim/parser.rb            | 123 +++++++++++++++++++++++-------------------
 lib/slim/smart/escaper.rb     |   4 +-
 lib/slim/smart/filter.rb      |   6 +--
 lib/slim/smart/parser.rb      |  12 ++---
 lib/slim/splat/builder.rb     |   2 +-
 12 files changed, 101 insertions(+), 82 deletions(-)

diff --git a/lib/slim/controls.rb b/lib/slim/controls.rb
index 9f2d2e6..a05f445 100644
--- a/lib/slim/controls.rb
+++ b/lib/slim/controls.rb
@@ -3,7 +3,7 @@ module Slim
   class Controls < Filter
     define_options :disable_capture
 
-    IF_RE = /\A(if|unless)\b|\bdo\s*(\|[^\|]*\|)?\s*$/
+    IF_RE = /^(if|unless)\b|\bdo\s*(\|[^\|]*\|)?\s*$/
 
     # Handle control expression `[:slim, :control, code, content]`
     #
diff --git a/lib/slim/do_inserter.rb b/lib/slim/do_inserter.rb
index 1dc765d..087a223 100644
--- a/lib/slim/do_inserter.rb
+++ b/lib/slim/do_inserter.rb
@@ -7,7 +7,7 @@ module Slim
   #
   # @api private
   class DoInserter < Filter
-    BLOCK_REGEX = /(\A(if|unless|else|elsif|when|begin|rescue|ensure|case)\b)|\bdo\s*(\|[^\|]*\|\s*)?\Z/
+    BLOCK_REGEX = /(^(if|unless|else|elsif|when|begin|rescue|ensure|case)\b)|\bdo\s*(\|[^\|]*\|\s*)?$/
 
     # Handle control expression `[:slim, :control, code, content]`
     #
diff --git a/lib/slim/embedded.rb b/lib/slim/embedded.rb
index 38ba779..8fa952d 100644
--- a/lib/slim/embedded.rb
+++ b/lib/slim/embedded.rb
@@ -8,7 +8,7 @@ module Slim
     end
 
     def on_slim_interpolate(text)
-      @collected << text
+      @collected += text
       nil
     end
   end
@@ -36,7 +36,7 @@ module Slim
     end
 
     def on_static(text)
-      @collected << text
+      @collected += text
       nil
     end
 
diff --git a/lib/slim/end_inserter.rb b/lib/slim/end_inserter.rb
index 1e599d8..f89fa7a 100644
--- a/lib/slim/end_inserter.rb
+++ b/lib/slim/end_inserter.rb
@@ -10,9 +10,9 @@ module Slim
   #
   # @api private
   class EndInserter < Filter
-    IF_RE = /\A(if|unless|else|elsif|when|rescue|ensure)\b|\bdo\s*(\|[^\|]*\|)?\s*$/
-    ELSE_RE = /\A(else|elsif|when|rescue|ensure)\b/
-    END_RE = /\Aend\b/
+    IF_RE = /^(if|unless|else|elsif|when|rescue|ensure)\b|\bdo\s*(\|[^\|]*\|)?\s*$/
+    ELSE_RE = /^(else|elsif|when|rescue|ensure)\b/
+    END_RE = /^end\b/
 
     # Handle multi expression `[:multi, *exps]`
     #
diff --git a/lib/slim/engine.rb b/lib/slim/engine.rb
index 6ea769b..eb667f7 100644
--- a/lib/slim/engine.rb
+++ b/lib/slim/engine.rb
@@ -14,7 +14,6 @@ module Slim
                    :default_tag => 'div'
     define_deprecated_options :attr_delims
 
-    filter :Encoding, :encoding
     filter :RemoveBOM
     use Slim::Parser, :file, :tabsize, :shortcut, :default_tag, :attr_delims, :attr_list_delims, :code_attr_delims
     use Slim::Embedded, :enable_engines, :disable_engines, :pretty
@@ -35,7 +34,7 @@ module Slim
       (options[:streaming] ? Temple::Filters::StaticMerger : Temple::Filters::DynamicInliner).new
     end
     use :Generator do
-      options[:generator].new(options.to_hash.reject {|k,v| !options[:generator].default_options.valid_keys.include?(k) })
+      options[:generator].new()
     end
   end
 end
diff --git a/lib/slim/interpolation.rb b/lib/slim/interpolation.rb
index 0e1b9c1..1c3050e 100644
--- a/lib/slim/interpolation.rb
+++ b/lib/slim/interpolation.rb
@@ -12,23 +12,28 @@ module Slim
       # Interpolate variables in text (#{variable}).
       # Split the text into multiple dynamic and static parts.
       block = [:multi]
-      begin
+      loop do
         case string
-        when /\A\\#\{/
+	when /^\\#\{/
           # Escaped interpolation
           block << [:static, '#{']
           string = $'
-        when /\A#\{/
+	when /^#\{/
           # Interpolation
           string, code = parse_expression($')
-          escape = code !~ /\A\{.*\}\Z/
+	  escape = code !~ /^\{.*\}$/
           block << [:slim, :output, escape, escape ? code : code[1..-2], [:multi]]
-        when /\A([#\\]?[^#\\]*([#\\][^\\#\{][^#\\]*)*)/
+	when /^([#\\]?[^#\\]*([#\\][^\\#\{][^#\\]*)*)/
           # Static text
           block << [:static, $&]
           string = $'
         end
-      end until string.empty?
+	if string.empty?
+	  break
+	else
+	  next
+	end
+      end
       block
     end
 
diff --git a/lib/slim/logic_less/filter.rb b/lib/slim/logic_less/filter.rb
index 12782aa..2a40a0c 100644
--- a/lib/slim/logic_less/filter.rb
+++ b/lib/slim/logic_less/filter.rb
@@ -34,7 +34,7 @@ module Slim
     # Interpret control blocks as sections or inverted sections
     def on_slim_control(name, content)
       method =
-        if name =~ /\A!\s*(.*)/
+	if name =~ /^!\s*(.*)/
           name = $1
           'inverted_section'
         else
diff --git a/lib/slim/parser.rb b/lib/slim/parser.rb
index 840f667..ab99cfe 100644
--- a/lib/slim/parser.rb
+++ b/lib/slim/parser.rb
@@ -46,7 +46,7 @@ module Slim
       @code_attr_delims = options[:code_attr_delims] || options[:attr_delims]
       tabsize = options[:tabsize]
       if tabsize > 1
-        @tab_re = /\G((?: {#{tabsize}})*) {0,#{tabsize-1}}\t/
+	@tab_re = /((?: {#{tabsize}})*) {0,#{tabsize-1}}\t/
         @tab = '\1' + ' ' * tabsize
       else
         @tab_re = "\t"
@@ -61,16 +61,17 @@ module Slim
           raise ArgumentError, 'You can only use special characters for attribute shortcuts' if k =~ /(#{WORD_RE}|-)/
         end
       end
-      keys = Regexp.union @attr_shortcut.keys.sort_by {|k| -k.size }
-      @attr_shortcut_re = /\A(#{keys}+)((?:#{WORD_RE}|-)*)/
-      keys = Regexp.union @tag_shortcut.keys.sort_by {|k| -k.size }
-      @tag_re = /\A(?:#{keys}|\*(?=[^\s]+)|(#{WORD_RE}(?:#{WORD_RE}|:|-)*#{WORD_RE}|#{WORD_RE}+))/
+      keys = @attr_shortcut.keys.sort_by {|k| -k.size }.map {|v| Regexp.escape v}.join('|')
+      @attr_shortcut_re = /^([#{keys}]+)((?:#{WORD_RE}|-)*)/
+      keys = @tag_shortcut.keys.sort_by {|k| -k.size }.map {|v| Regexp.escape v}.join('|')
+      @tag_re = /^(?:#{keys}|\*(?=[^\s]+)|(#{WORD_RE}(?:#{WORD_RE}|:|-)*#{WORD_RE}|#{WORD_RE}+))/
       keys = Regexp.escape @code_attr_delims.keys.join
-      @code_attr_delims_re = /\A[#{keys}]/
+      @code_attr_delims_re = /^[#{keys}]/
       keys = Regexp.escape @attr_list_delims.keys.join
-      @attr_list_delims_re = /\A\s*([#{keys}])/
+      @attr_list_delims_re = /^\s*([#{keys}])/
       # Access available engine keys to allow nicer one-line syntax
-      @embedded_re = /\A(#{Regexp.union(Embedded.engines.keys.map(&:to_s))}):(\s*)/
+      keys = Embedded.engines.keys.map(&:to_s).map {|v| Regexp.escape v}.join('|')
+      @embedded_re = /^(#{keys}):(\s*)/
     end
 
     # Compile string to Temple expression
@@ -89,9 +90,13 @@ module Slim
 
     protected
 
-    WORD_RE = ''.respond_to?(:encoding) ? '\p{Word}' : '\w'
+    if RUBY_PLATFORM.eql? 'opal'
+      WORD_RE = '(?:[0-9A-Z_a-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮ\u0300-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ\u0483-ԣԱ-Ֆՙա-և\u0591-\u05bd\u05bf\u05c1-\u05c2\u05c4-\u05c5\u05c7א-תװ-ײ\u0610-\u061aء-\u065e٠-٩ٮ-ۓە-\u06dc\u06de-\u06e8\u06ea-ۼۿܐ-\u074aݍ-ޱ߀-ߵߺ\u0901-ह\u093c-\u094dॐ-\u0954क़-\u0963०-९ॱ-ॲॻ-ॿ\u0981-\u0983অ-ঌএ-ঐও-নপ-রলশ-হ\u09bc-\u09c4\u09c7-\u09c8\u09cb-ৎ\u09d7ড়-ঢ়য়-\u09e3০-ৱ\u0a01-\u0a03ਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ\u0a3c\u0a3e-\u0a42\u0a47-\u0a48\u0a4b-\u0a4d\u0a51ਖ਼-ੜਫ਼੦-\u0a75\u0a81-\u0a83અ-ઍએ-ઑઓ-નપ-રલ-ળવ-હ\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acdૐૠ-\u0ae3૦-૯\u0b01-\u0b03ଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ\u0b3c-\u0b44\u0b47-\u0b48\u0b4b-\u0b4d\u0b56-\u0b57ଡ଼-ଢ଼ୟ-\u0b63୦-୯ୱ\u0b82-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹ\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcdௐ\u0bd7௦-௯\u0c01-\u0c03అ-ఌఎ-ఐఒ-నప-ళవ-హఽ-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55-\u0c56ౘ-ౙౠ-\u0c63౦-౯\u0c82-\u0c83ಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5-\u0cd6ೞೠ-\u0ce3೦-೯\u0d02-\u0d03അ-ഌഎ-ഐഒ-നപ-ഹഽ-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57ൠ-\u0d63൦-൯ൺ-ൿ\u0d82-\u0d83අ-ඖක-නඳ-රලව-ෆ\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2-\u0df3ก-\u0e3aเ-\u0e4e๐-๙ກ-ຂຄງ-ຈຊຍດ-ທນ-ຟມ-ຣລວສ-ຫອ-\u0eb9\u0ebb-ຽເ-ໄໆ\u0ec8-\u0ecd໐-໙ໜ-ໝༀ\u0f18-\u0f19༠-༩\u0f35\u0f37\u0f39\u0f3e-ཇཉ-ཬ\u0f71-\u0f84\u0f86-ྋ\u0f90-\u0f97\u0f99-\u0fbc\u0fc6က-၉ၐ-႙Ⴀ-Ⴥა-ჺჼᄀ-ᅙᅟ-ᆢᆨ-ᇹሀ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ\u135fᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙶᚁ-ᚚᚠ-ᛪ\u16ee-\u16f0ᜀ-ᜌᜎ-\u1714ᜠ-\u1734ᝀ-\u1753ᝠ-ᝬᝮ-ᝰ\u1772-\u1773ក-ឳ\u17b6-\u17d3ៗៜ-\u17dd០-៩\u180b-\u180d᠐-᠙ᠠ-ᡷᢀ-ᢪᤀ-ᤜ\u1920-\u192b\u1930-\u193b᥆-ᥭᥰ-ᥴ-ᦩ\u19b0-\u19c9᧐-᧙ᨀ-\u1a1b\u1b00-ᭋ᭐-᭙\u1b6b-\u1b73\u1b80-\u1baaᮮ-᮹ᰀ-\u1c37᱀-᱉ᱍ-ᱽᴀ-\u1de6\u1dfe-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‿-⁀⁔ⁱⁿₐ-ₔ\u20d0-\u20f0ℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎ\u2160-\u2188Ⰰ-Ⱞⰰ-ⱞⱠ-Ɐⱱ-ⱽⲀ-ⳤⴀ-ⴥⴰ-ⵥⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ\u2de0-\u2dffⸯ々-\u3007\u3021-\u302f〱-〵\u3038-〼ぁ-ゖ\u3099-\u309aゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆷㇰ-ㇿ㐀-䶵一-鿃ꀀ-ꒌꔀ-ꘌꘐ-ꘫꙀ-ꙟꙢ-\ua672\ua67c-\ua67dꙿ-ꚗꜗ-ꜟꜢ-ꞈꞋ-ꞌꟻ-\ua827ꡀ-ꡳ\ua880-\ua8c4꣐-꣙꤀-\ua92dꤰ-\ua953ꨀ-\uaa36ꩀ-\uaa4d꩐-꩙가-힣豈-鶴侮-頻並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּ-סּףּ-פּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻ\ufe00-\ufe0f\ufe20-\ufe26︳-︴﹍-﹏ﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚ＿ａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]|[\ud840-\ud868][\udc00-\udfff]|\ud800[\udc00-\udc0b\udc0d-\udc26\udc28-\udc3a\udc3c-\udc3d\udc3f-\udc4d\udc50-\udc5d\udc80-\udcfa\udd40-\udd74\uddfd\ude80-\ude9c\udea0-\uded0\udf00-\udf1e\udf30-\udf4a\udf80-\udf9d\udfa0-\udfc3\udfc8-\udfcf\udfd1-\udfd5]|\ud801[\udc00-\udc9d\udca0-\udca9]|\ud802[\udc00-\udc05\udc08\udc0a-\udc35\udc37-\udc38\udc3c\udc3f\udd00-\udd15\udd20-\udd39\ude00-\ude03\ude05-\ude06\ude0c-\ude13\ude15-\ude17\ude19-\ude33\ude38-\ude3a\ude3f]|\ud808[\udc00-\udf6e]|\ud809[\udc00-\udc62]|\ud834[\udd65-\udd69\udd6d-\udd72\udd7b-\udd82\udd85-\udd8b\uddaa-\uddad\ude42-\ude44]|\ud835[\udc00-\udc54\udc56-\udc9c\udc9e-\udc9f\udca2\udca5-\udca6\udca9-\udcac\udcae-\udcb9\udcbb\udcbd-\udcc3\udcc5-\udd05\udd07-\udd0a\udd0d-\udd14\udd16-\udd1c\udd1e-\udd39\udd3b-\udd3e\udd40-\udd44\udd46\udd4a-\udd50\udd52-\udea5\udea8-\udec0\udec2-\udeda\udedc-\udefa\udefc-\udf14\udf16-\udf34\udf36-\udf4e\udf50-\udf6e\udf70-\udf88\udf8a-\udfa8\udfaa-\udfc2\udfc4-\udfcb\udfce-\udfff]|\ud869[\udc00-\uded6]|\ud87e[\udc00-\ude1d]|\udb40[\udd00-\uddef])'
+    else
+      WORD_RE = '\p{Word}'
+    end
     LC_WORD_RE = '[_a-z0-9]'
-    ATTR_NAME = "\\A\\s*(#{WORD_RE}(?:#{WORD_RE}|:|-)*)"
+    ATTR_NAME = "\^\\s*(#{WORD_RE}(?:#{WORD_RE}|:|-)*)"
     QUOTED_ATTR_RE = /#{ATTR_NAME}\s*=(=?)\s*("|')/
     CODE_ATTR_RE = /#{ATTR_NAME}\s*=(=?)\s*/
 
@@ -135,11 +140,11 @@ module Slim
     def get_indent(line)
       # Figure out the indentation. Kinda ugly/slow way to support tabs,
       # but remember that this is only done at parsing time.
-      line[/\A[ \t]*/].gsub(@tab_re, @tab).size
+      line[/^[ \t]*/].gsub(@tab_re, @tab).size
     end
 
     def parse_line
-      if @line =~ /\A\s*\Z/
+      if @line =~ /^\s*$/
         @stacks.last << [:newline]
         return
       end
@@ -150,7 +155,7 @@ module Slim
       @indents << indent if @indents.empty?
 
       # Remove the indentation
-      @line.lstrip!
+      @line = @line.lstrip
 
       # If there's more stacks than indents, it means that the previous
       # line is expecting this line to be indented.
@@ -189,48 +194,50 @@ module Slim
 
     def parse_line_indicators
       case @line
-      when /\A\/!( ?)/
+      when /^\/!( ?)/
         # HTML comment
         @stacks.last << [:html, :comment, [:slim, :text, :verbatim, parse_text_block($', @indents.last + $1.size + 2)]]
-      when /\A\/\[\s*(.*?)\s*\]\s*\Z/
+      when /^\/\[\s*(.*?)\s*\]\s*$/
         # HTML conditional comment
         block = [:multi]
         @stacks.last << [:html, :condcomment, $1, block]
         @stacks << block
-      when /\A\//
+      when /^\//
         # Slim comment
         parse_comment_block
-      when /\A([\|'])( ?)/
+      when /^([\|'])( ?)/
         # Found verbatim text block.
         trailing_ws = $1 == "'"
         @stacks.last << [:slim, :text, :verbatim, parse_text_block($', @indents.last + $2.size + 1)]
         @stacks.last << [:static, ' '] if trailing_ws
-      when /\A</
+      when /^</
         # Inline html
         block = [:multi]
         @stacks.last << [:multi, [:slim, :interpolate, @line], block]
         @stacks << block
-      when /\A-/
+      when /^-/
         # Found a code block.
         # We expect the line to be broken or the next line to be indented.
-        @line.slice!(0)
+	@line = @line.slice(1..-1)
         block = [:multi]
         @stacks.last << [:slim, :control, parse_broken_line, block]
         @stacks << block
-      when /\A=(=?)(['<>]*)/
+      when /^=(=?)(['<>]*)/
         # Found an output block.
         # We expect the line to be broken or the next line to be indented.
         @line = $'
-        trailing_ws = $2.include?('\'') || $2.include?('>')
+	a = $1 || ''
+	b = $2 || ''
+	trailing_ws = b.include?('\'') || b.include?('>')
         block = [:multi]
-        @stacks.last << [:static, ' '] if $2.include?('<')
-        @stacks.last << [:slim, :output, $1.empty?, parse_broken_line, block]
+	@stacks.last << [:static, ' '] if b.include?('<')
+	@stacks.last << [:slim, :output, a.empty?, parse_broken_line, block]
         @stacks.last << [:static, ' '] if trailing_ws
         @stacks << block
       when @embedded_re
         # Embedded template detected. It is treated as block.
         @stacks.last << [:slim, :embedded, $1, parse_text_block($', @orig_line.size - $'.size + $2.size)]
-      when /\Adoctype\s+/
+      when /^doctype\s+/
         # Found doctype declaration
         @stacks.last << [:html, :doctype, $'.strip]
       when @tag_re
@@ -248,7 +255,7 @@ module Slim
     end
 
     def parse_comment_block
-      while !@lines.empty? && (@lines.first =~ /\A\s*\Z/ || get_indent(@lines.first) > @indents.last)
+      while !@lines.empty? && (@lines.first =~ /^\s*$/ || get_indent(@lines.first) > @indents.last)
         next_line
         @stacks.last << [:newline]
       end
@@ -264,7 +271,7 @@ module Slim
 
       empty_lines = 0
       until @lines.empty?
-        if @lines.first =~ /\A\s*\Z/
+	if @lines.first =~ /^\s*$/
           next_line
           result << [:newline]
           empty_lines += 1 if text_indent
@@ -278,7 +285,7 @@ module Slim
           end
 
           next_line
-          @line.lstrip!
+	  @line = @line.lstrip
 
           # The text block lines must be at least indented
           # as deep as the first line.
@@ -299,16 +306,16 @@ module Slim
 
     def parse_broken_line
       broken_line = @line.strip
-      while broken_line =~ /[,\\]\Z/
+      while broken_line =~ /[,\\]$/
         expect_next_line
-        broken_line << "\n" << @line
+	broken_line += "\n" + @line
       end
       broken_line
     end
 
     def parse_tag(tag)
       if @tag_shortcut[tag]
-        @line.slice!(0, tag.size) unless @attr_shortcut[tag]
+	@line = @line.slice(tag.size..-1) unless @attr_shortcut[tag]
         tag = @tag_shortcut[tag]
       end
 
@@ -322,7 +329,7 @@ module Slim
         @line = $'
       end
 
-      @line =~ /\A[<>']*/
+      @line =~ /^[<>']*/
       @line = $'
       trailing_ws = $&.include?('\'') || $&.include?('>')
       leading_ws = $&.include?('<')
@@ -336,7 +343,7 @@ module Slim
       @stacks.last << [:static, ' '] if trailing_ws
 
       case @line
-      when /\A\s*:\s*/
+      when /^\s*:\s*/
         # Block expansion
         @line = $'
         if @line =~ @embedded_re
@@ -351,7 +358,7 @@ module Slim
           parse_tag($&)
           @stacks.delete_at(i)
         end
-      when /\A\s*=(=?)(['<>]*)/
+      when /^\s*=(=?)(['<>]*)/
         # Handle output code
         @line = $'
         trailing_ws2 = $2.include?('\'') || $2.include?('>')
@@ -360,16 +367,16 @@ module Slim
         tag << [:slim, :output, $1 != '=', parse_broken_line, block]
         @stacks.last << [:static, ' '] if !trailing_ws && trailing_ws2
         @stacks << block
-      when /\A\s*\/\s*/
+      when /^\s*\/\s*/
         # Closed tag. Do nothing
         @line = $'
         syntax_error!('Unexpected text after closed tag') unless @line.empty?
-      when /\A\s*\Z/
+      when /^\s*$/
         # Empty content
         content = [:multi]
         tag << content
         @stacks << content
-      when /\A ?/
+      when /^ ?/
         # Text content
         tag << [:slim, :text, :inline, parse_text_block($', @orig_line.size - $'.size)]
       end
@@ -384,26 +391,30 @@ module Slim
       end
 
       if delimiter
-        boolean_attr_re = /#{ATTR_NAME}(?=(\s|#{Regexp.escape delimiter}|\Z))/
-        end_re = /\A\s*#{Regexp.escape delimiter}/
+	boolean_attr_re = /#{ATTR_NAME}(?=(\s|#{Regexp.escape delimiter}|$))/
+	end_re = /^\s*#{Regexp.escape delimiter}/
       end
 
       while true
         case @line
-        when /\A\s*\*(?=[^\s]+)/
+	when /^\s*\*(?=[^\s]+)/
           # Splat attribute
           @line = $'
           attributes << [:slim, :splat, parse_ruby_code(delimiter)]
         when QUOTED_ATTR_RE
           # Value is quoted (static)
           @line = $'
-          attributes << [:html, :attr, $1,
-                         [:escape, $2.empty?, [:slim, :interpolate, parse_quoted_attribute($3)]]]
+	  a = $1 || ''
+	  b = $2 || ''
+	  attributes << [:html, :attr, a,
+			 [:escape, b.empty?, [:slim, :interpolate, parse_quoted_attribute($3)]]]
         when CODE_ATTR_RE
           # Value is ruby code
           @line = $'
-          name = $1
-          escape = $2.empty?
+	  a = $1 || ''
+	  b = $2 || ''
+	  name = a
+	  escape = b.empty?
           value = parse_ruby_code(delimiter)
           syntax_error!('Invalid empty attribute') if value.empty?
           attributes << [:html, :attr, name, [:slim, :attrvalue, escape, value]]
@@ -421,7 +432,7 @@ module Slim
             break
           else
             # Found something where an attribute should be
-            @line.lstrip!
+	    @line = @line.lstrip
             syntax_error!('Expected attribute') unless @line.empty?
 
             # Attributes span multiple lines
@@ -437,11 +448,11 @@ module Slim
       code, count, delimiter, close_delimiter = '', 0, nil, nil
 
       # Attribute ends with space or attribute delimiter
-      end_re = /\A[\s#{Regexp.escape outer_delimiter.to_s}]/
+      end_re = /^[\s#{Regexp.escape outer_delimiter.to_s}]/
 
       until @line.empty? || (count == 0 && @line =~ end_re)
-        if @line =~ /\A[,\\]\Z/
-          code << @line << "\n"
+	if @line =~ /^[,\\]$/
+	  code += @line + "\n"
           expect_next_line
         else
           if count > 0
@@ -454,7 +465,9 @@ module Slim
             count = 1
             delimiter, close_delimiter = $&, @code_attr_delims[$&]
           end
-          code << @line.slice!(0)
+	  firstChar = @line.slice(0)
+	  @line = @line.slice(1..-1)
+	  code += firstChar
         end
       end
       syntax_error!("Expected closing delimiter #{close_delimiter}") if count != 0
@@ -465,8 +478,8 @@ module Slim
       value, count = '', 0
 
       until count == 0 && @line[0] == quote[0]
-        if @line =~ /\A(\\)?\Z/
-          value << ($1 ? ' ' : "\n")
+	if @line =~ /^(\\)?$/
+	  value += ($1 ? ' ' : "\n")
           expect_next_line
         else
           if @line[0] == ?{
@@ -474,12 +487,14 @@ module Slim
           elsif @line[0] == ?}
             count -= 1
           end
-          value << @line.slice!(0)
+	  firstChar = @line.slice(0)
+	  @line = @line.slice(1..-1)
+	  value += firstChar
         end
       end
 
       syntax_error!("Expected closing brace }") if count != 0
-      @line.slice!(0)
+      @line = @line.slice(1..-1)
 
       value
     end
@@ -497,7 +512,7 @@ module Slim
 
     def expect_next_line
       next_line || syntax_error!('Unexpected end of file')
-      @line.strip!
+      @line = @line.strip
     end
   end
 end
diff --git a/lib/slim/smart/escaper.rb b/lib/slim/smart/escaper.rb
index b060645..f20fad5 100644
--- a/lib/slim/smart/escaper.rb
+++ b/lib/slim/smart/escaper.rb
@@ -24,11 +24,11 @@ module Slim
         block = [:multi]
         until string.empty?
           case string
-          when /\A&(\w+|#x[0-9a-f]+|#\d+);/i
+	  when /^&(\w+|#x[0-9a-f]+|#\d+);/i
             # Entity.
             block << [:escape, false, [:static, $&]]
             string = $'
-          when /\A&?[^&]*/
+	  when /^&?[^&]*/
             # Other text.
             block << [:static, $&]
             string = $'
diff --git a/lib/slim/smart/filter.rb b/lib/slim/smart/filter.rb
index 022156b..d0b2eb3 100644
--- a/lib/slim/smart/filter.rb
+++ b/lib/slim/smart/filter.rb
@@ -12,8 +12,8 @@ module Slim
       def initialize(opts = {})
         super
         @active = @prepend = @append = false
-        @prepend_re = /\A#{chars_re(options[:smart_text_begin_chars])}/
-        @append_re = /#{chars_re(options[:smart_text_end_chars])}\Z/
+	@prepend_re = /^#{chars_re(options[:smart_text_begin_chars])}/
+	@append_re = /#{chars_re(options[:smart_text_end_chars])}$/
       end
 
       def call(exp)
@@ -89,7 +89,7 @@ module Slim
       private
 
       def chars_re(string)
-        Regexp.union(string.split(//))
+	string.split(//).map {|v| Regexp.escape v}.join('|')
       end
     end
   end
diff --git a/lib/slim/smart/parser.rb b/lib/slim/smart/parser.rb
index 7701a04..f940cd8 100644
--- a/lib/slim/smart/parser.rb
+++ b/lib/slim/smart/parser.rb
@@ -6,14 +6,14 @@ module Slim
       def initialize(opts = {})
         super
         word_re = options[:implicit_text] ? LC_WORD_RE : WORD_RE
-        attr_keys = Regexp.union(@attr_shortcut.keys.sort_by {|k| -k.size } )
-        @attr_shortcut_re = /\A(#{attr_keys}+)((?:#{WORD_RE}|-)*)/
-        tag_keys = Regexp.union((@tag_shortcut.keys - @attr_shortcut.keys).sort_by {|k| -k.size } )
-        @tag_re = /\A(?:#{attr_keys}(?=-*#{WORD_RE})|#{tag_keys}|\*(?=[^\s]+)|(#{word_re}(?:#{word_re}|:|-)*#{word_re}|#{word_re}+))/
+	attr_keys = @attr_shortcut.keys.sort_by {|k| -k.size }.map {|v| Regexp.escape v}.join('|')
+	@attr_shortcut_re = /^(#{attr_keys}+)((?:#{WORD_RE}|-)*)/
+	tag_keys = (@tag_shortcut.keys - @attr_shortcut.keys).sort_by {|k| -k.size }.map {|v| Regexp.escape v}.join('|')
+	@tag_re = /^(?:#{attr_keys}(?=-*#{WORD_RE})|#{tag_keys}|\*(?=[^\s]+)|(#{word_re}(?:#{word_re}|:|-)*#{word_re}|#{word_re}+))/
       end
 
       def unknown_line_indicator
-        if @line =~ /\A>( ?)/
+	if @line =~ /^>( ?)/
           # Found explicit text block.
           @stacks.last << [:slim, :text, :explicit, parse_text_block($', @indents.last + $1.size + 1)]
         else
@@ -23,7 +23,7 @@ module Slim
           end
           # Found implicit smart text block.
           if line = @lines.first
-            indent = ( line =~ /\A\s*\Z/ ? @indents.last + 1 : get_indent(line) )
+	    indent = ( line =~ /^\s*$/ ? @indents.last + 1 : get_indent(line) )
           end
           @stacks.last << [:slim, :text, :implicit, parse_text_block(@line, indent)]
         end
diff --git a/lib/slim/splat/builder.rb b/lib/slim/splat/builder.rb
index 675dc45..386fb70 100644
--- a/lib/slim/splat/builder.rb
+++ b/lib/slim/splat/builder.rb
@@ -27,7 +27,7 @@ module Slim
       def attr(name, value)
         if @attrs[name]
           if delim = @options[:merge_attrs][name]
-            @attrs[name] << delim << value.to_s
+	    @attrs[name] += delim + value.to_s
           else
             raise("Multiple #{name} attributes specified")
           end
-- 
2.10.0

