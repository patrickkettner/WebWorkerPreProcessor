From 9ab951a84e7d77bb290445c6c21d02335312c5cc Mon Sep 17 00:00:00 2001
From: Patrick Kettner <patrickkettner@gmail.com>
Date: Sun, 6 Nov 2016 00:00:52 -0700
Subject: [PATCH] .

---
 lib/slim/interpolation.rb |  8 +++---
 lib/slim/parser.rb        | 62 +++++++++++++++++++++++------------------------
 2 files changed, 34 insertions(+), 36 deletions(-)

diff --git a/lib/slim/interpolation.rb b/lib/slim/interpolation.rb
index 4368239..cb6a7aa 100644
--- a/lib/slim/interpolation.rb
+++ b/lib/slim/interpolation.rb
@@ -14,18 +14,18 @@ module Slim
       block = [:multi]
       until string.empty?
         case string
-        when /\A\\#\{/
+        when /^\\#\{/
           # Escaped interpolation
           # HACK: Use :slim :output because this is used by InterpolateTiltEngine
           # to filter out protected strings (Issue #141).
           block << [:slim, :output, false, '\'#{\'', [:multi]]
           string = $'
-        when /\A#\{/
+        when /^#\{/
           # Interpolation
           string, code = parse_expression($')
-          escape = code !~ /\A\{.*\}\Z/
+          escape = code !~ /^\{.*\}$/
           block << [:slim, :output, escape, escape ? code : code[1..-2], [:multi]]
-        when /\A([^#]+|#)/
+        when /^([^#]+|#)/
           # Static text
           block << [:static, $&]
           string = $'
diff --git a/lib/slim/parser.rb b/lib/slim/parser.rb
index b734f4d..3070f94 100644
--- a/lib/slim/parser.rb
+++ b/lib/slim/parser.rb
@@ -44,8 +44,6 @@ module Slim
         old = str.encoding
         str = str.dup if str.frozen?
         str.force_encoding(options[:encoding])
-        # Fall back to old encoding if new encoding is invalid
-        str.force_encoding(old_enc) unless str.valid_encoding?
       end
 
       result = [:multi]
@@ -70,14 +68,14 @@ module Slim
       '.' => 'class',
     }.freeze
 
-    DELIMITER_REGEX = /\A[\(\[\{]/
-    ATTR_NAME_REGEX = '\A\s*(\w[:\w-]*)'
-    QUOTED_VALUE_REGEX = /\A("[^"]*"|'[^']*')/
+    DELIMITER_REGEX = /^[\(\[\{]/
+    ATTR_NAME_REGEX = '^\s*(\w[:\w-]*)'
+    QUOTED_VALUE_REGEX = /^("[^"]*"|'[^']*')/
 
     if RUBY_VERSION > '1.9'
-      CLASS_ID_REGEX = /\A(#|\.)([\w\u00c0-\uFFFF][\w:\u00c0-\uFFFF-]*)/
+      CLASS_ID_REGEX = /^(#|\.)([\w\u00c0-\uFFFF][\w:\u00c0-\uFFFF-]*)/
     else
-      CLASS_ID_REGEX = /\A(#|\.)(\w[\w:-]*)/
+      CLASS_ID_REGEX = /^(#|\.)(\w[\w:-]*)/
     end
 
     def reset(lines = nil, stacks = nil)
@@ -120,11 +118,11 @@ module Slim
     def get_indent(line)
       # Figure out the indentation. Kinda ugly/slow way to support tabs,
       # but remember that this is only done at parsing time.
-      line[/\A[ \t]*/].gsub("\t", @tab).size
+      line[/^[ \t]*/].gsub("\t", @tab).size
     end
 
     def parse_line
-      if @line =~ /\A\s*\Z/
+      if @line =~ /^\s*$/
         @stacks.last << [:newline]
         return
       end
@@ -132,7 +130,7 @@ module Slim
       indent = get_indent(@line)
 
       # Remove the indentation
-      @line.lstrip!
+      @line = @line.lstrip
 
       # If there's more stacks than indents, it means that the previous
       # line is expecting this line to be indented.
@@ -171,16 +169,16 @@ module Slim
 
     def parse_line_indicators
       case @line
-      when /\A\//
+      when /^\//
         # Found a comment block.
-        if @line =~ %r{\A/!( ?)(.*)\Z}
+        if @line =~ %r{^/!( ?)(.*)$}
           # HTML comment
           block = [:multi]
           @stacks.last <<  [:html, :comment, block]
           @stacks << block
           @stacks.last << [:slim, :interpolate, $2] unless $2.empty?
           parse_text_block($2.empty? ? nil : @indents.last + $1.size + 2)
-        elsif @line =~ %r{\A/\[\s*(.*?)\s*\]\s*\Z}
+        elsif @line =~ %r{^/\[\s*(.*?)\s*\]\s*$}
           # HTML conditional comment
           block = [:multi]
           @stacks.last << [:slim, :condcomment, $1, block]
@@ -189,39 +187,39 @@ module Slim
           # Slim comment
           parse_comment_block
         end
-      when /\A([\|'])( ?)(.*)\Z/
+      when /^([\|'])( ?)(.*)$/
         # Found a text block.
         trailing_ws = $1 == "'"
         @stacks.last << [:slim, :interpolate, $3] unless $3.empty?
         parse_text_block($3.empty? ? nil : @indents.last + $2.size + 1)
         @stacks.last << [:static, ' '] if trailing_ws
-      when /\A-/
+      when /^-/
         # Found a code block.
         # We expect the line to be broken or the next line to be indented.
         block = [:multi]
-        @line.slice!(0)
+        @line = @line.slice(1..-1)
         @stacks.last << [:slim, :control, parse_broken_line, block]
         @stacks << block
-      when /\A=/
+      when /^=/
         # Found an output block.
         # We expect the line to be broken or the next line to be indented.
-        @line =~ /\A=(=?)('?)/
+        @line =~ /^=(=?)('?)/
         @line = $'
         block = [:multi]
         @stacks.last << [:slim, :output, $1.empty?, parse_broken_line, block]
         @stacks.last << [:static, ' '] unless $2.empty?
         @stacks << block
-      when /\A(\w+):\s*\Z/
+      when /^(\w+):\s*$/
         # Embedded template detected. It is treated as block.
         block = [:multi]
         @stacks.last << [:newline] << [:slim, :embedded, $1, block]
         @stacks << block
         parse_text_block
         return # Don't append newline
-      when /\Adoctype\s+/i
+      when /^doctype\s+/i
         # Found doctype declaration
         @stacks.last << [:html, :doctype, $'.strip]
-      when /\A([#\.]|\w[:\w-]*)/
+      when /^([#\.]|\w[:\w-]*)/
         # Found a HTML tag.
         parse_tag($&)
       else
@@ -231,7 +229,7 @@ module Slim
     end
 
     def parse_comment_block
-      while !@lines.empty? && (@lines.first =~ /\A\s*\Z/ || get_indent(@lines.first) > @indents.last)
+      while !@lines.empty? && (@lines.first =~ /^\s*$/ || get_indent(@lines.first) > @indents.last)
         next_line
         @stacks.last << [:newline]
       end
@@ -240,7 +238,7 @@ module Slim
     def parse_text_block(text_indent = nil)
       empty_lines = 0
       until @lines.empty?
-        if @lines.first =~ /\A\s*\Z/
+        if @lines.first =~ /^\s*$/
           next_line
           @stacks.last << [:newline]
           empty_lines += 1 if text_indent
@@ -258,7 +256,7 @@ module Slim
           # The text block lines must be at least indented
           # as deep as the first line.
           if text_indent && indent < text_indent
-            @line.lstrip!
+            @line = @line.lstrip
             syntax_error!('Unexpected text indentation')
           end
 
@@ -285,28 +283,28 @@ module Slim
       if tag == '#' || tag == '.'
         tag = 'div'
       else
-        @line.slice!(0, tag.size)
+        @line = @line.slice(tag.size..-1)
       end
 
       tag = [:html, :tag, tag, parse_attributes]
       @stacks.last << tag
 
       case @line
-      when /\A\s*=(=?)/
+      when /^\s*=(=?)/
         # Handle output code
         block = [:multi]
         @line = $'
         content = [:slim, :output, $1 != '=', parse_broken_line, block]
         tag << content
         @stacks << block
-      when /\A\s*\//
+      when /^\s*\//
         # Closed tag. Do nothing
-      when /\A\s*\Z/
+      when /^\s*$/
         # Empty content
         content = [:multi]
         tag << content
         @stacks << content
-      when /\A( ?)(.*)\Z/
+      when /^( ?)(.*)$/
         # Text content
         content = [:multi, [:slim, :interpolate, $2]]
         tag << content
@@ -359,13 +357,13 @@ module Slim
         break unless delimiter
 
         # Find ending delimiter
-        if @line =~ /\A\s*#{Regexp.escape delimiter}/
+	if @line =~ /^\s*#{Regexp.escape delimiter}/
           @line = $'
           break
         end
 
         # Found something where an attribute should be
-        @line.lstrip!
+        @line = @line.lstrip
         syntax_error!('Expected attribute') unless @line.empty?
 
         # Attributes span multiple lines
@@ -387,7 +385,7 @@ module Slim
       value = ''
 
       # Attribute ends with space or attribute delimiter
-      end_regex = /\A[\s#{Regexp.escape outer_delimiter.to_s}]/
+      end_regex = /^[\s#{Regexp.escape outer_delimiter.to_s}]/
 
       until @line.empty? || (count == 0 && @line =~ end_regex)
         if count > 0
-- 
2.10.0

