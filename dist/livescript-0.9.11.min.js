/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

var lexer, parser;
lexer = __webpack_require__(3);
parser = __webpack_require__(4).parser;
parser.yy = __webpack_require__(2);
parser.lexer = {
  lex: function(){
    var tag, __ref;
    __ref = this.tokens[++this.pos] || [''], tag = __ref[0], this.yytext = __ref[1], this.yylineno = __ref[2];
    return tag;
  },
  setInput: function(it){
    this.pos = -1;
    return this.tokens = it;
  },
  upcomingInput: function(){
    return '';
  }
};
exports.VERSION = '0.9.10';
exports.compile = function(code, options){
  var that;
  try {
    return parser.parse(lexer.lex(code)).compileRoot(options);
  } catch (e) {
    if (that = options != null ? options.filename : void 8) {
      e.message += "\nat " + that;
    }
    throw e;
  }
};
exports.ast = function(it){
  return parser.parse(typeof it === 'string' ? lexer.lex(it) : it);
};
exports.tokens = lexer.lex;
exports.lex = function(it){
  return lexer.lex(it, {
    raw: true
  });
};
exports.run = function(code, options){
  var __ref;
  return Function(exports.compile(code, (__ref = {}, __import(__ref, options), __ref.bare = true, __ref)))();
};
exports.tokens.rewrite = lexer.rewrite;
__importAll(exports.ast, parser.yy);
if (true) {
  __webpack_require__(8)(exports);
} else {
  exports.require = require;
  if ('' + this === '[object BackstagePass]') {
    this.EXPORTED_SYMBOLS = ['LiveScript'];
  }
}
function __import(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function __importAll(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}

/***/ },
/* 2 */
/***/ function(module, exports) {

var Node, Negatable, Block, Atom, Literal, Var, Key, Index, Chain, Call, List, Obj, Prop, Arr, Unary, Binary, Assign, Import, In, Existence, Fun, Class, Super, Parens, Splat, Jump, Throw, Return, While, For, Try, Switch, Case, If, Label, JS, Util, Vars, UTILS, LEVEL_TOP, LEVEL_PAREN, LEVEL_LIST, LEVEL_COND, LEVEL_OP, LEVEL_CALL, PREC, TAB, ID, SIMPLENUM, __ref, __slice = [].slice, __toString = {}.toString;
(Node = function(){
  throw Error('unimplemented');
}).prototype = {
  compile: function(options, level){
    var o, node, code, that, tmp, __i, __len;
    o = __import({}, options);
    if (level != null) {
      o.level = level;
    }
    node = this.unfoldSoak(o) || this;
    if (o.level && node.isStatement()) {
      return node.compileClosure(o);
    }
    code = (node.tab = o.indent, node).compileNode(o);
    if (that = node.temps) {
      for (__i = 0, __len = that.length; __i < __len; ++__i) {
        tmp = that[__i];
        o.scope.free(tmp);
      }
    }
    return code;
  },
  compileClosure: function(o){
    var that, fun, call, hasArgs, hasThis;
    if (that = this.getJump()) {
      that.carp('inconvertible statement');
    }
    fun = Fun([], Block(this));
    call = Call();
    this.traverseChildren(function(it){
      switch (it.value) {
      case 'this':
        hasThis = true;
        break;
      case 'arguments':
        hasArgs = it.value = '__args';
      }
    });
    if (hasThis) {
      call.args.push(Literal('this'));
      call.method = '.call';
    }
    if (hasArgs) {
      call.args.push(Literal('arguments'));
      fun.params.push(Var('__args'));
    }
    return Parens(Chain((fun.wrapper = true, fun['void'] = this['void'], fun), [call]), true).compile(o);
  },
  compileBlock: function(o, node){
    var that;
    if (that = node != null ? node.compile(o, LEVEL_TOP) : void 8) {
      return "{\n" + that + "\n" + this.tab + "}";
    } else {
      return '{}';
    }
  },
  cache: function(o, once, level){
    var ref, sub, __ref;
    if (!this.isComplex()) {
      return [__ref = level != null ? this.compile(o, level) : this, __ref];
    }
    sub = Assign(ref = Var(o.scope.temporary()), this);
    if (level != null) {
      sub = sub.compile(o, level);
      if (once) {
        o.scope.free(ref.value);
      }
      return [sub, ref.value];
    }
    if (once) {
      return [sub, (ref.temp = true, ref)];
    } else {
      return [sub, ref, [ref.value]];
    }
  },
  compileLoopReference: function(o, name, ret){
    var tmp, asn, __ref;
    if (this instanceof Var && o.scope.check(this.value) || this instanceof Unary && ((__ref = this.op) == '+' || __ref == '-') && (-1 / 0 < (__ref = +this.it.value) && __ref < 1 / 0) || this instanceof Literal && !this.isComplex()) {
      return [__ref = this.compile(o), __ref];
    }
    asn = Assign(Var(tmp = o.scope.temporary(name)), this);
    ret || (asn['void'] = true);
    return [tmp, asn.compile(o, ret ? LEVEL_CALL : LEVEL_PAREN)];
  },
  eachChild: function(fn){
    var name, child, i, node, that, __i, __ref, __len, __len1;
    for (__i = 0, __len = (__ref = this.children).length; __i < __len; ++__i) {
      name = __ref[__i];
      if (child = this[name]) {
        if ('length' in child) {
          for (i = 0, __len1 = child.length; i < __len1; ++i) {
            node = child[i];
            if (that = fn(node, name, i)) {
              return that;
            }
          }
        } else {
          if ((that = fn(child, name)) != null) {
            return that;
          }
        }
      }
    }
  },
  traverseChildren: function(fn, xscope){
    var __this = this;
    return this.eachChild(function(node, name, index){
      var __ref;
      return (__ref = fn(node, __this, name, index)) != null
        ? __ref
        : node.traverseChildren(fn, xscope);
    });
  },
  anaphorize: function(){
    var base, name, __ref;
    this.children = this.aTargets;
    if (this.eachChild(hasThat)) {
      if ((base = this)[name = this.aSource] instanceof Existence) {
        base = base[name];
        name = 'it';
      }
      if (base[name].value !== 'that') {
        base[name] = Assign(Var('that'), base[name]);
      }
    }
    function hasThat(it){
      var that;
      return it.value === 'that' || ((that = it.aSource)
        ? (that = it[that]) ? hasThat(that) : void 8
        : it.eachChild(hasThat));
    }
    delete this.children;
    return __ref = this[this.aSource], __ref.cond = true, __ref;
  },
  carp: function(msg, type){
    type == null && (type = SyntaxError);
    throw type(msg + " on line " + (this.line || this.traverseChildren(function(it){
      return it.line;
    })));
  },
  delegate: function(names, fn){
    var name, __i, __len;
    for (__i = 0, __len = names.length; __i < __len; ++__i) {
      name = names[__i];
      (__fn.call(this, name));
    }
    function __fn(name){
      this[name] = function(it){
        return fn.call(this, name, it);
      };
    }
  },
  children: [],
  terminator: ';',
  isComplex: YES,
  isStatement: NO,
  isAssignable: NO,
  isCallable: NO,
  isEmpty: NO,
  isArray: NO,
  isString: NO,
  isRegex: NO,
  isMatcher: function(){
    return this.isString() || this.isRegex();
  },
  assigns: NO,
  ripName: VOID,
  unfoldSoak: VOID,
  unfoldAssign: VOID,
  unparen: THIS,
  unwrap: THIS,
  maybeKey: THIS,
  expandSlice: THIS,
  varName: String,
  getAccessors: VOID,
  getCall: VOID,
  getDefault: VOID,
  getJump: VOID,
  invert: function(){
    return Unary('!', this, true);
  },
  invertCheck: function(it){
    if (it.inverted) {
      this.invert();
    }
    return this;
  },
  makeReturn: function(arref){
    if (arref) {
      return Call.make(JS(arref + '.push'), [this]);
    } else {
      return Return(this);
    }
  },
  makeObjReturn: function(arref){
    var base, items;
    if (arref) {
      base = this.lines[0];
      if (this.lines[0] instanceof If) {
        base = base.then.lines[0];
      }
      items = base.items;
      if (items[0] == null || items[1] == null) {
        this.carp('must specify both key and value for object comprehension');
      }
      return Assign(Chain(Var(arref)).add(Index(items[0], '.', true)), items[1]);
    } else {
      return Return(this);
    }
  },
  show: String,
  toString: function(idt){
    var tree, that;
    idt || (idt = '');
    tree = '\n' + idt + this.constructor.displayName;
    if (that = this.show()) {
      tree += ' ' + that;
    }
    this.eachChild(function(it){
      tree += it.toString(idt + TAB);
    });
    return tree;
  },
  stringify: function(space){
    return JSON.stringify(this, null, space);
  },
  toJSON: function(){
    return __import({
      type: this.constructor.displayName
    }, this);
  }
};
exports.parse = function(json){
  return exports.fromJSON(JSON.parse(json));
};
exports.fromJSON = (function(){
  function fromJSON(it){
    var that, node, key, val, v, __i, __len, __results = [];
    if (!(it && typeof it === 'object')) {
      return it;
    }
    if (that = it.type) {
      node = __clone(exports[that].prototype);
      for (key in it) {
        val = it[key];
        node[key] = fromJSON(val);
      }
      return node;
    }
    if (it.length != null) {
      for (__i = 0, __len = it.length; __i < __len; ++__i) {
        v = it[__i];
        __results.push(fromJSON(v));
      }
      return __results;
    } else {
      return it;
    }
  }
  return fromJSON;
}());
Negatable = {
  show: function(){
    return this.negated && '!';
  },
  invert: function(){
    this.negated = !this.negated;
    return this;
  }
};
exports.Block = Block = (function(superclass){
  Block.displayName = 'Block';
  var prototype = __extend(Block, superclass).prototype, constructor = Block;
  function Block(body){
    var __this = this instanceof __ctor ? this : new __ctor;
    body || (body = []);
    if ('length' in body) {
      __this.lines = body;
    } else {
      __this.lines = [];
      __this.add(body);
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['lines'];
  prototype.toJSON = function(){
    delete this.back;
    return superclass.prototype.toJSON.call(this);
  };
  prototype.add = function(it){
    var that, __ref;
    it = it.unparen();
    switch (false) {
    case !(that = this.back):
      that.add(it);
      break;
    case !(that = it.lines):
      (__ref = this.lines).push.apply(__ref, that);
      break;
    default:
      this.lines.push(it);
      if (that = it.back, delete it.back, that) {
        this.back = that;
      }
    }
    return this;
  };
  prototype.prepend = function(){
    var __ref;
    (__ref = this.lines).splice.apply(__ref, [this.neck(), 0].concat(__slice.call(arguments)));
    return this;
  };
  prototype.pipe = function(target, type){
    var args;
    args = type === '|>' ? this.lines.pop() : target;
    if (__toString.call(args).slice(8, -1) !== 'Array') {
      args = [args];
    }
    switch (type) {
    case '|>':
      this.lines.push(Call.make(target, args, {
        pipe: true
      }));
      break;
    case '<|':
      this.lines.push(Call.make(this.lines.pop(), args));
    }
    return this;
  };
  prototype.unwrap = function(){
    if (this.lines.length === 1) {
      return this.lines[0];
    } else {
      return this;
    }
  };
  prototype.chomp = function(){
    var lines, i, that;
    lines = this.lines;
    i = lines.length;
    while (that = lines[--i]) {
      if (!that.comment) {
        break;
      }
    }
    lines.length = i + 1;
    return this;
  };
  prototype.neck = function(){
    var pos, x, __ref, __len;
    for (pos = 0, __len = (__ref = this.lines).length; pos < __len; ++pos) {
      x = __ref[pos];
      if (!(x.comment || x instanceof Literal)) {
        break;
      }
    }
    return pos;
  };
  prototype.isComplex = function(){
    var __ref;
    return this.lines.length > 1 || ((__ref = this.lines[0]) != null ? __ref.isComplex() : void 8);
  };
  prototype.delegate(['isCallable', 'isArray', 'isString', 'isRegex'], function(it){
    var __ref;
    return (__ref = (__ref = this.lines)[__ref.length - 1]) != null ? __ref[it]() : void 8;
  });
  prototype.getJump = function(it){
    var node, that, __i, __ref, __len;
    for (__i = 0, __len = (__ref = this.lines).length; __i < __len; ++__i) {
      node = __ref[__i];
      if (that = node.getJump(it)) {
        return that;
      }
    }
  };
  prototype.makeReturn = function(it){
    var that, __ref, __key, __ref1;
    if (that = (__ref1 = __ref = this.lines)[__key = __ref1.length - 1] != null ? __ref[__key] = __ref[__key].makeReturn(it) : void 8) {
      if (that instanceof Return && !that.it) {
        --this.lines.length;
      }
    }
    return this;
  };
  prototype.compile = function(o, level){
    var tab, node, code, codes, __res, __i, __ref, __len;
    level == null && (level = o.level);
    if (level) {
      return this.compileExpressions(o, level);
    }
    o.block = this;
    tab = o.indent;
    __res = [];
    for (__i = 0, __len = (__ref = this.lines).length; __i < __len; ++__i) {
      node = __ref[__i];
      node = node.unfoldSoak(o) || node;
      if (!(code = (node.front = true, node).compile(o, level))) {
        continue;
      }
      node.isStatement() || (code += node.terminator);
      __res.push(tab + code);
    }
    codes = __res;
    return codes.join('\n');
  };
  prototype.compileRoot = function(options){
    var o, saveTo, bare, prefix, code, __ref;
    o = (__import({
      level: LEVEL_TOP,
      scope: this.scope = Scope.root = new Scope
    }, options));
    if (saveTo = o.saveScope, delete o.saveScope, saveTo) {
      o.scope = saveTo.savedScope || (saveTo.savedScope = o.scope);
    }
    delete o.filename;
    o.indent = (bare = o.bare, delete o.bare, bare) ? '' : TAB;
    if (/^\s*(?:[/#]|javascript:)/.test((__ref = this.lines[0]) != null ? __ref.code : void 8)) {
      prefix = this.lines.shift().code + '\n';
    }
    if ((__ref = o.eval, delete o.eval, __ref) && this.chomp().lines.length) {
      if (bare) {
        this.lines.push(Parens(this.lines.pop()));
      } else {
        this.makeReturn();
      }
    }
    code = this.compileWithDeclarations(o);
    bare || (code = "(function(){\n" + code + "\n}).call(this);\n");
    return [prefix] + code;
  };
  prototype.compileWithDeclarations = function(o){
    var pre, i, rest, post, that;
    o.level = LEVEL_TOP;
    pre = '';
    if (i = this.neck()) {
      rest = this.lines.splice(i, 9e9);
      pre = this.compile(o);
      this.lines = rest;
    }
    if (!(post = this.compile(o))) {
      return pre;
    }
    return (pre && pre + "\n") + ((that = this.scope) ? that.emit(post, o.indent) : post);
  };
  prototype.compileExpressions = function(o, level){
    var lines, i, that, code, last, node, __i, __len;
    lines = this.lines;
    i = -1;
    while (that = lines[++i]) {
      if (that.comment) {
        lines.splice(i--, 1);
      }
    }
    if (!lines.length) {
      lines.push(Literal('void'));
    }
    lines[0].front = this.front;
    lines[lines.length - 1]['void'] = this['void'];
    if (!lines[1]) {
      return lines[0].compile(o, level);
    }
    code = '';
    last = lines.pop();
    for (__i = 0, __len = lines.length; __i < __len; ++__i) {
      node = lines[__i];
      code += (node['void'] = true, node).compile(o, LEVEL_PAREN) + ', ';
    }
    code += last.compile(o, LEVEL_PAREN);
    if (level < LEVEL_LIST) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  return Block;
}(Node));
Atom = (function(superclass){
  Atom.displayName = 'Atom';
  var prototype = __extend(Atom, superclass).prototype, constructor = Atom;
  prototype.show = function(){
    return this.value;
  };
  prototype.isComplex = NO;
  function Atom(){}
  return Atom;
}(Node));
exports.Literal = Literal = (function(superclass){
  Literal.displayName = 'Literal';
  var prototype = __extend(Literal, superclass).prototype, constructor = Literal;
  function Literal(value){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.value = value;
    if (value.js) {
      return JS(value + "", true);
    }
    if (value === 'super') {
      return new Super;
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.isEmpty = function(){
    switch (this.value) {
    case 'void':
    case 'null':
      return true;
    }
  };
  prototype.isCallable = function(){
    switch (this.value) {
    case 'this':
    case 'eval':
      return true;
    }
  };
  prototype.isString = function(){
    return 0 <= '\'"'.indexOf((this.value + "").charAt());
  };
  prototype.isRegex = function(){
    return (this.value + "").charAt() === '/';
  };
  prototype.isComplex = function(){
    return this.isRegex() || this.value === 'debugger';
  };
  prototype.isWhat = function(){
    switch (false) {
    case !this.isEmpty():
      return 'empty';
    case !this.isCallable():
      return 'callable';
    case !this.isString():
      return 'string';
    case !this.isRegex():
      return 'regex';
    case !this.isComplex():
      return 'complex';
    }
  };
  prototype.varName = function(){
    if (/^\w+$/.test(this.value)) {
      return '$' + this.value;
    } else {
      return '';
    }
  };
  prototype.compile = function(o, level){
    var val, __ref;
    level == null && (level = o.level);
    switch (val = this.value + "") {
    case 'this':
      return ((__ref = o.scope.fun) != null ? __ref.bound : void 8) || val;
    case 'undefined':
      val = 'void';
      // fallthrough
    case 'void':
      if (!level) {
        return '';
      }
      val += ' 8';
      // fallthrough
    case 'null':
      if (level === LEVEL_CALL) {
        this.carp('invalid use of ' + this.value);
      }
      break;
    case 'on':
    case 'yes':
      val = 'true';
      break;
    case 'off':
    case 'no':
      val = 'false';
      break;
    case '*':
      this.carp('stray star');
      break;
    case 'debugger':
      if (level) {
        return "(function(){\n" + TAB + o.indent + "debugger;\n" + o.indent + "}())";
      }
    }
    return val;
  };
  return Literal;
}(Atom));
exports.Var = Var = (function(superclass){
  Var.displayName = 'Var';
  var prototype = __extend(Var, superclass).prototype, constructor = Var;
  function Var(value){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.value = value;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.isAssignable = prototype.isCallable = YES;
  prototype.assigns = function(it){
    return it === this.value;
  };
  prototype.maybeKey = function(){
    var __ref;
    return __ref = Key(this.value), __ref.line = this.line, __ref;
  };
  prototype.varName = prototype.show;
  prototype.compile = function(o){
    if (this.temp) {
      return o.scope.free(this.value);
    } else {
      return this.value;
    }
  };
  return Var;
}(Atom));
exports.Key = Key = (function(superclass){
  Key.displayName = 'Key';
  var prototype = __extend(Key, superclass).prototype, constructor = Key;
  function Key(name, reserved){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.reserved = reserved || name.reserved;
    __this.name = '' + name;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.isComplex = NO;
  prototype.assigns = function(it){
    return it === this.name;
  };
  prototype.varName = function(){
    var name;
    name = this.name;
    if (this.reserved || (name == 'arguments' || name == 'eval')) {
      return "$" + name;
    } else {
      return name;
    }
  };
  prototype.compile = prototype.show = function(){
    if (this.reserved) {
      return "'" + this.name + "'";
    } else {
      return this.name;
    }
  };
  return Key;
}(Node));
exports.Index = Index = (function(superclass){
  Index.displayName = 'Index';
  var prototype = __extend(Index, superclass).prototype, constructor = Index;
  function Index(key, symbol, init){
    var k, __this = this instanceof __ctor ? this : new __ctor;
    symbol || (symbol = '.');
    if (init && key instanceof Arr) {
      switch (key.items.length) {
      case 0:
        key = Key('__proto__');
        break;
      case 1:
        if (!((k = key.items[0]) instanceof Splat)) {
          key = Parens(k);
        }
      }
    }
    switch (symbol.slice(-1)) {
    case '=':
      __this.assign = symbol.slice(1);
      break;
    case '@':
      __this.vivify = symbol.length > 2 ? Arr : Obj;
    }
    __this.key = key;
    __this.symbol = symbol;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['key'];
  prototype.show = function(){
    return [this.soak ? '?' : void 8] + this.symbol;
  };
  prototype.isComplex = function(){
    return this.key.isComplex();
  };
  prototype.varName = function(){
    var __ref;
    return ((__ref = this.key) instanceof Key || __ref instanceof Literal) && this.key.varName();
  };
  prototype.compile = function(o){
    var code;
    code = this.key.compile(o, LEVEL_PAREN);
    if (this.key instanceof Key && '\'' !== code.charAt(0)) {
      return "." + code;
    } else {
      return "[" + code + "]";
    }
  };
  return Index;
}(Node));
exports.Chain = Chain = (function(superclass){
  Chain.displayName = 'Chain';
  var prototype = __extend(Chain, superclass).prototype, constructor = Chain;
  function Chain(head, tails){
    var __this = this instanceof __ctor ? this : new __ctor;
    if (!tails && head instanceof Chain) {
      return head;
    }
    __this.head = head;
    __this.tails = tails || [];
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['head', 'tails'];
  prototype.add = function(it){
    var that, __ref;
    if (this.head instanceof Existence) {
      __ref = Chain(this.head.it), this.head = __ref.head, this.tails = __ref.tails;
      it.soak = true;
    }
    this.tails.push(it);
    if (it instanceof Call && !it.method && this.head instanceof Super) {
      it.method = '.call';
      it.args.unshift(Literal('this'));
    } else if (that = it.vivify, delete it.vivify, that) {
      this.head = Assign(Chain(this.head, this.tails.splice(0, 9e9)), that(), '=', '||');
    }
    return this;
  };
  prototype.flipIt = function(){
    this.flip = true;
    return this;
  };
  prototype.unwrap = function(){
    if (this.tails.length) {
      return this;
    } else {
      return this.head;
    }
  };
  prototype.delegate(['getJump', 'assigns', 'isStatement', 'isString'], function(it, arg){
    return !this.tails.length && this.head[it](arg);
  });
  prototype.isComplex = function(){
    return this.tails.length || this.head.isComplex();
  };
  prototype.isCallable = function(){
    var that, __ref;
    if (that = (__ref = this.tails)[__ref.length - 1]) {
      return !((__ref = that.key) != null && __ref.items);
    } else {
      return this.head.isCallable();
    }
  };
  prototype.isArray = function(){
    var that, __ref;
    if (that = (__ref = this.tails)[__ref.length - 1]) {
      return that.key instanceof Arr;
    } else {
      return this.head.isArray();
    }
  };
  prototype.isRegex = function(){
    return this.head.value === 'RegExp' && !this.tails[1] && this.tails[0] instanceof Call;
  };
  prototype.isAssignable = function(){
    var tail, __ref, __i, __len;
    if (!(tail = (__ref = this.tails)[__ref.length - 1])) {
      return this.head.isAssignable();
    }
    if (!(tail instanceof Index) || tail.key instanceof List || tail.symbol === '.~') {
      return false;
    }
    for (__i = 0, __len = (__ref = this.tails).length; __i < __len; ++__i) {
      tail = __ref[__i];
      if (tail.assign) {
        return false;
      }
    }
    return true;
  };
  prototype.isSimpleAccess = function(){
    return this.tails.length === 1 && !this.head.isComplex() && !this.tails[0].isComplex();
  };
  prototype.makeReturn = function(it){
    if (this.tails.length) {
      return superclass.prototype.makeReturn.apply(this, arguments);
    } else {
      return this.head.makeReturn(it);
    }
  };
  prototype.getCall = function(){
    var tail, __ref;
    return (tail = (__ref = this.tails)[__ref.length - 1]) instanceof Call && tail;
  };
  prototype.varName = function(){
    var __ref;
    return (__ref = (__ref = this.tails)[__ref.length - 1]) != null ? __ref.varName() : void 8;
  };
  prototype.cacheReference = function(o){
    var name, base, ref, bref, nref, __ref;
    name = (__ref = this.tails)[__ref.length - 1];
    if (name instanceof Call) {
      return this.cache(o, true);
    }
    if (this.tails.length < 2 && !this.head.isComplex() && !(name != null && name.isComplex())) {
      return [this, this];
    }
    base = Chain(this.head, this.tails.slice(0, -1));
    if (base.isComplex()) {
      ref = o.scope.temporary();
      base = Chain(Assign(Var(ref), base));
      bref = (__ref = Var(ref), __ref.temp = true, __ref);
    }
    if (!name) {
      return [base, bref];
    }
    if (name.isComplex()) {
      ref = o.scope.temporary('key');
      name = Index(Assign(Var(ref), name.key));
      nref = Index((__ref = Var(ref), __ref.temp = true, __ref));
    }
    return [base.add(name), Chain(bref || base.head, [nref || name])];
  };
  prototype.compileNode = function(o){
    var head, tails, t, hasPartial, pre, rest, broken, partial, post, that, base, news, __i, __len, __ref;
    if (this.flip) {
      util('flip');
      util('curry');
    }
    head = this.head, tails = this.tails;
    head.front = this.front;
    head.newed = this.newed;
    for (__i = 0, __len = tails.length; __i < __len; ++__i) {
      t = tails[__i];
      if (t.partialized != null) {
        hasPartial = true;
        break;
      }
    }
    if (hasPartial) {
      util('slice');
      pre = [];
      rest = [];
      for (__i = 0, __len = tails.length; __i < __len; ++__i) {
        t = tails[__i];
        broken = broken || t.partialized != null;
        if (broken) {
          rest.push(t);
        } else {
          pre.push(t);
        }
      }
      if (rest != null) {
        __ref = [rest[0], rest.slice(1)], partial = __ref[0], post = __ref[1];
      }
      this.tails = pre;
      return Chain(Chain(Var(util('partialize'))).add(Call([this, Arr(partial.args), Arr(partial.partialized)])), post).compile(o);
    }
    if (!tails.length) {
      return head.compile(o);
    }
    if (that = this.unfoldAssign(o)) {
      return that.compile(o);
    }
    if (tails[0] instanceof Call && !head.isCallable()) {
      this.carp('invalid callee');
    }
    this.expandSlice(o);
    this.expandBind(o);
    this.expandSplat(o);
    this.expandStar(o);
    if (!this.tails.length) {
      return this.head.compile(o);
    }
    base = this.head.compile(o, LEVEL_CALL);
    news = rest = '';
    for (__i = 0, __len = (__ref = this.tails).length; __i < __len; ++__i) {
      t = __ref[__i];
      if (t['new']) {
        news += 'new ';
      }
      rest += t.compile(o);
    }
    if ('.' === rest.charAt(0) && SIMPLENUM.test(base)) {
      base += ' ';
    }
    return news + base + rest;
  };
  prototype.unfoldSoak = function(o){
    var that, i, node, bust, test, __ref, __len, __ref1;
    if (that = this.head.unfoldSoak(o)) {
      (__ref = that.then.tails).push.apply(__ref, this.tails);
      return that;
    }
    for (i = 0, __len = (__ref = this.tails).length; i < __len; ++i) {
      node = __ref[i];
      if (__ref1 = node.soak, delete node.soak, __ref1) {
        bust = Chain(this.head, this.tails.splice(0, i));
        if (node.assign && !bust.isAssignable()) {
          node.carp('invalid accessign');
        }
        test = node instanceof Call
          ? (__ref1 = bust.cacheReference(o), test = __ref1[0], this.head = __ref1[1], JS("typeof " + test.compile(o, LEVEL_OP) + " === 'function'"))
          : (i && node.assign
            ? (__ref1 = bust.cacheReference(o), test = __ref1[0], bust = __ref1[1], this.head = bust.head, (__ref1 = this.tails).unshift.apply(__ref1, bust.tails))
            : (__ref1 = bust.unwrap().cache(o, true), test = __ref1[0], this.head = __ref1[1]), Existence(test));
        return __ref1 = If(test, this), __ref1.soak = true, __ref1.cond = this.cond, __ref1['void'] = this['void'], __ref1;
      }
    }
  };
  prototype.unfoldAssign = function(o){
    var that, i, index, op, left, lefts, rites, node, __ref, __len, __len1, __ref1;
    if (that = this.head.unfoldAssign(o)) {
      (__ref = that.right.tails).push.apply(__ref, this.tails);
      return that;
    }
    for (i = 0, __len = (__ref = this.tails).length; i < __len; ++i) {
      index = __ref[i];
      if (op = index.assign) {
        index.assign = '';
        left = Chain(this.head, this.tails.splice(0, i)).expandSlice(o).unwrap();
        if (left instanceof Arr) {
          lefts = left.items;
          rites = (this.head = Arr()).items;
          for (i = 0, __len1 = lefts.length; i < __len1; ++i) {
            node = lefts[i];
            __ref1 = Chain(node).cacheReference(o), rites[i] = __ref1[0], lefts[i] = __ref1[1];
          }
        } else {
          __ref1 = Chain(left).cacheReference(o), left = __ref1[0], this.head = __ref1[1];
        }
        if (op === '=') {
          op = ':=';
        }
        return __ref1 = Assign(left, this, op), __ref1.access = true, __ref1;
      }
    }
  };
  prototype.expandSplat = function(o){
    var tails, i, call, args, ctx, __ref;
    tails = this.tails;
    i = -1;
    while (call = tails[++i]) {
      if (!(args = call.args)) {
        continue;
      }
      ctx = call.method === '.call' && (args = args.concat()).shift();
      if (!(args = Splat.compileArray(o, args, true))) {
        continue;
      }
      if (call['new']) {
        this.carp('splatting "new"');
      }
      if (!ctx && tails[i - 1] instanceof Index) {
        __ref = Chain(this.head, tails.splice(0, i - 1)).cache(o, true), this.head = __ref[0], ctx = __ref[1];
        i = 0;
      }
      call.method = '.apply';
      call.args = [ctx || Literal('null'), JS(args)];
    }
  };
  prototype.expandBind = function(o){
    var tails, i, that, obj, key, call;
    tails = this.tails;
    i = -1;
    while (that = tails[++i]) {
      if (that.symbol !== '.~') {
        continue;
      }
      that.symbol = '';
      obj = Chain(this.head, tails.splice(0, i)).unwrap();
      key = tails.shift().key;
      call = Call.make(Util('bind'), [obj, (key.reserved = true, key)]);
      this.head = this.newed ? Parens(call, true) : call;
      i = -1;
    }
  };
  prototype.expandStar = function(o){
    var tails, i, that, stars, sub, ref, temps, value, star, __ref, __i, __len;
    tails = this.tails;
    i = -1;
    while (that = tails[++i]) {
      if (that.args || that.stars || that.key instanceof Key) {
        continue;
      }
      stars = that.stars = [];
      that.eachChild(seek);
      if (!stars.length) {
        continue;
      }
      __ref = Chain(this.head, tails.splice(0, i)).unwrap().cache(o), sub = __ref[0], ref = __ref[1], temps = __ref[2];
      value = Chain(ref, [Index(Key('length'))]).compile(o);
      for (__i = 0, __len = stars.length; __i < __len; ++__i) {
        star = stars[__i];
        star.value = value;
        star.isAssignable = YES;
      }
      this.head = JS(sub.compile(o, LEVEL_CALL) + tails.shift().compile(o));
      if (temps) {
        o.scope.free(temps[0]);
      }
      i = -1;
    }
    function seek(it){
      if (it.value === '*') {
        stars.push(it);
      } else if (!(it instanceof Index)) {
        it.eachChild(seek);
      }
    }
  };
  prototype.expandSlice = function(o, assign){
    var tails, i, tail, x, __ref;
    tails = this.tails;
    i = -1;
    while (tail = tails[++i]) {
      if ((__ref = tail.key) != null && __ref.items) {
        if (tails[i + 1] instanceof Call) {
          tail.carp('calling a slice');
        }
        x = tails.splice(0, i + 1);
        x = x.pop().key.toSlice(o, Chain(this.head, x).unwrap(), assign);
        this.head = (x.front = this.front, x);
        i = -1;
      }
    }
    return this;
  };
  return Chain;
}(Node));
exports.Call = Call = (function(superclass){
  Call.displayName = 'Call';
  var prototype = __extend(Call, superclass).prototype, constructor = Call;
  function Call(args){
    var splat, i, a, __len, __ref, __this = this instanceof __ctor ? this : new __ctor;
    args || (args = []);
    if (args.length === 1 && (splat = args[0]) instanceof Splat) {
      if (splat.filler) {
        __this.method = '.call';
        args[0] = Literal('this');
        args[1] = Splat(Literal('arguments'));
      } else if (splat.it instanceof Arr) {
        args = splat.it.items;
      }
    } else {
      for (i = 0, __len = args.length; i < __len; ++i) {
        a = args[i];
        if (a.value === '_') {
          args[i] = Chain(Literal('void'));
          args[i].placeholder = true;
          ((__ref = __this.partialized) != null
            ? __ref
            : __this.partialized = []).push(Chain(Literal(i)));
        }
      }
    }
    __this.args = args;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['args'];
  prototype.show = function(){
    return [this['new']] + [this.method] + [this.soak ? '?' : void 8];
  };
  prototype.compile = function(o){
    var code, i, a, __ref, __len;
    code = (this.method || '') + '(' + (this.pipe ? "\n" + o.indent : '');
    for (i = 0, __len = (__ref = this.args).length; i < __len; ++i) {
      a = __ref[i];
      code += (i ? ', ' : '') + a.compile(o, LEVEL_LIST);
    }
    return code + ')';
  };
  Call.make = function(callee, args, opts){
    var call;
    call = Call(args);
    if (opts) {
      __import(call, opts);
    }
    return Chain(callee).add(call);
  };
  Call.block = function(fun, args, method){
    var __ref, __ref1;
    return __ref = Parens(Chain(fun, [(__ref1 = Call(args), __ref1.method = method, __ref1)]), true), __ref.calling = true, __ref;
  };
  Call.back = function(params, node, bound, curried){
    var fun, args, index, a, __ref, __len;
    fun = Fun(params, void 8, bound, curried);
    if (fun['void'] = node.op === '!') {
      node = node.it;
    }
    if (node instanceof Label) {
      fun.name = node.label;
      fun.labeled = true;
      node = node.it;
    }
    if (!fun['void'] && (fun['void'] = node.op === '!')) {
      node = node.it;
    }
    if ((__ref = node.getCall()) != null) {
      __ref.partialized = null;
    }
    args = (node.getCall() || (node = Chain(node).add(Call())).getCall()).args;
    for (index = 0, __len = args.length; index < __len; ++index) {
      a = args[index];
      if (a.placeholder) {
        break;
      }
    }
    return node.back = (args[index] = fun).body, node;
  };
  Call['let'] = function(args, body){
    var i, a, params, __res, __len;
    __res = [];
    for (i = 0, __len = args.length; i < __len; ++i) {
      a = args[i];
      if (a.op === '=' && !a.logic) {
        args[i] = a.right;
        __res.push(a.left);
      } else {
        __res.push(Var(a.varName() || a.carp('invalid "let" argument')));
      }
    }
    params = __res;
    args.unshift(Literal('this'));
    return this.block(Fun(params, body), args, '.call');
  };
  return Call;
}(Node));
List = (function(superclass){
  List.displayName = 'List';
  var prototype = __extend(List, superclass).prototype, constructor = List;
  prototype.children = ['items'];
  prototype.show = function(){
    return this.name;
  };
  prototype.named = function(name){
    this.name = name;
    return this;
  };
  prototype.isEmpty = function(){
    return !this.items.length;
  };
  prototype.assigns = function(it){
    var node, __i, __ref, __len;
    for (__i = 0, __len = (__ref = this.items).length; __i < __len; ++__i) {
      node = __ref[__i];
      if (node.assigns(it)) {
        return true;
      }
    }
  };
  List.compile = function(o, items){
    var indent, level, i, code, that;
    switch (items.length) {
    case 0:
      return '';
    case 1:
      return items[0].compile(o, LEVEL_LIST);
    }
    indent = o.indent, level = o.level;
    o.indent = indent + TAB;
    o.level = LEVEL_LIST;
    code = items[i = 0].compile(o);
    while (that = items[++i]) {
      code += ', ' + that.compile(o);
    }
    if (~code.indexOf('\n')) {
      code = "\n" + o.indent + code + "\n" + indent;
    }
    o.indent = indent;
    o.level = level;
    return code;
  };
  function List(){}
  return List;
}(Node));
exports.Obj = Obj = (function(superclass){
  Obj.displayName = 'Obj';
  var prototype = __extend(Obj, superclass).prototype, constructor = Obj;
  function Obj(items){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.items = items || [];
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.asObj = THIS;
  prototype.toSlice = function(o, base, assign){
    var items, ref, temps, i, node, name, chain, logic, key, val, __ref, __len;
    items = this.items;
    if (items.length > 1) {
      __ref = base.cache(o), base = __ref[0], ref = __ref[1], temps = __ref[2];
    } else {
      ref = base;
    }
    for (i = 0, __len = items.length; i < __len; ++i) {
      node = items[i];
      if (node.comment) {
        continue;
      }
      if (node instanceof Prop || node instanceof Splat) {
        node[name = (__ref = node.children)[__ref.length - 1]] = chain = Chain(base, [Index(node[name].maybeKey())]);
      } else {
        if (logic = node.getDefault()) {
          node = node.first;
        }
        if (node instanceof Parens) {
          __ref = node.cache(o, true), key = __ref[0], node = __ref[1];
          if (assign) {
            __ref = [node, key], key = __ref[0], node = __ref[1];
          }
          key = Parens(key);
        } else {
          key = node;
        }
        val = chain = Chain(base, [Index(node.maybeKey())]);
        if (logic) {
          val = (logic.first = val, logic);
        }
        items[i] = Prop(key, val);
      }
      base = ref;
    }
    chain || this.carp('empty slice');
    if (temps) {
      (chain.head = Var(temps[0])).temp = true;
    }
    return this;
  };
  prototype.compileNode = function(o){
    var items, code, idt, dic, i, node, logic, rest, multi, key, val, __len;
    items = this.items;
    if (!items.length) {
      return this.front ? '({})' : '{}';
    }
    code = '';
    idt = '\n' + (o.indent += TAB);
    dic = {};
    for (i = 0, __len = items.length; i < __len; ++i) {
      node = items[i];
      if (node.comment) {
        code += idt + node.compile(o);
        continue;
      }
      if (logic = node.getDefault()) {
        node = node.first;
      }
      if (node instanceof Splat || (node.key || node) instanceof Parens) {
        rest = items.slice(i);
        break;
      }
      if (logic) {
        if (node instanceof Prop) {
          node.val = (logic.first = node.val, logic);
        } else {
          node = Prop(node, (logic.first = node, logic));
        }
      }
      if (multi) {
        code += ',';
      } else {
        multi = true;
      }
      code += idt + (node instanceof Prop
        ? (key = node.key, val = node.val, node.accessor
          ? node.compileAccessor(o, key = key.compile(o))
          : (val.ripName(key), (key = key.compile(o)) + ": " + val.compile(o, LEVEL_LIST)))
        : (key = node.compile(o)) + ": " + key);
      ID.test(key) || (key = Function("return " + key)());
      if (!(dic[key + "."] = dic[key + "."] ^ 1)) {
        node.carp("duplicate property \"" + key + "\"");
      }
    }
    code = "{" + (code && code + '\n' + this.tab) + "}";
    rest && (code = Import(JS(code), Obj(rest)).compile((o.indent = this.tab, o)));
    if (this.front && '{' === code.charAt()) {
      return "(" + code + ")";
    } else {
      return code;
    }
  };
  return Obj;
}(List));
exports.Prop = Prop = (function(superclass){
  Prop.displayName = 'Prop';
  var prototype = __extend(Prop, superclass).prototype, constructor = Prop;
  function Prop(key, val){
    var that, fun, __i, __len, __this = this instanceof __ctor ? this : new __ctor;
    __this.key = key;
    __this.val = val;
    if (that = val.getAccessors()) {
      __this.val = that;
      for (__i = 0, __len = that.length; __i < __len; ++__i) {
        fun = that[__i];
        fun.x = (fun['void'] = fun.params.length) ? 's' : 'g';
      }
      __this['accessor'] = 'accessor';
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['key', 'val'];
  prototype.show = function(){
    return this.accessor;
  };
  prototype.assigns = function(it){
    var __ref;
    return typeof (__ref = this.val).assigns === 'function' ? __ref.assigns(it) : void 8;
  };
  prototype.compileAccessor = function(o, key){
    var funs, fun;
    funs = this.val;
    if (funs[1] && funs[0].params.length + funs[1].params.length !== 1) {
      funs[0].carp('invalid accessor parameter');
    }
    return (function(){
      var __i, __ref, __len, __results = [];
      for (__i = 0, __len = (__ref = funs).length; __i < __len; ++__i) {
        fun = __ref[__i];
        fun.accessor = true;
        __results.push(fun.x + "et " + key + fun.compile(o, LEVEL_LIST).slice(8));
      }
      return __results;
    }()).join(',\n' + o.indent);
  };
  prototype.compileDescriptor = function(o){
    var obj, fun, __i, __ref, __len;
    obj = Obj();
    for (__i = 0, __len = (__ref = this.val).length; __i < __len; ++__i) {
      fun = __ref[__i];
      obj.items.push(Prop(Key(fun.x + 'et'), fun));
    }
    obj.items.push(Prop(Key('configurable'), Literal(true)));
    obj.items.push(Prop(Key('enumerable'), Literal(true)));
    return obj.compile(o);
  };
  return Prop;
}(Node));
exports.Arr = Arr = (function(superclass){
  Arr.displayName = 'Arr';
  var prototype = __extend(Arr, superclass).prototype, constructor = Arr;
  function Arr(items){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.items = items || [];
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.isArray = YES;
  prototype.asObj = function(){
    var i, item;
    return Obj((function(){
      var __ref, __len, __results = [];
      for (i = 0, __len = (__ref = this.items).length; i < __len; ++i) {
        item = __ref[i];
        __results.push(Prop(Literal(i), item));
      }
      return __results;
    }.call(this)));
  };
  prototype.toSlice = function(o, base){
    var items, ref, i, item, splat, chain, __ref, __len;
    items = this.items;
    if (items.length > 1) {
      __ref = base.cache(o), base = __ref[0], ref = __ref[1];
    } else {
      ref = base;
    }
    for (i = 0, __len = items.length; i < __len; ++i) {
      item = items[i];
      if (splat = item instanceof Splat) {
        item = item.it;
      }
      if (item.isEmpty()) {
        continue;
      }
      chain = Chain(base, [Index(item)]);
      items[i] = splat ? Splat(chain) : chain;
      base = ref;
    }
    chain || this.carp('empty slice');
    return this;
  };
  prototype.compile = function(o){
    var items, code;
    items = this.items;
    if (!items.length) {
      return '[]';
    }
    if (code = Splat.compileArray(o, items)) {
      return this.newed ? "(" + code + ")" : code;
    }
    return "[" + List.compile(o, items) + "]";
  };
  Arr.maybe = function(nodes){
    if (nodes.length === 1 && !(nodes[0] instanceof Splat)) {
      return nodes[0];
    }
    return constructor(nodes);
  };
  Arr.wrap = function(it){
    return constructor([Splat((it.isArray = YES, it))]);
  };
  return Arr;
}(List));
exports.Unary = Unary = (function(superclass){
  Unary.displayName = 'Unary';
  var prototype = __extend(Unary, superclass).prototype, constructor = Unary;
  function Unary(op, it, flag){
    var that, node, __i, __ref, __len, __this = this instanceof __ctor ? this : new __ctor;
    if (it != null) {
      if (that = !flag && it.unaries) {
        that.push(op);
        return it;
      }
      switch (op) {
      case '!':
        if (flag) {
          break;
        }
        if (it instanceof Fun && !it['void']) {
          return it['void'] = true, it;
        }
        return it.invert();
      case '++':
      case '--':
        if (flag) {
          __this.post = true;
        }
        break;
      case 'new':
        if (it instanceof Existence && !it.negated) {
          it = Chain(it).add(Call());
        }
        it.newed = true;
        for (__i = 0, __len = (__ref = it.tails || '').length; __i < __len; ++__i) {
          node = __ref[__i];
          if (node instanceof Call && !node['new']) {
            if (node.method === '.call') {
              node.args.shift();
            }
            node['new'] = 'new';
            node.method = '';
            return it;
          }
        }
        break;
      case '~':
        if (it instanceof Fun && it.statement && !it.bound) {
          return it.bound = '__this', it;
        }
      }
    }
    __this.op = op;
    __this.it = it;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['it'];
  prototype.show = function(){
    return [this.post ? '@' : void 8] + this.op;
  };
  prototype.isCallable = function(){
    var __ref;
    return ((__ref = this.op) == 'do' || __ref == 'new' || __ref == 'delete') || this.it == null;
  };
  prototype.isArray = function(){
    return this.it instanceof Arr && this.it.items.length || this.it instanceof Chain && this.it.isArray();
  };
  prototype.isString = function(){
    var __ref;
    return (__ref = this.op) == 'typeof' || __ref == 'classof';
  };
  prototype.invert = function(){
    var __ref;
    if (this.op === '!' && ((__ref = this.it.op) == '!' || __ref == '<' || __ref == '>' || __ref == '<=' || __ref == '>=' || __ref == 'of' || __ref == 'instanceof')) {
      return this.it;
    }
    return constructor('!', this, true);
  };
  prototype.unfoldSoak = function(o){
    var __ref;
    return ((__ref = this.op) == '++' || __ref == '--' || __ref == 'delete') && this.it != null && If.unfoldSoak(o, this, 'it');
  };
  prototype.getAccessors = function(){
    var items;
    if (this.op !== '~') {
      return;
    }
    if (this.it instanceof Fun) {
      return [this.it];
    }
    if (this.it instanceof Arr) {
      items = this.it.items;
      if (!items[2] && items[0] instanceof Fun && items[1] instanceof Fun) {
        return items;
      }
    }
  };
  function crement(it){
    return {
      '++': 'in',
      '--': 'de'
    }[it] + 'crement';
  }
  prototype.compileNode = function(o){
    var that, op, it, x, code;
    if (this.it == null) {
      return this.compileAsFunc(o);
    }
    if (that = this.compileSpread(o)) {
      return that;
    }
    op = this.op, it = this.it;
    switch (op) {
    case '!':
      it.cond = true;
      break;
    case 'new':
      it.isCallable() || it.carp('invalid constructor');
      break;
    case 'do':
      x = Parens(it instanceof Existence && !it.negated
        ? Chain(it).add(Call())
        : Call.make(it));
      return (x.front = this.front, x.newed = this.newed, x).compile(o);
    case 'delete':
      if (it instanceof Var || !it.isAssignable()) {
        this.carp('invalid delete');
      }
      if (o.level && !this['void']) {
        return this.compilePluck(o);
      }
      break;
    case '++':
    case '--':
      it.isAssignable() || this.carp('invalid ' + crement(op));
      if (that = it instanceof Var && o.scope.checkReadOnly(it.value)) {
        this.carp(crement(op) + " of " + that + " \"" + it.value + "\"", ReferenceError);
      }
      if (this.post) {
        it.front = this.front;
      }
      break;
    case '^^':
      return util('clone') + "(" + it.compile(o, LEVEL_LIST) + ")";
    case 'classof':
      return util('toString') + ".call(" + it.compile(o, LEVEL_LIST) + ").slice(8, -1)";
    }
    code = it.compile(o, LEVEL_OP + PREC.unary);
    if (this.post) {
      code += op;
    } else {
      if ((op == 'new' || op == 'typeof' || op == 'delete') || (op == '+' || op == '-') && op === code.charAt()) {
        op += ' ';
      }
      code = op + code;
    }
    if (o.level < LEVEL_CALL) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.compileSpread = function(o){
    var it, ops, them, i, node, sp, op, lat, __len, __i, __ref;
    it = this.it;
    ops = [this];
    for (; it instanceof constructor; it = it.it) {
      ops.push(it);
    }
    if (!((it = it.expandSlice(o).unwrap()) instanceof Arr && (them = it.items).length)) {
      return '';
    }
    for (i = 0, __len = them.length; i < __len; ++i) {
      node = them[i];
      if (sp = node instanceof Splat) {
        node = node.it;
      }
      for (__i = ops.length - 1; __i >= 0; --__i) {
        op = ops[__i];
        node = constructor(op.op, node, op.post);
      }
      them[i] = sp ? lat = Splat(node) : node;
    }
    if (!lat && (this['void'] || !o.level)) {
      it = (__ref = Block(them), __ref.front = this.front, __ref['void'] = true, __ref);
    }
    return it.compile(o, LEVEL_PAREN);
  };
  prototype.compilePluck = function(o){
    var get, del, ref, code, __ref;
    __ref = Chain(this.it).cacheReference(o), get = __ref[0], del = __ref[1];
    code = this.assigned
      ? ''
      : (ref = o.scope.temporary()) + " = ";
    code += get.compile(o, LEVEL_LIST) + ", delete " + del.compile(o, LEVEL_LIST);
    if (this.assigned) {
      return code;
    }
    code += ", " + o.scope.free(ref);
    if (o.level < LEVEL_LIST) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.compileAsFunc = function(o){
    if (this.op === '!') {
      return util('not');
    } else {
      return "(" + Fun([], Block(Unary(this.op, Chain(Var('it'))))).compile(o) + ")";
    }
  };
  return Unary;
}(Node));
exports.Binary = Binary = (function(superclass){
  Binary.displayName = 'Binary';
  var EQUALITY, COMPARER, prototype = __extend(Binary, superclass).prototype, constructor = Binary;
  function Binary(op, first, second){
    var __ref, __this = this instanceof __ctor ? this : new __ctor;
    __this.partial = first == null || second == null;
    if (!__this.partial) {
      if ('=' === op.charAt(op.length - 1) && ((__ref = op.charAt(op.length - 2)) != '=' && __ref != '<' && __ref != '>' && __ref != '!')) {
        return Assign(first.unwrap(), second, op);
      }
      switch (op) {
      case 'in':
        return new In(first, second);
      case 'with':
        return new Import(Unary('^^', first), second, false);
      case '<<<':
      case '<<<<':
        return Import(first, second, op === '<<<<');
      case '<|':
        return Block(first).pipe(second, op);
      case '|>':
        return Block(second).pipe(first, '<|');
      case '+':
        if (first instanceof Arr) {
          first.items.push(Splat(second));
          return first;
        }
        if (second instanceof Arr || second instanceof While && (second = Arr([Splat(second)]))) {
          second.items.unshift(Splat(first));
          return second;
        }
      }
    }
    __this.op = op;
    __this.first = first;
    __this.second = second;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['first', 'second'];
  prototype.show = function(){
    return this.op;
  };
  prototype.isCallable = function(){
    var __ref;
    return this.partial || ((__ref = this.op) == '&&' || __ref == '||' || __ref == '?' || __ref == '!?' || __ref == '<<' || __ref == '>>') && this.first.isCallable() && this.second.isCallable();
  };
  prototype.isArray = function(){
    switch (this.op) {
    case '*':
      return this.first instanceof Arr;
    case '/':
      return this.second.isMatcher();
    }
  };
  prototype.isString = function(){
    switch (this.op) {
    case '+':
    case '*':
      return this.first.isString() || this.second.isString();
    case '-':
      return this.second.isMatcher();
    }
  };
  EQUALITY = /^[!=]==?$/;
  COMPARER = /^(?:[!=]=|[<>])=?$/;
  prototype.invert = function(){
    var op, __ref;
    if (EQUALITY.test(op = this.op) && !COMPARER.test((__ref = this.second) != null ? __ref.op : void 8)) {
      this.op = '!='.charAt(op.indexOf('=')) + op.slice(1);
      return this;
    }
    return Unary('!', Parens(this), true);
  };
  prototype.invertIt = function(){
    this.inverted = true;
    return this;
  };
  prototype.getDefault = function(){
    switch (this.op) {
    case '?':
    case '||':
    case '&&':
    case '!?':
      return this;
    }
  };
  prototype.compileNode = function(o){
    var top, rite, items, level, code;
    if (this.partial) {
      return this.compilePartial(o);
    }
    switch (this.op) {
    case '?':
    case '!?':
      return this.compileExistence(o);
    case '*':
      if (this.second.isString()) {
        return this.compileJoin(o);
      }
      if (this.first.isString() || this.first instanceof Arr) {
        return this.compileRepeat(o);
      }
      break;
    case '-':
      if (this.second.isMatcher()) {
        return this.compileRemove(o);
      }
      break;
    case '/':
      if (this.second.isMatcher()) {
        return this.compileSplit(o);
      }
      break;
    case '**':
    case '^':
      return this.compilePow(o);
    case '<?':
    case '>?':
      return this.compileMinMax(o);
    case '<<':
    case '>>':
      return this.compileCompose(o, this.op === '>>');
    case '+++':
      return this.compileConcat(o);
    case '%%':
      return this.compileMod(o);
    case '&&':
    case '||':
      if (top = this['void'] || !o.level) {
        this.second['void'] = true;
      }
      if (top || this.cond) {
        this.first.cond = true;
        this.second.cond = true;
      }
      break;
    case 'instanceof':
      rite = this.second.expandSlice(o).unwrap(), items = rite.items;
      if (rite instanceof Arr) {
        if (items[1]) {
          return this.compileAnyInstanceOf(o, items);
        }
        this.second = items[0] || rite;
      }
      this.second.isCallable() || this.second.carp('invalid instanceof operand');
      break;
    case '===':
      if ((this.first instanceof Literal && this.second instanceof Literal) && this.first.isWhat() !== this.second.isWhat()) {
        if (typeof console != 'undefined' && console !== null) {
          console.warn("WARNING: strict comparison of two different types will always be false: " + this.first.value + " == " + this.second.value);
        }
      }
      // fallthrough
    default:
      if (COMPARER.test(this.op) && COMPARER.test(this.second.op)) {
        return this.compileChain(o);
      }
    }
    this.first.front = this.front;
    code = this.first.compile(o, level = LEVEL_OP + PREC[this.op]) + " " + this.mapOp(this.op) + " " + this.second.compile(o, level);
    if (o.level <= level) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.mapOp = function(op){
    switch (op) {
    case 'of':
      return 'in';
    case '&&&':
    case '|||':
    case '^^^':
      return op[0];
    case '<<<<<':
      return '<<';
    case '>>>>':
    case '>>>>>':
      return op.slice(2);
    default:
      return op;
    }
  };
  prototype.compileChain = function(o){
    var level, code, sub, __ref;
    code = this.first.compile(o, level = LEVEL_OP + PREC[this.op]);
    __ref = this.second.first.cache(o, true), sub = __ref[0], this.second.first = __ref[1];
    code += " " + this.op + " " + sub.compile(o, level) + " && " + this.second.compile(o, LEVEL_OP);
    if (o.level <= LEVEL_OP) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.compileExistence = function(o){
    var x, __ref;
    if (this.op === '!?') {
      x = (__ref = If(Existence(this.first), this.second), __ref.cond = this.cond, __ref['void'] = this['void'] || !o.level, __ref);
      return x.compileExpression(o);
    }
    if (this['void'] || !o.level) {
      x = Binary('&&', Existence(this.first, true), this.second);
      return (x['void'] = true, x).compileNode(o);
    }
    x = this.first.cache(o, true);
    return If(Existence(x[0]), x[1]).addElse(this.second).compileExpression(o);
  };
  prototype.compileAnyInstanceOf = function(o, items){
    var sub, ref, test, item, __ref, __i, __len;
    __ref = this.first.cache(o), sub = __ref[0], ref = __ref[1], this.temps = __ref[2];
    test = Binary('instanceof', sub, items.shift());
    for (__i = 0, __len = items.length; __i < __len; ++__i) {
      item = items[__i];
      test = Binary('||', test, Binary('instanceof', ref, item));
    }
    return Parens(test).compile(o);
  };
  prototype.compileMinMax = function(o){
    var lefts, rites, x;
    lefts = this.first.cache(o, true);
    rites = this.second.cache(o, true);
    x = Binary(this.op.charAt(), lefts[0], rites[0]);
    return If(x, lefts[1]).addElse(rites[1]).compileExpression(o);
  };
  prototype.compileMethod = function(o, klass, method, arg){
    var args;
    args = [this.second].concat(arg || []);
    if (this.first["is" + klass]()) {
      return Chain(this.first, [Index(Key(method)), Call(args)]).compile(o);
    } else {
      args.unshift(this.first);
      return Call.make(JS(util(method) + '.call'), args).compile(o);
    }
  };
  prototype.compileJoin = function(it){
    return this.compileMethod(it, 'Array', 'join');
  };
  prototype.compileRemove = function(it){
    return this.compileMethod(it, 'String', 'replace', JS("''"));
  };
  prototype.compileSplit = function(it){
    return this.compileMethod(it, 'String', 'split');
  };
  prototype.compileRepeat = function(o){
    var x, n, items, that, refs, i, item, q, __len, __ref;
    x = this.first, n = this.second;
    items = x.items;
    if (((that = items && Splat.compileArray(o, items)) && (x = JS(that))) || !(n instanceof Literal && n.value < 0x20)) {
      x = Call.make(Util('repeat' + (items ? 'Array' : 'String')), [x, n]);
      return x.compile(o);
    }
    n = +n.value;
    if (1 <= n && n < 2) {
      return x.compile(o);
    }
    if (items) {
      if (n < 1) {
        return Block(items).add(JS('[]')).compile(o);
      }
      refs = [];
      for (i = 0, __len = items.length; i < __len; ++i) {
        item = items[i];
        __ref = item.cache(o, 1), items[i] = __ref[0], refs[refs.length] = __ref[1];
      }
      items.push((__ref = JS(), __ref.compile = function(){
        return (__repeatString(", " + List.compile(o, refs), n - 1)).slice(2);
      }, __ref));
      return x.compile(o);
    } else if (x instanceof Literal) {
      return (q = (x = x.compile(o)).charAt()) + __repeatString(x.slice(1, -1) + "", n) + q;
    } else {
      if (n < 1) {
        return Block(x.it).add(JS("''")).compile(o);
      }
      x = (refs = x.cache(o, 1, LEVEL_OP))[0] + __repeatString(" + " + refs[1], n - 1);
      if (o.level < LEVEL_OP + PREC['+']) {
        return x;
      } else {
        return "(" + x + ")";
      }
    }
  };
  prototype.compilePow = function(o){
    return Call.make(JS('Math.pow'), [this.first, this.second]).compile(o);
  };
  prototype.compileConcat = function(o){
    var f;
    f = function(x){
      switch (false) {
      case !(x instanceof Binary && x.op === '+++'):
        return f(x.first).concat(f(x.second));
      default:
        return [x];
      }
    };
    return Chain(this.first).add(Index(Key('concat'), '.', true)).add(Call(f(this.second))).compile(o);
  };
  prototype.compileCompose = function(o, forward){
    var first, second, __ref;
    __ref = (function(){
      switch (false) {
      case !forward:
        return [this.second, this.first];
      default:
        return [this.first, this.second];
      }
    }.call(this)), first = __ref[0], second = __ref[1];
    return util('compose') + "((" + first.compile(o) + "),(" + second.compile(o) + "))";
  };
  prototype.compileMod = function(o){
    var ref, code;
    ref = o.scope.temporary();
    code = "((" + this.first.compile(o) + ") % (" + ref + " = " + this.second.compile(o) + ") + " + ref + ") % " + ref;
    o.scope.free(ref);
    return code;
  };
  prototype.compilePartial = function(o){
    var vit, x, y;
    vit = Var('it');
    switch (false) {
    case !(this.first == null && this.second == null):
      x = Var('__x');
      y = Var('__y');
      return Fun([x, y], Block(Binary(this.op, x, y).invertCheck(this)), false, true).compile(o);
    case this.first == null:
      return "(" + Fun([vit], Block(Binary(this.op, this.first, vit).invertCheck(this))).compile(o) + ")";
    default:
      return "(" + Fun([vit], Block(Binary(this.op, vit, this.second).invertCheck(this))).compile(o) + ")";
    }
  };
  return Binary;
}(Node));
exports.Assign = Assign = (function(superclass){
  Assign.displayName = 'Assign';
  var prototype = __extend(Assign, superclass).prototype, constructor = Assign;
  function Assign(left, rite, op, logic, defParam){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.left = left;
    __this.op = op || '=';
    __this.logic = logic || __this.op.logic;
    __this.defParam = defParam;
    __this.op += '';
    __this[rite instanceof Node ? 'right' : 'unaries'] = rite;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['left', 'right'];
  prototype.show = function(){
    return (this.logic || '') + this.op;
  };
  prototype.assigns = function(it){
    return this.left.assigns(it);
  };
  prototype.delegate(['isCallable', 'isRegex'], function(it){
    var __ref;
    return ((__ref = this.op) == '=' || __ref == ':=') && this.right[it]();
  });
  prototype.isArray = function(){
    switch (this.op) {
    case '=':
    case ':=':
    case '+=':
      return this.right.isArray();
    case '/=':
      return this.right.isMatcher();
    }
  };
  prototype.isString = function(){
    switch (this.op) {
    case '=':
    case ':=':
    case '+=':
    case '*=':
      return this.right.isString();
    case '-=':
      return this.right.isMatcher();
    }
  };
  prototype.unfoldSoak = function(o){
    var that, rite, temps, __ref;
    if (this.left instanceof Existence) {
      if (that = (__ref = this.left = this.left.it).name, delete __ref.name, that) {
        rite = this.right;
        rite = Assign(this.right = Var(that), rite);
      } else {
        __ref = this.right.cache(o), rite = __ref[0], this.right = __ref[1], temps = __ref[2];
      }
      return __ref = If(Existence(rite), this), __ref.temps = temps, __ref.cond = this.cond, __ref['void'] = this['void'], __ref;
    }
    return If.unfoldSoak(o, this, 'left');
  };
  prototype.unfoldAssign = function(){
    return this.access && this;
  };
  prototype.compileNode = function(o){
    var left, op, right, reft, lvar, sign, name, empty, res, code, del, that, __ref, __i, __len;
    left = this.left.expandSlice(o, true).unwrap();
    if (!this.right) {
      left.isAssignable() || left.carp('invalid unary assign');
      __ref = Chain(left).cacheReference(o), left = __ref[0], this.right = __ref[1];
      for (__i = 0, __len = (__ref = this.unaries).length; __i < __len; ++__i) {
        op = __ref[__i];
        this.right = Unary(op, this.right);
      }
    }
    if (left.isEmpty()) {
      return (__ref = Parens(this.right), __ref.front = this.front, __ref.newed = this.newed, __ref).compile(o);
    }
    if (left.getDefault()) {
      this.right = Binary(left.op, this.right, left.second);
      left = left.first;
    }
    if (left.items) {
      return this.compileDestructuring(o, left);
    }
    left.isAssignable() || left.carp('invalid assign');
    if (this.logic) {
      return this.compileConditional(o, left);
    }
    op = this.op, right = this.right;
    if (op == '<?=' || op == '>?=') {
      return this.compileMinMax(o, left, right);
    }
    if ((op == '**=' || op == '^=' || op == '%%=') || op === '+=' && (right instanceof Arr || right instanceof While) || op === '*=' && right.isString() || (op == '-=' || op == '/=') && right.isMatcher()) {
      __ref = Chain(left).cacheReference(o), left = __ref[0], reft = __ref[1];
      right = Binary(op.slice(0, -1), reft, right);
      op = ':=';
    }
    (right = right.unparen()).ripName(left = left.unwrap());
    lvar = left instanceof Var;
    sign = op.replace(':', '');
    name = (left.front = true, left).compile(o, LEVEL_LIST);
    code = !o.level && right instanceof While && !right['else'] && (lvar || left.isSimpleAccess())
      ? (empty = right.objComp ? '{}' : '[]', (res = o.scope.temporary('res')) + " = " + empty + ";\n" + this.tab + right.makeReturn(res).compile(o) + "\n" + this.tab + name + " " + sign + " " + o.scope.free(res))
      : (name + " " + sign + " ") + (right.assigned = true, right).compile(o, LEVEL_LIST);
    if (lvar) {
      del = right.op === 'delete';
      if (op === '=') {
        o.scope.declare(name, left, this['const'] || !this.defParam && o['const']);
      } else if (that = o.scope.checkReadOnly(name)) {
        left.carp("assignment to " + that + " \"" + name + "\"", ReferenceError);
      }
    }
    if (that = o.level) {
      if (del) {
        code += ", " + name;
      }
      if (that > (del ? LEVEL_PAREN : LEVEL_LIST)) {
        code = "(" + code + ")";
      }
    }
    return code;
  };
  prototype.compileConditional = function(o, left){
    var lefts, morph, __ref;
    if (left instanceof Var && ((__ref = this.logic) == '?' || __ref == '!?') && this.op === '=') {
      o.scope.declare(left.value, left);
    }
    lefts = Chain(left).cacheReference(o);
    morph = Binary(this.logic, lefts[0], (this.logic = false, this.left = lefts[1], this));
    return (morph['void'] = this['void'], morph).compileNode(o);
  };
  prototype.compileMinMax = function(o, left, right){
    var lefts, rites, test, put, __ref;
    lefts = Chain(left).cacheReference(o);
    rites = right.cache(o, true);
    test = Binary(this.op.replace('?', ''), lefts[0], rites[0]);
    put = Assign(lefts[1], rites[1], ':=');
    if (this['void'] || !o.level) {
      return Parens(Binary('||', test, put)).compile(o);
    }
    __ref = test.second.cache(o, true), test.second = __ref[0], left = __ref[1];
    return If(test, left).addElse(put).compileExpression(o);
  };
  prototype.compileDestructuring = function(o, left){
    var items, len, ret, rite, that, cache, rref, list, code;
    items = left.items;
    len = items.length;
    ret = o.level && !this['void'];
    rite = this.right.compile(o, len === 1 ? LEVEL_CALL : LEVEL_LIST);
    if (that = left.name) {
      cache = that + " = " + rite;
      o.scope.declare(rite = that, left);
    } else if ((ret || len > 1) && (!ID.test(rite) || left.assigns(rite))) {
      cache = (rref = o.scope.temporary()) + " = " + rite;
      rite = rref;
    }
    list = this["rend" + left.constructor.displayName](o, items, rite);
    if (rref) {
      o.scope.free(rref);
    }
    if (cache) {
      list.unshift(cache);
    }
    if (ret || !list.length) {
      list.push(rite);
    }
    code = list.join(', ');
    if (list.length < 2 || o.level < LEVEL_LIST) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.rendArr = function(o, nodes, rite){
    var i, node, skip, len, val, ivar, start, inc, rcache, __len, __ref, __results = [];
    for (i = 0, __len = nodes.length; i < __len; ++i) {
      node = nodes[i];
      if (node.isEmpty()) {
        continue;
      }
      if (node instanceof Splat) {
        len && node.carp('multiple splat in an assignment');
        skip = (node = node.it).isEmpty();
        if (i + 1 === (len = nodes.length)) {
          if (skip) {
            break;
          }
          val = Arr.wrap(JS(util('slice') + '.call(' + rite + (i ? ", " + i + ")" : ')')));
        } else {
          val = ivar = rite + ".length - " + (len - i - 1);
          if (skip && i + 2 === len) {
            continue;
          }
          start = i + 1;
          this.temps = [ivar = o.scope.temporary('i')];
          val = skip
            ? (node = Var(ivar), Var(val))
            : Arr.wrap(JS(i + " < (" + ivar + " = " + val + ")\ ? " + util('slice') + ".call(" + rite + ", " + i + ", " + ivar + ")\ : (" + ivar + " = " + i + ", [])"));
        }
      } else {
        (inc = ivar) && start < i && (inc += " + " + (i - start));
        val = Chain(rcache || (rcache = Literal(rite)), [Index(JS(inc || i))]);
      }
      __results.push((__ref = __clone(this), __ref.left = node, __ref.right = val, __ref['void'] = true, __ref).compile(o, LEVEL_PAREN));
    }
    return __results;
  };
  prototype.rendObj = function(o, nodes, rite){
    var node, splat, logic, key, rcache, val, __i, __len, __ref, __results = [];
    for (__i = 0, __len = nodes.length; __i < __len; ++__i) {
      node = nodes[__i];
      if (splat = node instanceof Splat) {
        node = node.it;
      }
      if (logic = node.getDefault()) {
        node = node.first;
      }
      if (node instanceof Parens) {
        __ref = Chain(node.it).cacheReference(o), node = __ref[0], key = __ref[1];
      } else if (node instanceof Prop) {
        node = (key = node.key, node).val;
      } else {
        key = node;
      }
      if (node instanceof Key) {
        node = Var(node.name);
      }
      if (logic) {
        node = (logic.first = node, logic);
      }
      val = Chain(rcache || (rcache = Var(rite)), [Index(key.maybeKey())]);
      if (splat) {
        val = Import(Obj(), val);
      }
      __results.push((__ref = __clone(this), __ref.left = node, __ref.right = val, __ref['void'] = true, __ref).compile(o, LEVEL_PAREN));
    }
    return __results;
  };
  return Assign;
}(Node));
exports.Import = Import = (function(superclass){
  Import.displayName = 'Import';
  var prototype = __extend(Import, superclass).prototype, constructor = Import;
  function Import(left, right, all){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.left = left;
    __this.right = right;
    __this.all = all && 'All';
    if (!all && left instanceof Obj && right.items) {
      return Obj(left.items.concat(right.asObj().items));
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['left', 'right'];
  prototype.show = function(){
    return this.all;
  };
  prototype.delegate(['isCallable', 'isArray'], function(it){
    return this.left[it]();
  });
  prototype.unfoldSoak = function(o){
    var left, value, temps, __ref;
    left = this.left;
    if (left instanceof Existence && !left.negated) {
      if ((left = left.it) instanceof Var) {
        value = (this.left = left).value;
        if (!o.scope.check(value, true)) {
          left = JS("typeof " + value + " != 'undefined' && " + value);
        }
      } else {
        __ref = left.cache(o), left = __ref[0], this.left = __ref[1], temps = __ref[2];
      }
      return __ref = If(left, this), __ref.temps = temps, __ref.soak = true, __ref.cond = this.cond, __ref['void'] = this['void'], __ref;
    }
    return If.unfoldSoak(o, this, 'left') || (this['void'] || !o.level) && If.unfoldSoak(o, this, 'right');
  };
  prototype.compileNode = function(o){
    var right;
    right = this.right;
    if (!this.all) {
      if (right instanceof Chain) {
        right = right.unfoldSoak(o) || right.unfoldAssign(o) || right.expandSlice(o).unwrap();
      }
      if (right instanceof List) {
        return this.compileAssign(o, right.asObj().items);
      }
    }
    return Call.make(Util("import" + (this.all || '')), [this.left, right]).compileNode(o);
  };
  prototype.compileAssign = function(o, items){
    var top, reft, left, delim, space, code, i, node, com, logic, dyna, key, val, __ref, __len;
    if (!items.length) {
      return this.left.compile(o);
    }
    top = !o.level;
    if (items.length < 2 && (top || this['void'] || items[0] instanceof Splat)) {
      reft = this.left;
      if (reft.isComplex()) {
        reft = Parens(reft);
      }
    } else {
      __ref = this.left.cache(o), left = __ref[0], reft = __ref[1], this.temps = __ref[2];
    }
    __ref = top
      ? [';', '\n' + this.tab]
      : [',', ' '], delim = __ref[0], space = __ref[1];
    delim += space;
    code = this.temps ? left.compile(o, LEVEL_PAREN) + delim : '';
    for (i = 0, __len = items.length; i < __len; ++i) {
      node = items[i];
      i && (code += com ? space : delim);
      if (com = node.comment) {
        code += node.compile(o);
        continue;
      }
      if (node instanceof Splat) {
        code += Import(reft, node.it).compile(o);
        continue;
      }
      if (logic = node.getDefault()) {
        node = node.first;
      }
      if (dyna = node instanceof Parens) {
        __ref = node.it.cache(o, true), key = __ref[0], val = __ref[1];
      } else if (node instanceof Prop) {
        key = node.key, val = node.val;
        if (node.accessor) {
          if (key instanceof Key) {
            key = JS("'" + key.name + "'");
          }
          code += "Object.defineProperty(" + reft.compile(o, LEVEL_LIST) + ", " + key.compile(o, LEVEL_LIST) + ", " + node.compileDescriptor(o) + ")";
          continue;
        }
      } else {
        key = val = node;
      }
      dyna || (key = key.maybeKey());
      logic && (val = (logic.first = val, logic));
      code += Assign(Chain(reft, [Index(key)]), val).compile(o, LEVEL_PAREN);
    }
    if (top) {
      return code;
    }
    this['void'] || node instanceof Splat || (code += (com ? ' ' : ', ') + reft.compile(o, LEVEL_PAREN));
    if (o.level < LEVEL_LIST) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  return Import;
}(Node));
exports.In = In = (function(superclass){
  In.displayName = 'In';
  var prototype = __extend(In, superclass).prototype, constructor = In;
  __importAll(prototype, arguments[1]);
  function In(item, array){
    this.item = item;
    this.array = array;
  }
  prototype.children = ['item', 'array'];
  prototype.compileNode = function(o){
    var array, items, code, sub, ref, cmp, cnj, i, test, __ref, __len;
    items = (array = this.array.expandSlice(o).unwrap()).items;
    if (!(array instanceof Arr) || items.length < 2) {
      return (this.negated ? '!' : '') + "" + util('in') + "(" + this.item.compile(o, LEVEL_LIST) + ", " + array.compile(o, LEVEL_LIST) + ")";
    }
    code = '';
    __ref = this.item.cache(o, false, LEVEL_PAREN), sub = __ref[0], ref = __ref[1];
    __ref = this.negated
      ? [' != ', ' && ']
      : [' == ', ' || '], cmp = __ref[0], cnj = __ref[1];
    for (i = 0, __len = items.length; i < __len; ++i) {
      test = items[i];
      code && (code += cnj);
      if (test instanceof Splat) {
        code += (__ref = new In(Var(ref), test.it), __ref.negated = this.negated, __ref).compile(o, LEVEL_TOP);
        if (!(i || sub === ref)) {
          code = "(" + sub + ", " + code + ")";
        }
      } else {
        code += (i || sub === ref
          ? ref
          : "(" + sub + ")") + cmp + test.compile(o, LEVEL_OP + PREC['==']);
      }
    }
    sub === ref || o.scope.free(ref);
    if (o.level < LEVEL_OP + PREC['||']) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  return In;
}(Node, Negatable));
exports.Existence = Existence = (function(superclass){
  Existence.displayName = 'Existence';
  var prototype = __extend(Existence, superclass).prototype, constructor = Existence;
  __importAll(prototype, arguments[1]);
  function Existence(it, negated){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.it = it;
    __this.negated = negated;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['it'];
  prototype.compileNode = function(o){
    var node, code, op, eq, __ref;
    node = (__ref = this.it.unwrap(), __ref.front = this.front, __ref);
    code = node.compile(o, LEVEL_OP + PREC['==']);
    if (node instanceof Var && !o.scope.check(code, true)) {
      __ref = this.negated
        ? ['||', '=']
        : ['&&', '!'], op = __ref[0], eq = __ref[1];
      code = "typeof " + code + " " + eq + "= 'undefined' " + op + " " + code + " " + eq + "== null";
    } else {
      code += " " + (op = this.negated ? '==' : '!=') + " null";
    }
    if (o.level < LEVEL_OP + PREC[op]) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  return Existence;
}(Node, Negatable));
exports.Fun = Fun = (function(superclass){
  Fun.displayName = 'Fun';
  var prototype = __extend(Fun, superclass).prototype, constructor = Fun;
  function Fun(params, body, bound, curried){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.params = params || [];
    __this.body = body || Block();
    __this.bound = bound && '__this';
    __this.curried = curried || false;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['params', 'body'];
  prototype.show = function(){
    return this.bound;
  };
  prototype.named = function(it){
    return this.name = it, this.statement = true, this;
  };
  prototype.isCallable = YES;
  prototype.isStatement = function(){
    return !!this.statement;
  };
  prototype.traverseChildren = function(__arg, xscope){
    if (xscope) {
      return superclass.prototype.traverseChildren.apply(this, arguments);
    }
  };
  prototype.makeReturn = function(){
    if (this.statement) {
      return this.returns = true, this;
    } else {
      return superclass.prototype.makeReturn.apply(this, arguments);
    }
  };
  prototype.ripName = function(it){
    this.name || (this.name = it.varName());
    this.declared = it instanceof Var;
  };
  prototype.compileNode = function(o){
    var pscope, sscope, scope, that, inLoop, body, name, tab, code, curryCodeCheck, __ref, __this = this;
    pscope = o.scope;
    sscope = pscope.shared || pscope;
    scope = o.scope = this.body.scope = new Scope(this.wrapper ? pscope : sscope, this.wrapper && sscope);
    scope.fun = this;
    if (that = this.proto) {
      scope.assign('prototype', that.compile(o) + ".prototype");
    }
    if (that = this.cname) {
      scope.assign('constructor', that);
    }
    if (inLoop = o.loop, delete o.loop, inLoop) {
      o.indent = this.tab = '';
    }
    o.indent += TAB;
    body = this.body, name = this.name, tab = this.tab;
    code = 'function';
    if (this.bound === '__this') {
      if (this.ctor) {
        scope.assign('__this', 'this instanceof __ctor ? this : new __ctor');
        body.add(Return(Literal('__this')));
      } else if (that = (__ref = sscope.fun) != null ? __ref.bound : void 8) {
        this.bound = that;
      } else {
        sscope.assign('__this', 'this');
      }
    }
    if (this.statement) {
      name || this.carp('nameless function declaration');
      pscope === o.block.scope || this.carp('misplaced function declaration');
      this.accessor && this.carp('named accessor');
      pscope.add(name, 'function', this);
    }
    if (this.statement || name && this.labeled) {
      code += ' ' + scope.add(name, 'function', this);
    }
    this['void'] || this.ctor || this.newed || body.makeReturn();
    code += "(" + this.compileParams(scope) + "){";
    if (that = body.compileWithDeclarations(o)) {
      code += "\n" + that + "\n" + tab;
    }
    code += '}';
    curryCodeCheck = function(){
      if (__this.curried) {
        if (__this.hasSplats) {
          __this.carp('cannot curry a function with a variable number of arguments');
        }
        return util('curry') + "(" + code + ")";
      } else {
        return code;
      }
    };
    if (inLoop) {
      return pscope.assign(pscope.temporary('fn'), curryCodeCheck());
    }
    if (this.returns) {
      code += "\n" + tab + "return " + name + ";";
    } else if (this.bound && this.ctor) {
      code += ' function __ctor(){} __ctor.prototype = prototype;';
    }
    code = curryCodeCheck();
    if (this.front && !this.statement) {
      return "(" + code + ")";
    } else {
      return code;
    }
  };
  prototype.compileParams = function(scope){
    var params, body, names, assigns, i, p, splace, rest, that, dic, vr, df, v, name, __len, __i, __ref, __ref1;
    params = this.params, body = this.body;
    names = [];
    assigns = [];
    for (i = 0, __len = params.length; i < __len; ++i) {
      p = params[i];
      if (p instanceof Splat) {
        splace = i;
        this.hasSplats = true;
      } else if (p.op === '=' && !p.logic) {
        params[i] = Binary('?', p.left, p.right);
      }
    }
    if (splace != null) {
      rest = params.splice(splace, 9e9);
      if (!rest[1] && rest[0].it.isEmpty()) {
        rest = 0;
      }
    } else if (this.accessor) {
      if (that = params[1]) {
        that.carp('excess accessor parameter');
      }
    } else if (!(params.length || this.wrapper)) {
      if (body.traverseChildren(function(it){
        return it.value === 'it' || null;
      })) {
        params[0] = Var('it');
      }
    }
    if (params.length) {
      dic = {};
      for (__i = 0, __len = params.length; __i < __len; ++__i) {
        p = params[__i];
        vr = p;
        if (df = vr.getDefault()) {
          vr = vr.first;
        }
        if (vr.isEmpty()) {
          vr = Var(scope.temporary('arg'));
        } else if (!(vr instanceof Var)) {
          v = Var((__ref1 = (__ref = vr.it || vr).name, delete __ref.name, __ref1) || vr.varName() || scope.temporary('arg'));
          assigns.push(Assign(vr, df ? Binary(p.op, v, p.second) : v));
          vr = v;
        } else if (df) {
          assigns.push(Assign(vr, p.second, '=', p.op, true));
        }
        names.push(name = scope.add(vr.value, 'arg', p));
        if (!(dic[name + "."] = dic[name + "."] ^ 1)) {
          p.carp("duplicate parameter \"" + name + "\"");
        }
      }
    }
    if (rest) {
      while (splace--) {
        rest.unshift(Arr());
      }
      assigns.push(Assign(Arr(rest), Literal('arguments')));
    }
    if (assigns.length) {
      (__ref = this.body).prepend.apply(__ref, assigns);
    }
    return names.join(', ');
  };
  return Fun;
}(Node));
exports.Class = Class = (function(superclass){
  Class.displayName = 'Class';
  var prototype = __extend(Class, superclass).prototype, constructor = Class;
  function Class(title, sup, mixins, body){
    this.title = title;
    this.sup = sup;
    this.mixins = mixins;
    this.fun = Fun([], body);
  }
  prototype.children = ['title', 'sup', 'mixins', 'fun'];
  prototype.isCallable = YES;
  prototype.ripName = function(it){
    this.name = it.varName();
  };
  prototype.compile = function(o, level){
    var fun, body, lines, title, decl, name, proto, i, node, prop, f, ctor, vname, args, that, imports, clas, __len, __i, __ref, __len1, __ref1, __j, __len2, __res;
    fun = this.fun, body = fun.body, lines = body.lines, title = this.title;
    decl = title != null ? title.varName() : void 8;
    name = decl || this.name;
    if (ID.test(name || '')) {
      fun.cname = name;
    } else {
      name = 'constructor';
    }
    proto = Var('prototype');
    for (i = 0, __len = lines.length; i < __len; ++i) {
      node = lines[i];
      if (node instanceof Obj) {
        lines[i] = Import(proto, node);
        for (__i = 0, __len1 = (__ref = node.items).length; __i < __len1; ++__i) {
          prop = __ref[__i];
          if ((__ref1 = prop.key) instanceof Key || __ref1 instanceof Literal) {
            if (prop.val instanceof Fun) {
              prop.val.meth = prop.key;
            } else if (prop.accessor) {
              for (__j = 0, __len2 = (__ref1 = prop.val).length; __j < __len2; ++__j) {
                f = __ref1[__j];
                f.meth = prop.key;
              }
            }
          }
        }
      } else if (node instanceof Fun && !node.statement) {
        ctor && node.carp('redundant constructor');
        ctor = node;
      }
    }
    ctor || (ctor = lines[lines.length] = Fun());
    ctor.name = name;
    ctor.ctor = true;
    ctor.statement = true;
    lines.push(vname = fun.proto = Var(fun.bound = name));
    args = [];
    if (that = this.sup) {
      args.push(that);
      fun.proto = Util.Extends(vname, (__ref = fun.params)[__ref.length] = Var('superclass'));
    }
    if (that = this.mixins) {
      __res = [];
      for (__i = 0, __len = that.length; __i < __len; ++__i) {
        args[args.length] = that[__i];
        __res.push(Import(proto, JS("arguments[" + (args.length - 1) + "]"), true));
      }
      imports = __res;
      body.prepend.apply(body, imports);
    }
    fun.cname && body.prepend(Literal(name + ".displayName = '" + name + "'"));
    clas = Parens(Call.make(fun, args), true);
    if (decl && title.isComplex()) {
      clas = Assign(vname, clas);
    }
    if (title) {
      clas = Assign(title, clas);
    }
    return clas.compile(o, level);
  };
  return Class;
}(Node));
exports.Super = Super = (function(superclass){
  Super.displayName = 'Super';
  var prototype = __extend(Super, superclass).prototype, constructor = Super;
  prototype.isCallable = YES;
  prototype.compile = function(o){
    var scope, that;
    scope = o.scope;
    for (; that = !scope.get('superclass') && scope.fun; scope = scope.parent) {
      if (that = that.meth) {
        return 'superclass.prototype' + Index(that).compile(o);
      }
    }
    return 'superclass';
  };
  function Super(){}
  return Super;
}(Node));
exports.Parens = Parens = (function(superclass){
  Parens.displayName = 'Parens';
  var prototype = __extend(Parens, superclass).prototype, constructor = Parens;
  function Parens(it, keep, string){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.it = it;
    __this.keep = keep;
    __this.string = string;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['it'];
  prototype.show = function(){
    return this.string && '""';
  };
  prototype.delegate(['isComplex', 'isCallable', 'isArray', 'isRegex'], function(it){
    return this.it[it]();
  });
  prototype.isString = function(){
    return this.string || this.it.isString();
  };
  prototype.unparen = function(){
    if (this.keep) {
      return this;
    } else {
      return this.it.unparen();
    }
  };
  prototype.compile = function(o, level){
    var it;
    level == null && (level = o.level);
    it = this.it;
    it.cond || (it.cond = this.cond), it['void'] || (it['void'] = this['void']);
    if (this.calling && (!level || this['void'])) {
      it.head['void'] = true;
    }
    if (!(this.keep || this.newed || level >= LEVEL_OP + PREC[it.op])) {
      return (it.front = this.front, it).compile(o, level || LEVEL_PAREN);
    }
    if (it.isStatement()) {
      return it.compileClosure(o);
    } else {
      return "(" + it.compile(o, LEVEL_PAREN) + ")";
    }
  };
  return Parens;
}(Node));
exports.Splat = Splat = (function(superclass){
  Splat.displayName = 'Splat';
  var __ref, prototype = __extend(Splat, superclass).prototype, constructor = Splat;
  function Splat(it, filler){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.it = it;
    __this.filler = filler;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  __ref = Parens.prototype, prototype.children = __ref.children, prototype.isComplex = __ref.isComplex;
  prototype.isAssignable = YES;
  prototype.assigns = function(it){
    return this.it.assigns(it);
  };
  prototype.compile = function(){
    return this.carp('invalid splat');
  };
  Splat.compileArray = function(o, list, apply){
    var index, node, args, atoms, __len, __i, __ref;
    expand(list);
    for (index = 0, __len = list.length; index < __len; ++index) {
      node = list[index];
      if (node instanceof Splat) {
        break;
      }
    }
    if (index >= list.length) {
      return '';
    }
    if (!list[1]) {
      return (apply ? Object : ensureArray)(list[0].it).compile(o, LEVEL_LIST);
    }
    args = [];
    atoms = [];
    for (__i = 0, __len = (__ref = list.splice(index, 9e9)).length; __i < __len; ++__i) {
      node = __ref[__i];
      if (node instanceof Splat) {
        if (atoms.length) {
          args.push(Arr(atoms.splice(0, 9e9)));
        }
        args.push(ensureArray(node.it));
      } else {
        atoms.push(node);
      }
    }
    if (atoms.length) {
      args.push(Arr(atoms));
    }
    return (index
      ? Arr(list)
      : args.shift()).compile(o, LEVEL_CALL) + (".concat(" + List.compile(o, args) + ")");
  };
  function expand(nodes){
    var index, node, it;
    index = -1;
    while (node = nodes[++index]) {
      if (node instanceof Splat) {
        it = node.it;
        if (it.isEmpty()) {
          nodes.splice(index--, 1);
        } else if (it instanceof Arr) {
          nodes.splice.apply(nodes, [index, 1].concat(__slice.call(expand(it.items))));
          index += it.items.length - 1;
        }
      }
    }
    return nodes;
  }
  function ensureArray(node){
    if (node.isArray()) {
      return node;
    }
    return Call.make(JS(util('slice') + '.call'), [node]);
  }
  return Splat;
}(Node));
exports.Jump = Jump = (function(superclass){
  Jump.displayName = 'Jump';
  var prototype = __extend(Jump, superclass).prototype, constructor = Jump;
  function Jump(verb, label){
    this.verb = verb;
    this.label = label;
  }
  prototype.show = function(){
    var that;
    return (this.verb || '') + ((that = this.label) ? ' ' + that : '');
  };
  prototype.isStatement = YES;
  prototype.makeReturn = THIS;
  prototype.getJump = function(ctx){
    var that;
    ctx || (ctx = {});
    if (!ctx[this.verb]) {
      return this;
    }
    if (that = this.label) {
      return !__in(that, ctx.labels || []) && this;
    }
  };
  prototype.compileNode = function(o){
    var that;
    if (that = this.label) {
      __in(that, o.labels || []) || this.carp("undefined label \"" + that + "\"");
    } else {
      o[this.verb] || this.carp("stray " + this.verb);
    }
    return this.show() + ';';
  };
  Jump.extended = function(sub){
    sub.prototype.children = ['it'];
    this[sub.displayName.toLowerCase()] = sub;
  };
  return Jump;
}(Node));
exports.Throw = Throw = (function(superclass){
  Throw.displayName = 'Throw';
  var prototype = __extend(Throw, superclass).prototype, constructor = Throw;
  function Throw(it){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.it = it;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.getJump = VOID;
  prototype.compileNode = function(o){
    var __ref;
    return "throw " + (((__ref = this.it) != null ? __ref.compile(o, LEVEL_PAREN) : void 8) || 'null') + ";";
  };
  return Throw;
}(Jump));
exports.Return = Return = (function(superclass){
  Return.displayName = 'Return';
  var prototype = __extend(Return, superclass).prototype, constructor = Return;
  function Return(it){
    var __this = this instanceof __ctor ? this : new __ctor;
    if (it && it.value !== 'void') {
      __this.it = it;
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.getJump = THIS;
  prototype.compileNode = function(o){
    var that;
    return "return" + ((that = this.it) ? ' ' + that.compile(o, LEVEL_PAREN) : '') + ";";
  };
  return Return;
}(Jump));
exports.While = While = (function(superclass){
  While.displayName = 'While';
  var prototype = __extend(While, superclass).prototype, constructor = While;
  function While(test, un, mode){
    this.un = un;
    mode && (mode instanceof Node
      ? this.update = mode
      : this.post = true);
    if (this.post || test.value !== '' + !un) {
      this.test = test;
    }
  }
  prototype.children = ['test', 'body', 'update', 'else'];
  prototype.aSource = 'test';
  prototype.aTargets = ['body', 'update'];
  prototype.show = function(){
    return [this.un ? '!' : void 8, this.post ? 'do' : void 8].join('');
  };
  prototype.isStatement = prototype.isArray = YES;
  prototype.makeComprehension = function(toAdd, loops){
    while (loops.length) {
      toAdd = loops.pop().addBody(Block(toAdd));
    }
    return this.addBody(Block(toAdd));
  };
  prototype.getJump = function(ctx){
    var node, __i, __ref, __ref1, __len;
    ctx || (ctx = {});
    ctx['continue'] = true;
    ctx['break'] = true;
    for (__i = 0, __len = (__ref = ((__ref1 = this.body) != null ? __ref1.lines : void 8) || []).length; __i < __len; ++__i) {
      node = __ref[__i];
      if (node.getJump(ctx)) {
        return node;
      }
    }
  };
  prototype.addBody = function(body){
    var top;
    this.body = body;
    if (this.guard) {
      this.body = Block(If(this.guard, body));
    }
    top = this.body.lines[0];
    if ((top != null ? top.verb : void 8) === 'continue' && !top.label) {
      this.body.lines.length = 0;
    }
    return this;
  };
  prototype.addElse = function($else){
    this['else'] = $else;
    return this;
  };
  prototype.addGuard = function(guard){
    this.guard = guard;
    return this;
  };
  prototype.addObjComp = function(){
    this.objComp = true;
    return this;
  };
  prototype.makeReturn = function(it){
    var __ref;
    if (it) {
      if (this.objComp) {
        this.body = Block(this.body.makeObjReturn(it));
        if (this.guard) {
          this.body = If(this.guard, this.body);
        }
      } else {
        this.body.makeReturn(it);
        if ((__ref = this['else']) != null) {
          __ref.makeReturn(it);
        }
      }
    } else {
      this.getJump() || (this.returns = true);
    }
    return this;
  };
  prototype.compileNode = function(o){
    var test, head, that, __ref;
    o.loop = true;
    this.test && (this.un
      ? this.test = this.test.invert()
      : this.anaphorize());
    if (this.post) {
      return 'do {' + this.compileBody((o.indent += TAB, o));
    }
    test = ((__ref = this.test) != null ? __ref.compile(o, LEVEL_PAREN) : void 8) || '';
    if (!(this.update || this['else'])) {
      head = test ? "while (" + test : 'for (;;';
    } else {
      head = 'for (';
      if (this['else']) {
        head += (this.yet = o.scope.temporary('yet')) + " = true";
      }
      head += ";" + (test && ' ' + test) + ";";
      if (that = this.update) {
        head += ' ' + that.compile(o, LEVEL_PAREN);
      }
    }
    return head + ') {' + this.compileBody((o.indent += TAB, o));
  };
  prototype.compileBody = function(o){
    var lines, yet, tab, ret, code, empty, res, that, __key, __ref;
    o['break'] = o['continue'] = true;
    lines = this.body.lines, yet = this.yet, tab = this.tab;
    code = ret = '';
    if (this.returns) {
      if (this.objComp) {
        this.body = Block(this.body.makeObjReturn('__results'));
      }
      if (this.guard && this.objComp) {
        this.body = If(this.guard, this.body);
      }
      empty = this.objComp ? '{}' : '[]';
      if (lines[__key = lines.length - 1] != null) {
        lines[__key] = lines[__key].makeReturn(res = o.scope.assign('__results', empty));
      }
      ret = "\n" + this.tab + "return " + (res || empty) + ";";
      if ((__ref = this['else']) != null) {
        __ref.makeReturn();
      }
    }
    yet && lines.unshift(JS(yet + " = false;"));
    if (that = this.body.compile(o, LEVEL_TOP)) {
      code += "\n" + that + "\n" + tab;
    }
    code += '}';
    if (this.post) {
      code += " while (" + this.test.compile((o.tab = tab, o), LEVEL_PAREN) + ");";
    }
    if (yet) {
      code += " if (" + yet + ") " + this.compileBlock(o, this['else']);
      o.scope.free(yet);
    }
    return code + ret;
  };
  return While;
}(Node));
exports.For = For = (function(superclass){
  For.displayName = 'For';
  var prototype = __extend(For, superclass).prototype, constructor = For;
  function For(it){
    __importAll(this, it);
    if (this.item instanceof Var && !this.item.value) {
      this.item = null;
    }
  }
  prototype.children = ['item', 'source', 'from', 'to', 'step', 'body'];
  prototype.aSource = null;
  prototype.show = function(){
    return this.index;
  };
  prototype.compileNode = function(o){
    var temps, idx, pvar, step, tvar, tail, vars, eq, cond, svar, srcPart, lvar, head, that, body, __ref;
    o.loop = true;
    temps = this.temps = [];
    if (idx = this.index) {
      o.scope.declare(idx, this);
    } else {
      temps.push(idx = o.scope.temporary('i'));
    }
    if (!this.body) {
      this.addBody(Block(Var(idx)));
    }
    if (!this.object) {
      __ref = (this.step || Literal(1)).compileLoopReference(o, 'step'), pvar = __ref[0], step = __ref[1];
      pvar === step || temps.push(pvar);
    }
    if (this.from) {
      __ref = this.to.compileLoopReference(o, 'to'), tvar = __ref[0], tail = __ref[1];
      vars = idx + " = " + this.from.compile(o, LEVEL_LIST);
      if (tail !== tvar) {
        vars += ", " + tail;
        temps.push(tvar);
      }
      eq = this.op === 'til' ? '' : '=';
      cond = +pvar
        ? idx + " " + (pvar < 0 ? '>' : '<') + eq + " " + tvar
        : pvar + " < 0 ? " + idx + " >" + eq + " " + tvar + " : " + idx + " <" + eq + " " + tvar;
    } else {
      if (this.item || this.object && this.own) {
        __ref = this.source.compileLoopReference(o, 'ref', !this.object), svar = __ref[0], srcPart = __ref[1];
        svar === srcPart || temps.push(svar);
      } else {
        svar = srcPart = this.source.compile(o, LEVEL_PAREN);
      }
      if (!this.object) {
        if (0 > pvar && ~~pvar === +pvar) {
          vars = idx + " = " + srcPart + ".length - 1";
          cond = idx + " >= 0";
        } else {
          temps.push(lvar = o.scope.temporary('len'));
          vars = idx + " = 0, " + lvar + " = " + srcPart + ".length";
          cond = idx + " < " + lvar;
        }
      }
    }
    this['else'] && (this.yet = o.scope.temporary('yet'));
    head = 'for (';
    if (this.object) {
      head += idx + " in ";
    }
    if (that = this.yet) {
      head += that + " = true, ";
    }
    if (this.object) {
      head += srcPart;
    } else {
      step === pvar || (vars += ', ' + step);
      head += (vars + "; " + cond + "; ") + (1 == Math.abs(pvar)
        ? (pvar < 0 ? '--' : '++') + idx
        : idx + (pvar < 0
          ? ' -= ' + pvar.slice(1)
          : ' += ' + pvar));
    }
    this.own && (head += ") if (" + o.scope.assign('__own', '{}.hasOwnProperty') + ".call(" + svar + ", " + idx + ")");
    head += ') {';
    this.infuseIIFE();
    o.indent += TAB;
    if (this.item && !this.item.isEmpty()) {
      head += '\n' + o.indent + Assign(this.item, JS(svar + "[" + idx + "]")).compile(o, LEVEL_TOP) + ';';
    }
    body = this.compileBody(o);
    if (this.item && '}' === body.charAt(0)) {
      head += '\n' + this.tab;
    }
    return head + body;
  };
  prototype.infuseIIFE = function(){
    var __this = this;
    function dup(params, name){
      var p, __i, __len;
      if (name) {
        for (__i = 0, __len = params.length; __i < __len; ++__i) {
          p = params[__i];
          if (name === p.value) {
            return true;
          }
        }
      }
    }
    this.body.traverseChildren(function(it){
      var fun, params, call, index, item;
      if (!(it.calling || it.op === 'new' && (fun = it.it).params)) {
        return;
      }
      if (fun) {
        it.it = Call.make((fun['void'] = true, fun));
      } else {
        fun = it.it.head;
      }
      params = fun.params;
      call = it.it.tails[0];
      if (params.length ^ call.args.length - !!call.method) {
        return;
      }
      index = __this.index, item = __this.item;
      if (index && !dup(params, index)) {
        call.args.push(params[params.length] = Var(index));
      }
      if (item instanceof Var && !dup(params, item.value)) {
        call.args.push(params[params.length] = item);
      }
    });
  };
  return For;
}(While));
exports.Try = Try = (function(superclass){
  Try.displayName = 'Try';
  var prototype = __extend(Try, superclass).prototype, constructor = Try;
  function Try(attempt, thrown, recovery, ensure){
    this.attempt = attempt;
    this.thrown = thrown != null ? thrown : '__e';
    this.recovery = recovery;
    this.ensure = ensure;
  }
  prototype.children = ['attempt', 'recovery', 'ensure'];
  prototype.show = function(){
    return this.thrown;
  };
  prototype.isStatement = YES;
  prototype.isCallable = function(){
    var __ref;
    return ((__ref = this.recovery) != null ? __ref.isCallable() : void 8) && this.attempt.isCallable();
  };
  prototype.getJump = function(it){
    var __ref;
    return this.attempt.getJump(it) || ((__ref = this.recovery) != null ? __ref.getJump(it) : void 8);
  };
  prototype.makeReturn = function(it){
    this.attempt = this.attempt.makeReturn(it);
    if (this.recovery != null) {
      this.recovery = this.recovery.makeReturn(it);
    }
    return this;
  };
  prototype.compileNode = function(o){
    var code, v;
    o.indent += TAB;
    code = "try " + this.compileBlock(o, this.attempt);
    if (this.recovery || !this.ensure) {
      o.scope.check(v = this.thrown || 'e') || o.scope.add(v, 'catch');
      code += " catch (" + v + ") " + this.compileBlock(o, this.recovery);
    }
    if (this.ensure) {
      code += " finally " + this.compileBlock(o, this.ensure);
    }
    return code;
  };
  return Try;
}(Node));
exports.Switch = Switch = (function(superclass){
  Switch.displayName = 'Switch';
  var prototype = __extend(Switch, superclass).prototype, constructor = Switch;
  function Switch(topic, cases, $default){
    this.topic = topic;
    this.cases = cases;
    this['default'] = $default;
  }
  prototype.children = ['topic', 'cases', 'default'];
  prototype.aSource = 'topic';
  prototype.aTargets = ['cases'];
  prototype.isStatement = YES;
  prototype.isCallable = function(){
    var c, __i, __ref, __len;
    for (__i = 0, __len = (__ref = this.cases).length; __i < __len; ++__i) {
      c = __ref[__i];
      if (!c.isCallable()) {
        return false;
      }
    }
    return (__ref = this['default']) != null ? __ref.isCallable() : void 8;
  };
  prototype.getJump = function(ctx){
    var c, that, __i, __ref, __len;
    ctx || (ctx = {});
    ctx['break'] = true;
    for (__i = 0, __len = (__ref = this.cases).length; __i < __len; ++__i) {
      c = __ref[__i];
      if (that = c.body.getJump(ctx)) {
        return that;
      }
    }
    return (__ref = this['default']) != null ? __ref.getJump(ctx) : void 8;
  };
  prototype.makeReturn = function(it){
    var c, __i, __ref, __len;
    for (__i = 0, __len = (__ref = this.cases).length; __i < __len; ++__i) {
      c = __ref[__i];
      c.makeReturn(it);
    }
    if ((__ref = this['default']) != null) {
      __ref.makeReturn(it);
    }
    return this;
  };
  prototype.compileNode = function(o){
    var tab, topic, code, stop, i, c, that, __ref, __len;
    tab = this.tab;
    topic = !!this.topic && this.anaphorize().compile(o, LEVEL_PAREN);
    code = "switch (" + topic + ") {\n";
    stop = this['default'] || this.cases.length - 1;
    o['break'] = true;
    for (i = 0, __len = (__ref = this.cases).length; i < __len; ++i) {
      c = __ref[i];
      code += c.compileCase(o, tab, i === stop, !topic);
    }
    if (this['default']) {
      o.indent = tab + TAB;
      if (that = this['default'].compile(o, LEVEL_TOP)) {
        code += tab + ("default:\n" + that + "\n");
      }
    }
    return code + tab + '}';
  };
  return Switch;
}(Node));
exports.Case = Case = (function(superclass){
  Case.displayName = 'Case';
  var prototype = __extend(Case, superclass).prototype, constructor = Case;
  function Case(tests, body){
    this.tests = tests;
    this.body = body;
  }
  prototype.children = ['tests', 'body'];
  prototype.isCallable = function(){
    return this.body.isCallable();
  };
  prototype.makeReturn = function(it){
    var __ref;
    if (((__ref = (__ref = this.body.lines)[__ref.length - 1]) != null ? __ref.value : void 8) !== 'fallthrough') {
      this.body.makeReturn(it);
    }
    return this;
  };
  prototype.compileCase = function(o, tab, nobr, bool){
    var test, t, tests, i, that, code, lines, last, ft, __res, __i, __ref, __len, __j, __ref1, __len1;
    __res = [];
    for (__i = 0, __len = (__ref = this.tests).length; __i < __len; ++__i) {
      test = __ref[__i];
      test = test.expandSlice(o).unwrap();
      if (test instanceof Arr) {
        for (__j = 0, __len1 = (__ref1 = test.items).length; __j < __len1; ++__j) {
          t = __ref1[__j];
          __res.push(t);
        }
      } else {
        __res.push(test);
      }
    }
    tests = __res;
    tests.length || tests.push(Literal('void'));
    if (bool) {
      t = tests[0];
      i = 0;
      while (that = tests[++i]) {
        t = Binary('||', t, that);
      }
      tests = [(this.t = t, this.aSource = 't', this.aTargets = ['body'], this).anaphorize().invert()];
    }
    code = '';
    for (__i = 0, __len = tests.length; __i < __len; ++__i) {
      t = tests[__i];
      code += tab + ("case " + t.compile(o, LEVEL_PAREN) + ":\n");
    }
    lines = this.body.lines;
    last = lines[lines.length - 1];
    if (ft = (last != null ? last.value : void 8) === 'fallthrough') {
      lines[lines.length - 1] = JS('// fallthrough');
    }
    o.indent = tab += TAB;
    if (that = this.body.compile(o, LEVEL_TOP)) {
      code += that + '\n';
    }
    if (!(nobr || ft || last instanceof Jump)) {
      code += tab + 'break;\n';
    }
    return code;
  };
  return Case;
}(Node));
exports.If = If = (function(superclass){
  If.displayName = 'If';
  var prototype = __extend(If, superclass).prototype, constructor = If;
  function If($if, then, un){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this['if'] = $if;
    __this.then = then;
    __this.un = un;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['if', 'then', 'else'];
  prototype.aSource = 'if';
  prototype.aTargets = ['then'];
  prototype.show = function(){
    return this.un && '!';
  };
  prototype.terminator = '';
  prototype.addElse = function(it){
    if (this['else'] instanceof constructor) {
      this['else'].addElse(it);
    } else {
      this['else'] = it;
    }
    return this;
  };
  prototype.delegate(['isCallable', 'isArray', 'isString', 'isRegex'], function(it){
    var __ref;
    return ((__ref = this['else']) != null ? __ref[it]() : void 8) && this.then[it]();
  });
  prototype.getJump = function(it){
    var __ref;
    return this.then.getJump(it) || ((__ref = this['else']) != null ? __ref.getJump(it) : void 8);
  };
  prototype.makeReturn = function(it){
    this.then = this.then.makeReturn(it);
    if (this['else'] != null) {
      this['else'] = this['else'].makeReturn(it);
    }
    return this;
  };
  prototype.compileNode = function(o){
    if (this.un) {
      this['if'] = this['if'].invert();
    } else {
      this.soak || this.anaphorize();
    }
    if (o.level) {
      return this.compileExpression(o);
    } else {
      return this.compileStatement(o);
    }
  };
  prototype.compileStatement = function(o){
    var code, els;
    code = "if (" + this['if'].compile(o, LEVEL_PAREN) + ") ";
    o.indent += TAB;
    code += this.compileBlock(o, Block(this.then));
    if (!(els = this['else'])) {
      return code;
    }
    return code + ' else ' + (els instanceof constructor
      ? els.compile((o.indent = this.tab, o), LEVEL_TOP)
      : this.compileBlock(o, els));
  };
  prototype.compileExpression = function(o){
    var thn, els, code, pad;
    thn = this.then, els = this['else'];
    this['void'] && (thn['void'] = (els || 0)['void'] = true);
    if (!els && (this.cond || this['void'])) {
      return Parens(Binary('&&', this['if'], thn)).compile(o);
    }
    code = this['if'].compile(o, LEVEL_COND);
    pad = els != null && els.isComplex() ? '\n' + (o.indent += TAB) : ' ';
    code += pad + "? " + thn.compile(o, LEVEL_LIST) + "" + pad + ": " + ((els != null ? els.compile(o, LEVEL_LIST) : void 8) || 'void 8');
    if (o.level < LEVEL_COND) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  If.unfoldSoak = function(o, parent, name){
    var that;
    if (that = parent[name].unfoldSoak(o)) {
      parent[name] = that.then;
      return that.cond = parent.cond, that['void'] = parent['void'], that.then = Chain(parent), that;
    }
  };
  return If;
}(Node));
exports.Label = Label = (function(superclass){
  Label.displayName = 'Label';
  var __ref, prototype = __extend(Label, superclass).prototype, constructor = Label;
  function Label(label, it){
    var fun;
    this.label = label || '_';
    this.it = it;
    if (fun = (it instanceof Fun || it instanceof Class) && it || it.calling && it.it.head) {
      fun.name || (fun.name = this.label, fun.labeled = true);
      return it;
    }
  }
  __ref = Parens.prototype, prototype.children = __ref.children, prototype.isCallable = __ref.isCallable, prototype.isArray = __ref.isArray;
  prototype.show = function(){
    return this.label;
  };
  prototype.isStatement = YES;
  prototype.getJump = function(ctx){
    ctx || (ctx = {});
    (ctx.labels || (ctx.labels = [])).push(this.label);
    return this.it.getJump((ctx['break'] = true, ctx));
  };
  prototype.makeReturn = function(it){
    this.it = this.it.makeReturn(it);
    return this;
  };
  prototype.compileNode = function(o){
    var label, it, labels;
    label = this.label, it = this.it;
    labels = o.labels = __slice.call(o.labels || []);
    if (__in(label, labels)) {
      this.carp("duplicate label \"" + label + "\"");
    }
    labels.push(label);
    it.isStatement() || (it = Block(it));
    return (label + ": ") + (it instanceof Block
      ? (o.indent += TAB, this.compileBlock(o, it))
      : it.compile(o));
  };
  return Label;
}(Node));
exports.JS = JS = (function(superclass){
  JS.displayName = 'JS';
  var prototype = __extend(JS, superclass).prototype, constructor = JS;
  function JS(code, literal, comment){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.code = code;
    __this.literal = literal;
    __this.comment = comment;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.show = function(){
    if (this.comment) {
      return this.code;
    } else {
      return "`" + this.code + "`";
    }
  };
  prototype.terminator = '';
  prototype.isAssignable = prototype.isCallable = function(){
    return !this.comment;
  };
  prototype.compile = function(it){
    if (this.literal) {
      return entab(this.code, it.indent);
    } else {
      return this.code;
    }
  };
  return JS;
}(Node));
exports.Util = Util = (function(superclass){
  Util.displayName = 'Util';
  var prototype = __extend(Util, superclass).prototype, constructor = Util;
  function Util(verb){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.verb = verb;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.show = Jump.prototype.show;
  prototype.isCallable = YES;
  prototype.compile = function(){
    return util(this.verb);
  };
  Util.Extends = function(){
    return Call.make(Util('extend'), [arguments[0], arguments[1]]);
  };
  return Util;
}(Node));
exports.Vars = Vars = (function(superclass){
  Vars.displayName = 'Vars';
  var prototype = __extend(Vars, superclass).prototype, constructor = Vars;
  function Vars(vars){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.vars = vars;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['vars'];
  prototype.makeReturn = THIS;
  prototype.compile = function(o, level){
    var v, value, __i, __ref, __len;
    for (__i = 0, __len = (__ref = this.vars).length; __i < __len; ++__i) {
      v = __ref[__i], value = v.value;
      if (!(v instanceof Var)) {
        v.carp('invalid variable declaration');
      }
      if (o.scope.check(value)) {
        v.carp("redeclaration of \"" + value + "\"");
      }
      o.scope.declare(value, v);
    }
    if (level) {
      return Literal('void').compile(o);
    } else {
      return '';
    }
  };
  return Vars;
}(Node));
exports.L = function(yylineno, node){
  return node.line = yylineno + 1, node;
};
exports.Decl = {
  'export': function(lines){
    var i, out, node, that, __ref;
    i = -1;
    out = Util('out');
    while (node = lines[++i]) {
      if (that = node instanceof Fun && node.name) {
        lines.splice(i++, 0, Assign(Chain(out, [Index(Key(that))]), Var(that)));
        continue;
      }
      lines[i] = (that = node.varName() || node instanceof Assign && node.left.varName() || node instanceof Class && ((__ref = node.title) != null ? __ref.varName() : void 8))
        ? Assign(Chain(out, [Index(Key(that))]), node)
        : Import(out, node);
    }
    return Block(lines);
  },
  'import': function(lines, all){
    var i, line, __len;
    for (i = 0, __len = lines.length; i < __len; ++i) {
      line = lines[i];
      lines[i] = Import(Literal('this'), line, all);
    }
    return Block(lines);
  },
  importAll: function(lines){
    return this['import'](lines, true);
  },
  'const': function(lines){
    var node, __i, __len;
    for (__i = 0, __len = lines.length; __i < __len; ++__i) {
      node = lines[__i];
      if (node.op !== '=') {
        node.carp('invalid constant variable declaration');
      }
      node['const'] = true;
    }
    return Block(lines);
  },
  'var': Vars
};
function Scope(parent, shared){
  this.parent = parent;
  this.shared = shared;
  this.variables = {};
}
__ref = Scope.prototype;
__ref.add = function(name, type, node){
  var t, that;
  if (node && (t = this.variables[name + "."])) {
    if (that = this.READONLY[t] || this.READONLY[type]) {
      node.carp("redeclaration of " + that + " \"" + name + "\"");
    } else if (t === type && type === 'arg') {
      node.carp("duplicate parameter \"" + name + "\"");
    }
    if (t == 'arg' || t == 'function') {
      return name;
    }
  }
  this.variables[name + "."] = type;
  return name;
};
__ref.get = function(name){
  return this.variables[name + "."];
};
__ref.declare = function(name, node, constant){
  var that, scope;
  if (that = this.shared) {
    if (this.check(name)) {
      return;
    }
    scope = that;
  } else {
    scope = this;
  }
  return scope.add(name, constant ? 'const' : 'var', node);
};
__ref.assign = function(name, value){
  return this.add(name, {
    value: value
  });
};
__ref.temporary = function(name){
  var i, temp, __ref;
  name || (name = 'ref');
  i = 0;
  do {
    temp = '__' + (name.length > 1
      ? name + (i++ || '')
      : (i++ + parseInt(name, 36)).toString(36));
  } while ((__ref = this.variables[temp + "."]) != 'reuse' && __ref != void 8);
  return this.add(temp, 'var');
};
__ref.free = function(name){
  return this.add(name, 'reuse');
};
__ref.check = function(name, above){
  var type, __ref;
  if ((type = this.variables[name + "."]) || !above) {
    return type;
  }
  return (__ref = this.parent) != null ? __ref.check(name, above) : void 8;
};
__ref.checkReadOnly = function(name){
  return this.READONLY[this.check(name, true)];
};
__ref.READONLY = {
  'const': 'constant',
  'function': 'function',
  undefined: 'undeclared'
};
__ref.emit = function(code, tab){
  var usr, tmp, asn, fun, name, type, that, val, __ref;
  usr = [];
  tmp = [];
  asn = [];
  fun = [];
  for (name in __ref = this.variables) {
    type = __ref[name];
    name = name.slice(0, -1);
    if (type == 'var' || type == 'const' || type == 'reuse') {
      ('_' === name.charAt(0) ? tmp : usr).push(name);
    } else if (that = type.value) {
      if (~(val = entab(that, tab)).lastIndexOf('function(', 0)) {
        fun.push("function " + name + val.slice(8));
      } else {
        asn.push(name + " = " + val);
      }
    }
  }
  if (that = usr.concat(tmp, asn).join(', ')) {
    code = tab + "var " + that + ";\n" + code;
  }
  if (that = fun.join("\n" + tab)) {
    return code + "\n" + tab + that;
  } else {
    return code;
  }
};
function YES(){
  return true;
}
function NO(){
  return false;
}
function THIS(){
  return this;
}
function VOID(){}
UTILS = {
  clone: 'function(it){\n  function fun(){} fun.prototype = it;\n  return new fun;\n}',
  extend: 'function(sub, sup){\n  function fun(){} fun.prototype = (sub.superclass = sup).prototype;\n  (sub.prototype = new fun).constructor = sub;\n  if (typeof sup.extended == \'function\') sup.extended(sub);\n  return sub;\n}',
  bind: 'function(obj, key){\n  return function(){ return obj[key].apply(obj, arguments) };\n}',
  'import': 'function(obj, src){\n  var own = {}.hasOwnProperty;\n  for (var key in src) if (own.call(src, key)) obj[key] = src[key];\n  return obj;\n}',
  importAll: 'function(obj, src){\n  for (var key in src) obj[key] = src[key];\n  return obj;\n}',
  repeatString: 'function(str, n){\n  for (var r = \'\'; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;\n  return r;\n}',
  repeatArray: 'function(arr, n){\n  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))\n    if (n & 1) r.push.apply(r, arr);\n  return r;\n}',
  'in': 'function(x, arr){\n  var i = 0, l = arr.length >>> 0;\n  while (i < l) if (x === arr[i++]) return true;\n  return false;\n}',
  out: 'typeof exports != \'undefined\' && exports || this',
  curry: 'function(f, args){\n  return f.length > 1 ? function(){\n    var params = args ? args.concat() : [];\n    return params.push.apply(params, arguments) < f.length && arguments.length ?\n      __curry.call(this, f, params) : f.apply(this, params);\n  } : f;\n}',
  compose: 'function(f, g){\n  return function(){ return f(g.apply(this, arguments)); }\n}',
  flip: 'function(f){\n  return __curry(function (x, y) { return f(y, x); });\n}',
  partialize: 'function(f, args, where){\n  return function(){\n    var params = __slice.call(arguments), i,\n        len = params.length, wlen = where.length,\n        ta = args ? args.concat() : [], tw = where ? where.concat() : [];\n    for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }\n    return len < wlen && len ? __partialize(f, ta, tw) : f.apply(this, ta);\n  };\n}',
  not: 'function(x){ return !x; }',
  split: "''.split",
  replace: "''.replace",
  toString: '{}.toString',
  join: '[].join',
  slice: '[].slice'
};
LEVEL_TOP = 0;
LEVEL_PAREN = 1;
LEVEL_LIST = 2;
LEVEL_COND = 3;
LEVEL_OP = 4;
LEVEL_CALL = 5;
(function(){
  this['&&'] = this['||'] = 0.2;
  this['&&&'] = this['^^^'] = this['|||'] = 0.3;
  this['=='] = this['!='] = this['==='] = this['!=='] = 0.4;
  this['<'] = this['>'] = this['<='] = this['>='] = this.of = this['instanceof'] = this['+++'] = 0.5;
  this['<<<<<'] = this['>>>>'] = this['>>>>>'] = 0.6;
  this['+'] = this['-'] = 0.7;
  this['*'] = this['/'] = this['%'] = 0.8;
}.call(PREC = {
  unary: 0.9
}));
TAB = '  ';
ID = /^(?!\d)[\w$\xAA-\uFFDC]+$/;
SIMPLENUM = /^\d+$/;
function util(it){
  return Scope.root.assign('__' + it, UTILS[it]);
}
function entab(code, tab){
  return code.replace(/\n/g, '\n' + tab);
}
function __import(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function __clone(it){
  function fun(){} fun.prototype = it;
  return new fun;
}
function __extend(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function __repeatString(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
function __importAll(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}
function __in(x, arr){
  var i = 0, l = arr.length >>> 0;
  while (i < l) if (x === arr[i++]) return true;
  return false;
}

/***/ },
/* 3 */
/***/ function(module, exports) {

var string, TABS, unlines, enlines, enslash, reslash, character, KEYWORDS_SHARED, KEYWORDS_UNUSED, KEYWORDS, ID, SYMBOL, SPACE, MULTIDENT, SIMPLESTR, BSTOKEN, NUMBER, NUMBER_OMIT, REGEX, HEREGEX_OMIT, LASTDENT, INLINEDENT, NONASCII, OPENERS, CLOSERS, INVERSES, CHAIN, ARG, __slice = [].slice;
exports.lex = function(code, options){
  return __clone(exports).tokenize(code || '', options || {});
};
exports.rewrite = function(it){
  var __ref;
  it || (it = this.tokens);
  firstPass(it);
  addImplicitIndentation(it);
  tagPostfixConditionals(it);
  addImplicitParentheses(it);
  addImplicitBraces(it);
  expandLiterals(it);
  if (((__ref = it[0]) != null ? __ref[0] : void 8) === 'NEWLINE') {
    it.shift();
  }
  return it;
};
exports.tokenize = function(code, o){
  var i, c, that;
  this.inter || (code = code.replace(/[\r\u2028\u2029\uFEFF]/g, ''));
  code = '\n' + code;
  this.tokens = [this.last = ['NEWLINE', '\n', 0]];
  this.line = ~-o.line;
  this.dents = [];
  this.closes = [];
  this.parens = [];
  i = 0;
  while (c = code.charAt(i)) {
    switch (c) {
    case ' ':
      i += this.doSpace(code, i);
      break;
    case '\n':
      i += this.doLine(code, i);
      break;
    case '\\':
      i += this.doBackslash(code, i);
      break;
    case '\'':
    case '"':
      i += this.doString(code, i, c);
      break;
    case "0":
    case "1":
    case "2":
    case "3":
    case "4":
    case "5":
    case "6":
    case "7":
    case "8":
    case "9":
      i += this.doNumber(code, i);
      break;
    case '/':
      switch (code.charAt(i + 1)) {
      case '*':
        i += this.doComment(code, i);
        break;
      case '/':
        i += this.doHeregex(code, i);
        break;
      default:
        i += this.doRegex(code, i) || this.doLiteral(code, i);
      }
      break;
    default:
      i += this.doID(code, i) || this.doLiteral(code, i) || this.doSpace(code, i);
    }
  }
  this.dedent(this.dent);
  if (that = this.closes.pop()) {
    this.carp("missing `" + that + "`");
  }
  if (this.inter) {
    this.rest == null && this.carp('unterminated interpolation');
  } else {
    this.last.spaced = true;
    this.newline();
  }
  o.raw || this.rewrite();
  return this.tokens;
};
exports.dent = 0;
exports.identifiers = {};
exports.hasOwn = Object.prototype.hasOwnProperty;
exports.checkConsistency = function(camel, id){
  if (this.hasOwn.call(this.identifiers, camel) && this.identifiers[camel] !== id) {
    throw new ReferenceError("Inconsistent use of " + camel + " as " + id + " on line " + (-~this.line));
  } else {
    return this.identifiers[camel] = id;
  }
};
exports.doID = function(code, index){
  var match, input, id, last, tag, that, __ref;
  input = (match = (ID.lastIndex = index, ID).exec(code))[0];
  if (!input) {
    return 0;
  }
  id = match[1].replace(/-+([a-zA-Z0-9$_])/g, function(it){
    return it[1].toUpperCase();
  });
  if (/-/.test(match[1])) {
    this.checkConsistency(id, match[1]);
  }
  if (NONASCII.test(id)) {
    try {
      Function("var " + id);
    } catch (e) {
      this.carp("invalid identifier \"" + id + "\"");
    }
  }
  last = this.last;
  if (match[4] || last[0] === 'DOT' || this.adi()) {
    this.token('ID', __in(id, KEYWORDS) ? (__ref = Object(id), __ref.reserved = true, __ref) : id);
    if (match[4]) {
      this.token(':', ':');
    }
    return input.length;
  }
  switch (id) {
  case 'true':
  case 'false':
  case 'on':
  case 'off':
  case 'yes':
  case 'no':
  case 'null':
  case 'void':
  case 'undefined':
  case 'arguments':
  case 'debugger':
    tag = 'LITERAL';
    break;
  case 'new':
  case 'do':
  case 'typeof':
  case 'delete':
    tag = 'UNARY';
    break;
  case 'return':
  case 'throw':
    tag = 'HURL';
    break;
  case 'break':
  case 'continue':
    tag = 'JUMP';
    break;
  case 'var':
  case 'const':
  case 'export':
    tag = 'DECL';
    break;
  case 'this':
  case 'eval':
  case 'super':
    return this.token('LITERAL', id, true).length;
  case 'for':
    this.seenFor = true;
    // fallthrough
  case 'then':
    this.wantBy = false;
    break;
  case 'catch':
  case 'function':
    id = '';
    break;
  case 'in':
  case 'of':
    if (this.seenFor) {
      this.seenFor = false;
      if (id === 'in') {
        id = '';
        this.wantBy = true;
        if (last[0] === 'ID' && (__ref = this.tokens)[__ref.length - 2][0] !== 'FOR') {
          id = this.tokens.pop()[1];
          if ((__ref = this.tokens)[__ref.length - 1][0] === ',') {
            this.tokens.pop();
          }
        }
      }
      break;
    }
    // fallthrough
  case 'instanceof':
    if (last[1] === '!') {
      id = this.tokens.pop()[1] + id;
    }
    tag = (__ref = this.tokens)[__ref.length - 1][0] === '(' ? 'BIOPR' : 'RELATION';
    break;
  case 'not':
    if (last.alias && last[1] === '===') {
      return last[1] = '!==', 3;
    }
    tag = 'UNARY';
    id = '!';
    break;
  case 'and':
  case 'or':
  case 'is':
  case 'isnt':
    this.unline();
    tag = id == 'is' || id == 'isnt' ? 'COMPARE' : 'LOGIC';
    if (last[0] === '(') {
      tag = 'BIOP';
    }
    this.token(tag, (function(){
      switch (id) {
      case 'is':
        return '===';
      case 'isnt':
        return '!==';
      case 'or':
        return '||';
      case 'and':
        return '&&';
      }
    }()));
    this.last.alias = true;
    return id.length;
  case 'unless':
    tag = 'IF';
    break;
  case 'until':
    tag = 'WHILE';
    break;
  case 'import':
    if (last[0] === '(') {
      id = '<<<';
      tag = 'BIOP';
    } else {
      if (able(this.tokens)) {
        id = '<<<';
      } else {
        tag = 'DECL';
      }
    }
    break;
  case 'with':
    tag = (function(){
      switch (false) {
      case !able(this.tokens):
        return 'CLONEPORT';
      case last[0] !== '(':
        return 'BIOP';
      default:
        return 'WITH';
      }
    }.call(this));
    break;
  case 'when':
    tag = 'CASE';
    // fallthrough
  case 'case':
    if (this.doCase()) {
      return input.length;
    }
    break;
  case 'loop':
    this.token('WHILE', id);
    this.token('LITERAL', 'true');
    return input.length;
  default:
    if (__in(id, KEYWORDS_SHARED)) {
      break;
    }
    if (__in(id, KEYWORDS_UNUSED)) {
      this.carp("reserved word \"" + id + "\"");
    }
    if (!last[1] && ((__ref = last[0]) == 'CATCH' || __ref == 'FUNCTION' || __ref == 'LABEL')) {
      last[1] = id;
      last.spaced = false;
      return id.length;
    }
    tag = 'ID';
    switch (id) {
    case 'own':
      if (last[0] === 'FOR') {
        tag = 'OWN';
      }
      break;
    case 'otherwise':
    case '_':
      if ((__ref = last[0]) == 'CASE' || __ref == '|') {
        last[0] = 'DEFAULT';
        return id.length;
      }
      break;
    case 'all':
      if (that = last[1] === '<<<' && '<' || last[1] === 'import' && 'All') {
        last[1] += that;
        return 3;
      }
      break;
    case 'from':
      this.forange() && (tag = 'FROM');
      break;
    case 'to':
    case 'til':
      this.forange() && this.tokens.push(['FROM', '', this.line], ['STRNUM', '0', this.line]);
      if (this.seenFrom) {
        this.seenFrom = false;
        this.wantBy = true;
        tag = 'TO';
      } else if (!last.callable && last[0] === 'STRNUM' && (__ref = this.tokens)[__ref.length - 2][0] === '[') {
        last[0] = 'RANGE';
        last.op = id;
        return id.length;
      } else if (__in(']', this.closes)) {
        this.token('TO', id);
        return id.length;
      }
      break;
    case 'by':
      if (last[0] === 'STRNUM' && (__ref = this.tokens)[__ref.length - 2][0] === 'RANGE' && (__ref = this.tokens)[__ref.length - 3][0] === '[') {
        tag = 'RANGE_BY';
      } else if (__in(']', this.closes)) {
        tag = 'BY';
      } else {
        this.wantBy && (this.wantBy = !(tag = 'BY'));
      }
      break;
    case 'ever':
      if (last[0] === 'FOR') {
        this.seenFor = false;
        last[0] = 'WHILE';
        tag = 'LITERAL';
        id = 'true';
      }
    }
  }
  tag || (tag = match[1].toUpperCase());
  if ((tag == 'COMPARE' || tag == 'LOGIC' || tag == 'RELATION') && last[0] === '(') {
    tag = tag === 'RELATION' ? 'BIOPR' : 'BIOP';
  }
  if (tag == 'RELATION' || tag == 'THEN' || tag == 'ELSE' || tag == 'CASE' || tag == 'DEFAULT' || tag == 'CATCH' || tag == 'FINALLY' || tag == 'IN' || tag == 'OF' || tag == 'FROM' || tag == 'TO' || tag == 'BY' || tag == 'EXTENDS' || tag == 'IMPLEMENTS') {
    this.unline();
  }
  this.token(tag, id);
  return input.length;
};
exports.doNumber = function(code, lastIndex){
  var match, input, last, radix, rnum, num, __ref;
  NUMBER.lastIndex = lastIndex;
  if (!(input = (match = NUMBER.exec(code))[0])) {
    return 0;
  }
  last = this.last;
  if (match[5] && (last[0] === 'DOT' || this.adi())) {
    this.token('STRNUM', match[4].replace(NUMBER_OMIT, ''));
    return match[4].length;
  }
  if (radix = match[1]) {
    num = parseInt(rnum = match[2].replace(NUMBER_OMIT, ''), radix);
    if (radix > 36 || radix < 2) {
      this.carp("invalid number base " + radix + " (with number " + rnum + "), base must be from 2 to 36");
    }
    if (isNaN(num) || num === parseInt(rnum.slice(0, -1), radix)) {
      this.carp("invalid number " + rnum + " in base " + radix);
    }
    num += '';
  } else {
    num = (match[3] || input).replace(NUMBER_OMIT, '');
    if (match[3] && num.charAt() === '0' && ((__ref = num.charAt(1)) != '' && __ref != '.')) {
      this.carp("deprecated octal literal " + match[4]);
    }
  }
  if (!last.spaced && last[0] === '+-') {
    last[0] = 'STRNUM';
    last[1] += num;
    return input.length;
  }
  this.strnum(num);
  return input.length;
};
exports.doString = function(code, index, q){
  var parts, str;
  if (q === code.charAt(index + 1)) {
    return q === code.charAt(index + 2)
      ? this.doHeredoc(code, index, q)
      : (this.strnum(q + q), 2);
  }
  if (q === '"') {
    parts = this.interpolate(code, index, q);
    this.addInterpolated(parts, unlines);
    return 1 + parts.size;
  }
  str = (SIMPLESTR.lastIndex = index, SIMPLESTR).exec(code)[0] || this.carp('unterminated string');
  this.strnum(unlines(string(q, str.slice(1, -1))));
  return this.countLines(str).length;
};
exports.doHeredoc = function(code, index, q){
  var end, raw, doc, parts, tabs, i, t, __len;
  if (q === '\'') {
    ~(end = code.indexOf(q + q + q, index + 3)) || this.carp('unterminated heredoc');
    raw = code.slice(index + 3, end);
    doc = raw.replace(LASTDENT, '');
    this.strnum(enlines(string(q, lchomp(detab(doc, heretabs(doc))))));
    return this.countLines(raw).length + 6;
  }
  parts = this.interpolate(code, index, q + q + q);
  tabs = heretabs(code.slice(index + 3, index + parts.size).replace(LASTDENT, ''));
  for (i = 0, __len = parts.length; i < __len; ++i) {
    t = parts[i];
    if (t[0] === 'S') {
      if (i + 1 === parts.length) {
        t[1] = t[1].replace(LASTDENT, '');
      }
      t[1] = detab(t[1], tabs);
      if (i === 0) {
        t[1] = lchomp(t[1]);
      }
    }
  }
  this.addInterpolated(parts, enlines);
  return 3 + parts.size;
};
exports.doComment = function(code, index){
  var end, comment, __ref;
  comment = ~(end = code.indexOf('*/', index + 2))
    ? code.slice(index, end + 2)
    : code.slice(index) + '*/';
  if ((__ref = this.last[0]) == 'NEWLINE' || __ref == 'INDENT' || __ref == 'THEN' || __ref == '=>') {
    this.token('COMMENT', detab(comment, this.dent));
    this.token('NEWLINE', '\n');
  } else {
    this.last.spaced = true;
  }
  return this.countLines(comment).length;
};
exports.doRegex = function(code, index){
  var divisible, input, body, flag, __ref;
  if (divisible = able(this.tokens) || this.last[0] === 'CREMENT') {
    if (!this.last.spaced || ((__ref = code.charAt(index + 1)) == ' ' || __ref == '=')) {
      return 0;
    }
  }
  __ref = (REGEX.lastIndex = index, REGEX).exec(code), input = __ref[0], body = __ref[1], flag = __ref[2];
  if (input) {
    this.regex(body, flag);
  } else if (!divisible && this.last[0] !== '(') {
    this.carp('unterminated regex');
  }
  return input.length;
};
exports.doHeregex = function(code, index){
  var tokens, last, parts, rest, flag, i, t, dynaflag, val, one, __len;
  tokens = this.tokens, last = this.last;
  parts = this.interpolate(code, index, '//');
  rest = code.slice(index + 2 + parts.size);
  flag = this.validate(/^(?:[gimy]{1,4}|[?$]?)/.exec(rest)[0]);
  if (parts[1]) {
    if (flag === '$') {
      this.adi();
      this.token('(', '"');
    } else {
      tokens.push(['ID', 'RegExp', last[2]], ['CALL(', '', last[2]]);
      if (flag === '?') {
        for (i = parts.length - 1; i >= 0; --i) {
          t = parts[i];
          if (t[0] === 'TOKENS') {
            dynaflag = parts.splice(i, 1)[0][1];
            break;
          }
        }
      }
    }
    for (i = 0, __len = parts.length; i < __len; ++i) {
      t = parts[i];
      if (t[0] === 'TOKENS') {
        tokens.push.apply(tokens, t[1]);
      } else {
        val = t[1].replace(HEREGEX_OMIT, '');
        if (one && !val) {
          continue;
        }
        one = tokens.push((t[0] = 'STRNUM', t[1] = string('\'', enslash(val)), t));
      }
      tokens.push(['+-', '+', tokens[tokens.length - 1][2]]);
    }
    --tokens.length;
    if (dynaflag || flag >= 'g') {
      this.token(',', ',');
      if (dynaflag) {
        tokens.push.apply(tokens, dynaflag);
      } else {
        this.token('STRNUM', "'" + flag + "'");
      }
    }
    this.token(flag === '$' ? ')' : ')CALL', '');
  } else {
    this.regex(reslash(parts[0][1].replace(HEREGEX_OMIT, '')), flag);
  }
  return 2 + parts.size + flag.length;
};
exports.doBackslash = function(code, lastIndex){
  var input, word, __ref;
  BSTOKEN.lastIndex = lastIndex;
  __ref = BSTOKEN.exec(code), input = __ref[0], word = __ref[1];
  if (word) {
    this.strnum(string('\'', word));
  } else {
    this.countLines(input);
  }
  return input.length;
};
exports.doLine = function(code, index){
  var input, tabs, length, last, that, delta, tag, __ref;
  __ref = (MULTIDENT.lastIndex = index, MULTIDENT).exec(code), input = __ref[0], tabs = __ref[1];
  length = this.countLines(input).length;
  last = this.last;
  last.eol = true;
  last.spaced = true;
  if (index + length >= code.length) {
    return length;
  }
  if (that = tabs && (this.emender || (this.emender = RegExp('[^' + tabs.charAt() + ']'))).exec(tabs)) {
    this.carp("contaminated indent " + escape(that));
  }
  if (0 > (delta = tabs.length - this.dent)) {
    this.dedent(-delta);
    this.newline();
  } else {
    if (that = tabs && (this.emender || (this.emender = RegExp('[^' + tabs.charAt(0) + ']'))).exec(tabs)) {
      this.carp("contaminated indent " + escape(that));
    }
    if ((tag = last[0]) === 'ASSIGN' && ((__ref = '' + last[1]) != '=' && __ref != ':=' && __ref != '+=') || (tag == '+-' || tag == 'PIPE' || tag == 'BACKPIPE' || tag == 'DOT' || tag == 'LOGIC' || tag == 'MATH' || tag == 'COMPARE' || tag == 'RELATION' || tag == 'SHIFT' || tag == 'BITWISE' || tag == 'IN' || tag == 'OF' || tag == 'TO' || tag == 'BY' || tag == 'FROM' || tag == 'EXTENDS' || tag == 'IMPLEMENTS')) {
      return length;
    }
    if (delta) {
      this.indent(delta);
    } else {
      this.newline();
    }
  }
  this.wantBy = false;
  return length;
};
exports.doSpace = function(code, lastIndex){
  var input;
  SPACE.lastIndex = lastIndex;
  if (input = SPACE.exec(code)[0]) {
    this.last.spaced = true;
  }
  return input.length;
};
exports.doCase = function(){
  var __ref, __ref1;
  if (((__ref = this.last[0]) == 'ASSIGN' || __ref == '->' || __ref == ':') || (this.last[0] === 'INDENT' && ((__ref = (__ref1 = this.tokens)[__ref1.length - 2][0]) == 'ASSIGN' || __ref == '->' || __ref == ':'))) {
    this.token('SWITCH', 'switch');
    this.line++;
    return this.token('CASE', 'case');
  }
};
exports.doLiteral = function(code, index){
  var sym, val, tag, arrow, i, t, that, up, __ref, __ref1, __this = this;
  if (!(sym = (SYMBOL.lastIndex = index, SYMBOL).exec(code)[0])) {
    return 0;
  }
  switch (tag = val = sym) {
  case '=>':
    tag = 'THEN';
    this.unline();
    break;
  case '|':
    tag = 'CASE';
    if (this.doCase()) {
      return sym.length;
    }
    break;
  case '|>':
    tag = 'PIPE';
    break;
  case '`':
    tag = 'BACKTICK';
    break;
  case '<<':
  case '>>':
    tag = 'COMPOSE';
    break;
  case '<|':
    tag = 'BACKPIPE';
    break;
  case '+':
  case '-':
    tag = '+-';
    break;
  case '&&':
  case '||':
    tag = 'LOGIC';
    break;
  case '&&&':
  case '|||':
  case '^^^':
    tag = 'BITWISE';
    break;
  case '^^':
    tag = 'CLONE';
    break;
  case '**':
  case '^':
    tag = 'POWER';
    break;
  case '?':
  case '!?':
    if (this.last[0] === '(') {
      createItFunc();
    } else {
      if (this.last.spaced) {
        tag = 'LOGIC';
      }
    }
    break;
  case '/':
  case '%':
  case '%%':
    tag = 'MATH';
    break;
  case '+++':
    tag = 'CONCAT';
    break;
  case '++':
  case '--':
    tag = 'CREMENT';
    break;
  case '<<<':
  case '<<<<':
    tag = 'IMPORT';
    break;
  case ';':
    tag = 'NEWLINE';
    this.wantBy = false;
    break;
  case '.':
    if (this.last[0] === '(') {
      createItFunc();
    }
    if (this.last[1] === '?') {
      this.last[0] = '?';
    }
    tag = 'DOT';
    break;
  case ',':
    switch (this.last[0]) {
    case ',':
    case '[':
    case '(':
    case 'CALL(':
      this.token('LITERAL', 'void');
      break;
    case 'FOR':
    case 'OWN':
      this.token('ID', '');
    }
    break;
  case '!=':
    if (!(able(this.tokens) || ((__ref = this.last[0]) == '(' || __ref == 'CREMENT'))) {
      this.tokens.push(['UNARY', '!', this.line], ['ASSIGN', '=', this.line]);
      return 2;
    }
    // fallthrough
  case '===':
  case '!==':
  case '==':
    val = (function(){
      switch (val) {
      case '===':
        return '==';
      case '!==':
        return '!=';
      case '==':
        return '===';
      case '!=':
        return '!==';
      }
    }());
    tag = 'COMPARE';
    break;
  case '<':
  case '>':
  case '<=':
  case '>=':
    tag = 'COMPARE';
    break;
  case '<<<<<':
  case '>>>>':
  case '>>>>>':
  case '<?':
  case '>?':
    tag = 'SHIFT';
    break;
  case '(':
    if (!(((__ref = this.last[0]) == 'FUNCTION' || __ref == 'LET') || this.able(true) || this.last[1] === '.@')) {
      this.token('(', '(');
      this.closes.push(')');
      this.parens.push(this.last);
      return 1;
    }
    tag = 'CALL(';
    this.closes.push(')CALL');
    break;
  case '[':
  case '{':
    this.adi();
    this.closes.push(']}'.charAt(val === '{'));
    break;
  case '}':
    if (this.inter && val !== (__ref = this.closes)[__ref.length - 1]) {
      this.rest = code.slice(index + 1);
      return 9e9;
    }
    // fallthrough
  case ']':
  case ')':
    if (tag === ')' && ((__ref = this.last[0]) == '+-' || __ref == 'COMPARE' || __ref == 'LOGIC' || __ref == 'MATH' || __ref == 'POWER' || __ref == 'SHIFT' || __ref == 'BITWISE' || __ref == 'CONCAT' || __ref == 'COMPOSE' || __ref == 'RELATION' || __ref == 'PIPE' || __ref == 'BACKPIPE' || __ref == 'IMPORT' || __ref == 'CLONEPORT' || __ref == 'ASSIGN')) {
      (__ref = this.tokens)[__ref.length - 1][0] = (function(){
        switch (this.last[0]) {
        case 'RELATION':
          return 'BIOPR';
        case 'PIPE':
          this.parameters(false, -1);
          return 'BIOPP';
        default:
          return 'BIOP';
        }
      }.call(this));
    }
    if (')' === (tag = val = this.pair(val))) {
      this.lpar = this.parens.pop();
    }
    break;
  case '=':
  case ':':
    if (this.last[0] === 'UNARY' && this.last[1] === '!' && ((__ref = (__ref1 = this.tokens)[__ref1.length - 2][1]) == '.@' || __ref == 'this')) {
      this.tokens.pop();
      this.token('CALL(', '(');
      this.token(')CALL', ')');
    }
    if (this.last[0] === ')CALL') {
      if (val === '=') {
        tag = 'ASSIGN';
      }
      arrow = '->';
      this.tokens.pop();
      this.token(')PARAM', ')');
      for (i = (__ref = this.tokens).length - 1; i >= 0; --i) {
        t = __ref[i];
        if (t[0] === 'CALL(') {
          break;
        }
      }
      this.tokens.splice(i, 1, [tag, val, this.line], ['PARAM(', '(', this.line]);
      if ((__ref = this.tokens[i - 1][1]) == '.@' || __ref == 'this') {
        this.tokens.splice(i - 1, 1);
        arrow = '~>';
        i--;
      }
      if (this.tokens[i - 2][1] === '!') {
        this.tokens.splice(i - 2, 1);
        this.tokens.splice(i, 0, ['UNARY', '!', this.line]);
      } else if (this.tokens[i - 2][1] === '.' && this.tokens[i - 3][1] === ')' && this.tokens[i - 4][1] === '!' && this.tokens[i - 5][1] === 'this') {
        this.tokens.splice(i - 4, 2);
        this.tokens.splice(i - 1, 0, ['UNARY', '!', this.line]);
      }
      this.token('->', arrow.charAt(0) + arrow);
      return sym.length;
    }
    if (val === ':') {
      if ((__ref = this.last[0]) != 'ID' && __ref != 'STRNUM' && __ref != ')') {
        tag = 'LABEL';
        val = '';
      }
      this.token(tag, val);
      return sym.length;
    }
    // fallthrough
  case ':=':
  case '+=':
  case '-=':
  case '*=':
  case '/=':
  case '%=':
  case '%%=':
  case '<?=':
  case '>?=':
  case '**=':
  case '^=':
    if (this.last[1] === '.' || this.last[0] === '?' && this.adi()) {
      this.last[1] += val;
      return val.length;
    }
    if (this.last[0] === 'LOGIC') {
      (val = Object(val)).logic = this.tokens.pop()[1];
    } else if ((val == '+=' || val == '-=') && !able(this.tokens) && ((__ref = this.last[0]) != '+-' && __ref != 'UNARY' && __ref != 'LABEL')) {
      this.token('UNARY', val.charAt());
      val = '=';
    }
    tag = 'ASSIGN';
    break;
  case '::=':
    this.token('DOT', '.');
    this.token('ID', 'prototype');
    this.token('IMPORT', '<<');
    return sym.length;
  case '*':
    if (that = ((__ref = this.last[0]) == 'NEWLINE' || __ref == 'INDENT' || __ref == 'THEN' || __ref == '=>') && (INLINEDENT.lastIndex = index + 1, INLINEDENT).exec(code)[0].length) {
      this.tokens.push(['LITERAL', 'void', this.line], ['ASSIGN', '=', this.line]);
      this.indent(index + that - 1 - this.dent - code.lastIndexOf('\n', index - 1));
      return that;
    }
    tag = able(this.tokens) || this.last[0] === 'CREMENT' && able(this.tokens, this.tokens.length - 1) || this.last[0] === '(' ? 'MATH' : 'STRNUM';
    break;
  case '@':
  case '@@':
    this.dotcat(val) || (val === '@' && this.token('LITERAL', 'this', true));
    return val.length;
  case '&':
    this.token('LITERAL', 'arguments');
    return 1;
  case '!':
    switch (false) {
    default:
      if (!this.last.spaced) {
        if (able(this.tokens, null, true)) {
          this.token('CALL(', '!');
          this.token(')CALL', ')');
        } else if (this.last[1] === 'typeof') {
          this.last[1] = 'classof';
        } else {
          break;
        }
        return 1;
      }
    }
    tag = 'UNARY';
    break;
  case '~':
    if (this.dotcat(val)) {
      return 1;
    }
    tag = 'UNARY';
    break;
  case '->':
  case '~>':
  case '-->':
  case '~~>':
    up = '->';
    // fallthrough
  case '<-':
  case '<~':
  case '<--':
  case '<~~':
    this.parameters(tag = up || '<-');
    break;
  case '::':
    up = 'prototype';
    // fallthrough
  case '..':
    this.adi();
    tag = 'ID';
    val = up || 'constructor';
    break;
  default:
    switch (val.charAt(0)) {
    case '(':
      this.token('CALL(', '(');
      tag = ')CALL';
      val = ')';
      break;
    case '<':
      if (val.length < 4) {
        this.carp('unterminated words');
      }
      this.adi();
      tag = 'WORDS';
      val = val.slice(2, -2);
    }
  }
  if ((tag == '+-' || tag == 'COMPARE' || tag == 'LOGIC' || tag == 'MATH' || tag == 'POWER' || tag == 'SHIFT' || tag == 'BITWISE' || tag == 'CONCAT' || tag == 'COMPOSE' || tag == 'RELATION' || tag == 'PIPE' || tag == 'BACKPIPE' || tag == 'IMPORT') && this.last[0] === '(') {
    tag = tag === 'BACKPIPE' ? 'BIOPBP' : 'BIOP';
  }
  if (tag == ',' || tag == 'CASE' || tag == 'PIPE' || tag == 'BACKPIPE' || tag == 'DOT' || tag == 'LOGIC' || tag == 'COMPARE' || tag == 'MATH' || tag == 'POWER' || tag == 'IMPORT' || tag == 'SHIFT' || tag == 'BITWISE') {
    this.unline();
  }
  function createItFunc(nc){
    __this.token('PARAM(', '(');
    __this.token(')PARAM', ')');
    __this.token('->', '->');
    return __this.token('ID', 'it');
  }
  this.token(tag, val);
  return sym.length;
};
exports.token = function(tag, value, callable){
  this.tokens.push(this.last = [tag, value, this.line]);
  if (callable) {
    this.last.callable = true;
  }
  return value;
};
exports.indent = function(delta){
  this.dent += delta;
  this.dents.push(this.token('INDENT', delta));
  this.closes.push('DEDENT');
};
exports.dedent = function(debt){
  var dent;
  this.dent -= debt;
  while (debt > 0 && (dent = this.dents.pop())) {
    if (debt < dent && !this.inter) {
      this.carp("unmatched dedent (" + debt + " for " + dent + ")");
    }
    this.pair('DEDENT');
    debt -= typeof dent === 'number' ? this.token('DEDENT', dent) : dent;
  }
};
exports.newline = function(){
  var __ref;
  this.last[1] === '\n' || this.tokens.push(this.last = (__ref = ['NEWLINE', '\n', this.line], __ref.spaced = true, __ref));
};
exports.unline = function(){
  var __ref;
  if (!this.tokens[1]) {
    return;
  }
  switch (this.last[0]) {
  case 'INDENT':
    (__ref = this.dents)[__ref.length - 1] += '';
    // fallthrough
  case 'NEWLINE':
    this.tokens.length--;
  }
};
exports.parameters = function(arrow, offset){
  var i, t, __ref, __ref1;
  if (this.last[0] === ')' && ')' === this.last[1]) {
    this.lpar[0] = 'PARAM(';
    this.last[0] = ')PARAM';
    return;
  }
  if (arrow === '->') {
    this.token('PARAM(', '');
  } else {
    for (i = (__ref = this.tokens).length - 1; i >= 0; --i) {
      t = __ref[i];
      if ((__ref1 = t[0]) == 'NEWLINE' || __ref1 == 'INDENT' || __ref1 == 'THEN' || __ref1 == '=>' || __ref1 == '(') {
        break;
      }
    }
    this.tokens.splice(i + 1, 0, ['PARAM(', '', t[2]]);
  }
  if (offset) {
    this.tokens.splice(this.tokens.length + offset, 0, [')PARAM', '', t[2]]);
  } else {
    this.token(')PARAM', '');
  }
};
exports.interpolate = function(str, idx, end){
  var parts, end0, pos, i, ch, idOrig, id, stringified, delta, nested, clone, __ref;
  parts = [];
  end0 = end.charAt(0);
  pos = 0;
  i = -1;
  str = str.slice(idx + end.length);
  while (ch = str.charAt(++i)) {
    switch (ch) {
    case end0:
      if (end !== str.slice(i, i + end.length)) {
        continue;
      }
      parts.push(['S', this.countLines(str.slice(0, i)), this.line]);
      return parts.size = pos + i + end.length, parts;
    case '#':
      if (id = idOrig = (ID.lastIndex = i + 1, ID).exec(str)[1]) {
        id = id.replace(/-+([a-zA-Z0-9$_])/g, __fn);
        if (id === 'this') {
          break;
        }
        try {
          Function("'use strict'; var " + id);
          break;
        } catch (__e) {}
        this.carp("invalid variable interpolation \"" + id + "\"");
      }
      if ('{' !== str.charAt(i + 1)) {
        continue;
      }
      break;
    case '\\':
      ++i;
      // fallthrough
    default:
      continue;
    }
    if (i || nested && !stringified) {
      stringified = parts.push(['S', this.countLines(str.slice(0, i)), this.line]);
    }
    if (id) {
      str = str.slice(delta = i + 1 + idOrig.length);
      parts.push(['TOKENS', nested = [['ID', id, this.line]]]);
    } else {
      clone = (__ref = __clone(exports), __ref.inter = true, __ref.emender = this.emender, __ref);
      nested = clone.tokenize(str.slice(i + 2), {
        line: this.line,
        raw: true
      });
      delta = str.length - clone.rest.length;
      str = clone.rest, this.line = clone.line;
      while (((__ref = nested[0]) != null ? __ref[0] : void 8) === 'NEWLINE') {
        nested.shift();
      }
      if (nested.length) {
        nested.unshift(['(', '(', nested[0][2]]);
        nested.push([')', ')', this.line]);
        parts.push(['TOKENS', nested]);
      }
    }
    pos += delta;
    i = -1;
  }
  this.carp("missing `" + end + "`");
  function __fn(it){
    return it[1].toUpperCase();
  }
};
exports.addInterpolated = function(parts, nlines){
  var tokens, last, left, right, joint, callable, i, t, __ref, __len;
  if (!parts[1]) {
    return this.strnum(nlines(string('"', parts[0][1])));
  }
  tokens = this.tokens, last = this.last;
  __ref = !last.spaced && last[1] === '%'
    ? (--tokens.length, this.last = last = tokens[tokens.length - 1], ['[', ']', [',', ',']])
    : ['(', ')', ['+-', '+']], left = __ref[0], right = __ref[1], joint = __ref[2];
  callable = this.adi();
  tokens.push([left, '"', last[2]]);
  for (i = 0, __len = parts.length; i < __len; ++i) {
    t = parts[i];
    if (t[0] === 'TOKENS') {
      tokens.push.apply(tokens, t[1]);
    } else {
      if (i > 1 && !t[1]) {
        continue;
      }
      tokens.push(['STRNUM', nlines(string('"', t[1])), t[2]]);
    }
    tokens.push(joint.concat(tokens[tokens.length - 1][2]));
  }
  --tokens.length;
  this.token(right, '', callable);
};
exports.strnum = function(it){
  this.token('STRNUM', it, this.adi() || this.last[0] === 'DOT');
};
exports.regex = function(body, flag){
  try {
    RegExp(body);
  } catch (e) {
    this.carp(e.message);
  }
  if (flag === '$') {
    return this.strnum(string('\'', enslash(body)));
  }
  return this.token('LITERAL', "/" + (body || '(?:)') + "/" + this.validate(flag));
};
exports.adi = function(){
  if (this.last.spaced) {
    return;
  }
  if (this.last[0] === '!?') {
    this.last[0] = 'CALL(';
    this.tokens.push([')CALL', '', this.line], ['?', '?', this.line]);
  }
  if (able(this.tokens)) {
    return this.token('DOT', '.');
  }
};
exports.dotcat = function(it){
  if (this.last[1] === '.' || this.adi()) {
    return this.last[1] += it;
  }
};
exports.pair = function(it){
  var wanted, __ref;
  if (!(it === (wanted = (__ref = this.closes)[__ref.length - 1]) || ')CALL' === wanted && it === ')')) {
    if ('DEDENT' !== wanted) {
      this.carp("unmatched `" + it + "`");
    }
    this.dedent((__ref = this.dents)[__ref.length - 1]);
    return this.pair(it);
  }
  this.unline();
  return this.closes.pop();
};
exports.able = function(call){
  return !this.last.spaced && able(this.tokens, null, call);
};
exports.countLines = function(it){
  var pos;
  while (pos = 1 + it.indexOf('\n', pos)) {
    ++this.line;
  }
  return it;
};
exports.forange = function(){
  var __ref, __ref1;
  if (((__ref = (__ref = this.tokens)[__ref.length - 2 - ((__ref1 = this.last[0]) == 'NEWLINE' || __ref1 == 'INDENT')]) != null ? __ref[0] : void 8) === 'FOR') {
    return this.seenFor = false, this.seenFrom = true, this;
  }
};
exports.validate = function(flag){
  var that;
  if (that = flag && /(.).*\1/.exec(flag)) {
    this.carp("duplicate regex flag `" + that[1] + "`");
  }
  return flag;
};
exports.carp = function(it){
  carp(it, this.line);
};
function carp(msg, lno){
  throw SyntaxError(msg + " on line " + (-~lno));
}
function able(tokens, i, call){
  var token, tag;
  i == null && (i = tokens.length);
  tag = (token = tokens[i - 1])[0];
  return (tag == 'ID' || tag == ']' || tag == '?') || (call
    ? token.callable || (tag == ')' || tag == ')CALL' || tag == 'BIOPBP') && token[1]
    : tag == '}' || tag == ')' || tag == ')CALL' || tag == 'STRNUM' || tag == 'LITERAL' || tag == 'WORDS');
}
string = (function(escaped, descape, qs){
  return function(q, body){
    return q + body.replace(escaped, descape).replace(qs[q], '\\$&') + q;
  };
}.call(this, /\\(?:([0-3]?[0-7]{2}|[1-7]|0(?=[89]))|[\\0bfnrtuvx]|[^\n\S]|([\w\W]))?/g, function(it, oct, rest){
  if (oct) {
    return '\\x' + (0x100 + parseInt(oct, 8)).toString(16).slice(1);
  }
  return rest || (it === '\\' ? '\\\\' : it);
}, {
  "'": /'/g,
  '"': /"/g
}));
function heretabs(doc){
  var dent, that, __ref;
  dent = 0 / 0;
  while (that = TABS.exec(doc)) {
    dent <= (__ref = that[0].length - 1) || (dent = __ref);
  }
  return dent;
}
TABS = /\n[^\n\S]*(?!$)/mg;
function detab(str, len){
  if (len) {
    return str.replace(detab[len] || (detab[len] = RegExp('\\n[^\\n\\S]{1,' + len + '}', 'g')), '\n');
  } else {
    return str;
  }
}
function replacer(re, to){
  return function(it){
    return it.replace(re, to);
  };
}
unlines = replacer(/\n[^\n\S]*/g, '');
enlines = replacer(/\n/g, '\\n');
enslash = replacer(/\\/g, '\\\\');
reslash = replacer(/(\\.)|\//g, function(){
  return arguments[1] || '\\/';
});
function lchomp(it){
  return it.slice(1 + it.lastIndexOf('\n', 0));
}
function decode(val, lno){
  if (!isNaN(val)) {
    return [+val];
  }
  val = val.length > 8
    ? 'ng'
    : Function('return' + val)();
  val.length === 1 || carp('bad string in range', lno);
  return [val.charCodeAt(), true];
}
function uxxxx(it){
  return '"\\u' + ('000' + it.toString(16)).slice(-4) + '"';
}
character = typeof JSON == 'undefined' || JSON === null
  ? uxxxx
  : function(it){
    switch (it) {
    case 0x2028:
    case 0x2029:
      return uxxxx(it);
    default:
      return JSON.stringify(String.fromCharCode(it));
    }
  };
function tagPostfixConditionals(tokens){
  var i, token, __len;
  for (i = 0, __len = tokens.length; i < __len; ++i) {
    token = tokens[i];
    if (token[0] === 'IF') {
      detectEnd(tokens, i + 1, ok, go);
    }
  }
  function ok(it){
    var __ref;
    return (__ref = it[0]) == 'NEWLINE' || __ref == 'INDENT';
  }
  function go(it){
    it[0] === 'INDENT' && (it[1] || it.then) || (token[0] = 'POST_IF');
  }
}
function firstPass(tokens){
  var prev, i, token, tag, val, line, parens, j;
  prev = ['NEWLINE', '\n', 0];
  i = 0;
  while (token = tokens[++i]) {
    tag = token[0], val = token[1], line = token[2];
    switch (false) {
    case !(val === '.' && token.spaced && prev.spaced):
      tokens[i] = ['COMPOSE', '<<', line];
      break;
    case !(tag === ')' && prev[1] === '.'):
      tokens.splice(i, 0, ['[', '[', line], ['ID', 'it', line], [']', ']', line]);
      parens = 1;
      LOOP: for (j = i; j >= 0; --j) {
        switch (tokens[j][0]) {
        case ')':
          ++parens;
          break;
        case '(':
          if (--parens === 0) {
            tokens.splice(j + 1, 0, ['PARAM(', '(', line], ['ID', 'it', line], [')PARAM', ')', line], ['->', '->', line]);
            break LOOP;
          }
        }
      }
    }
    prev = token;
    continue;
  }
}
function addImplicitIndentation(tokens){
  var i, token, tag, next, indent, dedent, idx, seenSwitch, __ref;
  i = 0;
  while (token = tokens[++i]) {
    tag = token[0];
    if (tag != '->' && tag != 'THEN' && tag != 'ELSE' && tag != 'DEFAULT' && tag != 'TRY' && tag != 'CATCH' && tag != 'FINALLY' && tag != 'CONST' && tag != 'EXPORT') {
      continue;
    }
    switch (next = tokens[i + 1][0]) {
    case 'IF':
      if (tag === 'ELSE') {
        continue;
      }
      break;
    case 'INDENT':
    case 'THEN':
      if (tag === 'THEN') {
        tokens.splice(i--, 1);
      }
      continue;
    }
    indent = ['INDENT', 0, token[2]];
    dedent = ['DEDENT', 0];
    if (tag === 'THEN') {
      (tokens[i] = indent).then = true;
    } else {
      tokens.splice(++i, 0, indent);
    }
    switch (false) {
    case next != 'DOT' && next != '?' && next != ',' && next != 'PIPE' && next != 'BACKPIPE':
      --i;
      // fallthrough
    case !((next == 'ID' || next == 'STRNUM' || next == 'LITERAL') && ',' === ((__ref = tokens[i + 2]) != null ? __ref[0] : void 8)):
      go(0, i += 2);
      ++i;
      break;
    case !((next == '(' || next == '[' || next == '{') && ',' === ((__ref = tokens[idx = 1 + indexOfPair(tokens, i + 1)]) != null ? __ref[0] : void 8)):
      go(0, idx);
      ++i;
      break;
    default:
      seenSwitch = false;
      detectEnd(tokens, i + 1, ok, go);
    }
  }
  function ok(token, i){
    switch (token[0]) {
    case 'NEWLINE':
      return token[1] !== ';';
    case 'DOT':
    case '?':
    case ',':
    case 'PIPE':
    case 'BACKPIPE':
      return tokens[i - 1].eol;
    case 'ELSE':
      return tag === 'THEN';
    case 'CATCH':
      return tag === 'TRY';
    case 'FINALLY':
      return tag == 'TRY' || tag == 'CATCH' || tag == 'THEN';
    case 'SWITCH':
      return !(seenSwitch = true);
    case 'CASE':
    case 'DEFAULT':
      return !seenSwitch;
    }
  }
  function go(__arg, i){
    var prev;
    prev = tokens[i - 1];
    tokens.splice(prev[0] === ',' ? i - 1 : i, 0, (dedent[2] = prev[2], dedent));
  }
}
function addImplicitParentheses(tokens){
  var i, brackets, token, endi, tpair, tag, prev, seenSwitch, skipBlock, __ref;
  i = 0;
  brackets = [];
  while (token = tokens[++i]) {
    if (token[1] === 'do' && ((__ref = tokens[i + 1]) != null ? __ref[0] : void 8) === 'INDENT') {
      endi = indexOfPair(tokens, i + 1);
      if (tokens[endi + 1][0] === 'NEWLINE' && ((__ref = tokens[endi + 2]) != null ? __ref[0] : void 8) === 'WHILE') {
        token[0] = 'DO';
        tokens[endi + 2].done = true;
        tokens.splice(endi + 1, 1);
      } else {
        (token = tokens[1 + i])[0] = '(';
        (tpair = tokens[endi])[0] = ')';
        token.doblock = true;
        tokens.splice(i, 1);
      }
    }
    tag = token[0];
    prev = tokens[i - 1];
    if (tag === '[') {
      brackets.push(prev[0] === 'DOT');
    }
    if (prev[0] === ']') {
      if (brackets.pop()) {
        prev.index = true;
      } else {
        continue;
      }
    }
    if (!(((__ref = prev[0]) == 'FUNCTION' || __ref == 'LET') || prev.spaced && able(tokens, i, true))) {
      continue;
    }
    if (token.doblock) {
      token[0] = 'CALL(';
      tpair[0] = ')CALL';
      continue;
    }
    if (!(__in(tag, ARG) || !token.spaced && (tag == '+-' || tag == 'CLONE'))) {
      continue;
    }
    if (tag === 'CREMENT') {
      if (token.spaced || !__in((__ref = tokens[i + 1]) != null ? __ref[0] : void 8, CHAIN)) {
        continue;
      }
    }
    skipBlock = seenSwitch = false;
    tokens.splice(i++, 0, ['CALL(', '', token[2]]);
    detectEnd(tokens, i, ok, go);
  }
  function ok(token, i){
    var tag, pre, __ref;
    tag = token[0];
    if (tag == 'POST_IF' || tag == 'PIPE' || tag == 'BACKPIPE') {
      return true;
    }
    if (!skipBlock) {
      if (token.alias && ((__ref = token[1]) == '&&' || __ref == '||') || (tag == 'TO' || tag == 'BY' || tag == 'IMPLEMENTS')) {
        return true;
      }
    }
    pre = tokens[i - 1];
    switch (tag) {
    case 'NEWLINE':
      return pre[0] !== ',';
    case 'DOT':
    case '?':
      return !skipBlock && (pre.spaced || pre[0] === 'DEDENT');
    case 'SWITCH':
      seenSwitch = true;
      // fallthrough
    case 'IF':
    case 'CLASS':
    case 'FUNCTION':
    case 'LET':
    case 'WITH':
      skipBlock = true;
      break;
    case 'CASE':
      if (seenSwitch) {
        skipBlock = true;
      } else {
        return true;
      }
      break;
    case 'INDENT':
      if (skipBlock) {
        return skipBlock = false;
      }
      return (__ref = pre[0]) != '{' && __ref != '[' && __ref != ',' && __ref != '->' && __ref != ':' && __ref != 'ELSE' && __ref != 'ASSIGN' && __ref != 'IMPORT' && __ref != 'UNARY' && __ref != 'DEFAULT' && __ref != 'TRY' && __ref != 'CATCH' && __ref != 'FINALLY' && __ref != 'HURL' && __ref != 'DO';
    case 'WHILE':
      if (token.done) {
        return false;
      }
      // fallthrough
    case 'FOR':
      skipBlock = true;
      return able(tokens, i) || pre[0] === 'CREMENT' || pre[0] === '...' && pre.spaced;
    }
    return false;
  }
  function go(token, i){
    tokens.splice(i, 0, [')CALL', '', tokens[i - 1][2]]);
  }
}
function addImplicitBraces(tokens){
  var stack, i, token, tag, start, paren, index, pre, inline, __ref;
  stack = [];
  i = 0;
  while (token = tokens[++i]) {
    if (':' !== (tag = token[0])) {
      switch (false) {
      case !__in(tag, CLOSERS):
        start = stack.pop();
        break;
      case !__in(tag, OPENERS):
        if (tag === 'INDENT' && tokens[i - 1][0] === '{') {
          tag = '{';
        }
        stack.push([tag, i]);
      }
      continue;
    }
    paren = tokens[i - 1][0] === ')';
    index = paren
      ? start[1]
      : i - 1;
    pre = tokens[index - 1];
    if (!(((__ref = pre[0]) == ':' || __ref == 'ASSIGN' || __ref == 'IMPORT') || ((__ref = stack[stack.length - 1]) != null ? __ref[0] : void 8) !== '{')) {
      continue;
    }
    stack.push(['{']);
    inline = !pre.doblock && ((__ref = pre[0]) != 'NEWLINE' && __ref != 'INDENT');
    while (((__ref = tokens[index - 2]) != null ? __ref[0] : void 8) === 'COMMENT') {
      index -= 2;
    }
    tokens.splice(index, 0, ['{', '{', tokens[index][2]]);
    detectEnd(tokens, ++i + 1, ok, go);
  }
  function ok(token, i){
    var tag, t1, __ref;
    switch (tag = token[0]) {
    case ',':
      break;
    case 'NEWLINE':
      if (inline) {
        return true;
      }
      break;
    case 'DEDENT':
      return true;
    case 'POST_IF':
    case 'FOR':
    case 'WHILE':
      return inline;
    default:
      return false;
    }
    t1 = (__ref = tokens[i + 1]) != null ? __ref[0] : void 8;
    return t1 !== (tag === ',' ? 'NEWLINE' : 'COMMENT') && ':' !== ((__ref = tokens[t1 === '('
      ? 1 + indexOfPair(tokens, i + 1)
      : i + 2]) != null ? __ref[0] : void 8);
  }
  function go(token, i){
    tokens.splice(i, 0, ['}', '', token[2]]);
  }
}
function expandLiterals(tokens){
  var i, token, sig, lno, fromNum, char, toNum, tochar, byNum, byp, ts, enc, add, n, word, that, __ref, __i, __len;
  i = 0;
  while (token = tokens[++i]) {
    switch (token[0]) {
    case 'STRNUM':
      if (~'-+'.indexOf(sig = token[1].charAt(0))) {
        token[1] = token[1].slice(1);
        tokens.splice(i++, 0, ['+-', sig, token[2]]);
      }
      if (token.callable) {
        continue;
      }
      break;
    case 'RANGE':
      lno = token[2];
      if (tokens[i - 1][0] === '[' && tokens[i + 1][0] === 'STRNUM' && (tokens[i + 2][0] === ']' || (tokens[i + 2][0] === 'RANGE_BY' && ((__ref = tokens[i + 3]) != null ? __ref[0] : void 8) === 'STRNUM' && ((__ref = tokens[i + 4]) != null ? __ref[0] : void 8) === ']'))) {
        __ref = decode(token[1], lno), fromNum = __ref[0], char = __ref[1];
        __ref = decode(tokens[i + 1][1], lno), toNum = __ref[0], tochar = __ref[1];
        if (char ^ tochar) {
          carp('bad "to" in range', lno);
        }
        byNum = 1;
        if (byp = ((__ref = tokens[i + 2]) != null ? __ref[0] : void 8) === 'RANGE_BY') {
          if (!(byNum = +((__ref = tokens[i + 3]) != null ? __ref[1] : void 8))) {
            carp('bad "by" in range', tokens[i + 2][2]);
          }
        }
        ts = [];
        enc = char ? character : String;
        add = __fn;
        if (token.op === 'to') {
          for (n = fromNum; byNum < 0 ? n >= toNum : n <= toNum; n += byNum) {
            add();
          }
        } else {
          for (n = fromNum; byNum < 0 ? n > toNum : n < toNum; n += byNum) {
            add();
          }
        }
        ts.pop() || carp('empty range', lno);
        tokens.splice.apply(tokens, [i, 2 + 2 * byp].concat(__slice.call(ts)));
        i += ts.length - 1;
      } else {
        token[0] = 'STRNUM';
        if (((__ref = tokens[i + 2]) != null ? __ref[0] : void 8) === 'RANGE_BY') {
          tokens.splice(i + 2, 1, ['BY', 'by', lno]);
        }
        tokens.splice(i + 1, 0, ['TO', token.op, lno]);
      }
      break;
    case 'WORDS':
      ts = [['[', '[', lno = token[2]]];
      for (__i = 0, __len = (__ref = token[1].match(/\S+/g) || '').length; __i < __len; ++__i) {
        word = __ref[__i];
        ts.push(['STRNUM', string('\'', word), lno], [',', ',', lno]);
      }
      tokens.splice.apply(tokens, [i, 1].concat(__slice.call(ts), [[']', ']', lno]]));
      i += ts.length;
      break;
    case 'INDENT':
      if (that = tokens[i - 1]) {
        if (that[1] === 'new') {
          tokens.splice(i++, 0, ['PARAM(', '', token[2]], [')PARAM', '', token[2]], ['->', '', token[2]]);
        } else if ((__ref = that[0]) == 'FUNCTION' || __ref == 'LET') {
          tokens.splice(i, 0, ['CALL(', '', token[2]], [')CALL', '', token[2]]);
          i += 2;
        }
      }
      continue;
    case 'LITERAL':
    case '}':
    case '!?':
      break;
    case ')':
    case ')CALL':
      if (token[1]) {
        continue;
      }
      break;
    case ']':
      if (token.index) {
        continue;
      }
      break;
    case 'CREMENT':
      if (!able(tokens, i)) {
        continue;
      }
      break;
    case 'BIOP':
      if (!token.spaced && ((__ref = token[1]) == '+' || __ref == '-') && tokens[i + 1][0] !== ')') {
        tokens[i][0] = '+-';
      }
      continue;
    default:
      continue;
    }
    if (token.spaced && __in(tokens[i + 1][0], ARG)) {
      tokens.splice(++i, 0, [',', ',', token[2]]);
    }
  }
  function __fn(){
    if (0x10000 < ts.push(['STRNUM', enc(n), lno], [',', ',', lno])) {
      carp('range limit exceeded', lno);
    }
  }
}
function detectEnd(tokens, i, ok, go){
  var levels, token, tag;
  levels = 0;
  for (; token = tokens[i]; ++i) {
    if (!levels && ok(token, i)) {
      return go(token, i);
    }
    tag = token[0];
    if (0 > (levels += __in(tag, OPENERS) || -__in(tag, CLOSERS))) {
      return go(token, i);
    }
  }
}
function indexOfPair(tokens, i){
  var level, start, end, that;
  level = 1;
  end = INVERSES[start = tokens[i][0]];
  while (that = tokens[++i]) {
    switch (that[0]) {
    case start:
      ++level;
      break;
    case end:
      if (!--level) {
        return i;
      }
    }
  }
  return -1;
}
KEYWORDS_SHARED = ['true', 'false', 'null', 'this', 'void', 'super', 'return', 'throw', 'break', 'continue', 'if', 'else', 'for', 'while', 'switch', 'case', 'default', 'try', 'catch', 'finally', 'function', 'class', 'extends', 'implements', 'new', 'do', 'delete', 'typeof', 'in', 'instanceof', 'let', 'with', 'var', 'const', 'import', 'export', 'debugger'];
KEYWORDS_UNUSED = ['enum', 'interface', 'package', 'private', 'protected', 'public', 'static', 'yield'];
KEYWORDS = KEYWORDS_SHARED.concat(KEYWORDS_UNUSED);
ID = /((?!\d)(?:(?!\s)[\w$\xAA-\uFFDC])+((\-[a-zA-Z]+)?)*)([^\n\S]*:(?![:=]))?|/g;
SYMBOL = /[-+*\/^]=|%%?=|::?=|\.{1,3}|&&&|\|\|\||\^\^\^|\^\^|\+\+\+|-->|~~>|<--|<~~|([-+&|:])\1|%%|&|\([^\n\S]*\)|[-~]>|<[-~]|[!=]==?|@@|<\[(?:[\s\S]*?\]>)?|<<<<<|>>>>>?|<<<<?|<\||<<|>>|[<>]\??=?|!\?|\|>|\||=>|\*\*=?|\^|`|[^\s#]?/g;
SPACE = /[^\n\S]*(?:#.*)?/g;
MULTIDENT = /(?:\s*#.*)*(?:\n([^\n\S]*))+/g;
SIMPLESTR = /'[^\\']*(?:\\[\s\S][^\\']*)*'|/g;
BSTOKEN = /\\(?:(\S[^\s,;)}\]]*)|\s*)/g;
NUMBER = /0x[\dA-Fa-f][\dA-Fa-f_]*|(\d*)~([\dA-Za-z]\w*)|((\d[\d_]*)(\.\d[\d_]*)?(?:e[+-]?\d[\d_]*)?)[$\w]*|/g;
NUMBER_OMIT = /_+/g;
REGEX = /\/([^[\/\n\\]*(?:(?:\\.|\[[^\]\n\\]*(?:\\.[^\]\n\\]*)*\])[^[\/\n\\]*)*)\/([gimy]{1,4}|\$?)|/g;
HEREGEX_OMIT = /\s+(?:#.*)?/g;
LASTDENT = /\n[^\n\S]*$/;
INLINEDENT = /[^\n\S]*[^#\s]?/g;
NONASCII = /[\x80-\uFFFF]/;
OPENERS = ['(', '[', '{', 'CALL(', 'PARAM(', 'INDENT'];
CLOSERS = [')', ']', '}', ')CALL', ')PARAM', 'DEDENT'];
INVERSES = new function(){
  var i, o, __ref, __len;
  for (i = 0, __len = (__ref = OPENERS).length; i < __len; ++i) {
    o = __ref[i];
    this[this[o] = CLOSERS[i]] = o;
  }
};
CHAIN = ['(', '{', '[', 'ID', 'STRNUM', 'LITERAL', 'LET', 'WITH', 'WORDS'];
ARG = CHAIN.concat(['...', 'UNARY', 'CREMENT', 'PARAM(', 'FUNCTION', 'IF', 'SWITCH', 'TRY', 'CLASS', 'RANGE', 'LABEL', 'DO', 'BIOPBP']);
function __clone(it){
  function fun(){} fun.prototype = it;
  return new fun;
}
function __in(x, arr){
  var i = 0, l = arr.length >>> 0;
  while (i < l) if (x === arr[i++]) return true;
  return false;
}

/***/ },
/* 4 */
/***/ function(module, exports) {

exports.parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Chain":3,"ID":4,"Parenthetical":5,"List":6,"STRNUM":7,"LITERAL":8,"DOT":9,"Key":10,"CALL(":11,"ArgList":12,"OptComma":13,")CALL":14,"?":15,"LET":16,"Block":17,"WITH":18,"Expression":19,"[":20,"LoopHeads":21,"]":22,"{":23,"}":24,"(":25,"BIOP":26,")":27,"BIOPR":28,"BIOPBP":29,"BIOPP":30,"PARAM(":31,")PARAM":32,"UNARY":33,"CREMENT":34,"BACKTICK":35,"Properties":36,"LABEL":37,"KeyBase":38,"Arg":39,",":40,"NEWLINE":41,"INDENT":42,"DEDENT":43,"...":44,"Lines":45,"Line":46,"<-":47,"DECL":48,"Exprs":49,"COMMENT":50,"CLONEPORT":51,"ASSIGN":52,"IMPORT":53,"+-":54,"CLONE":55,"COMPARE":56,"LOGIC":57,"MATH":58,"POWER":59,"SHIFT":60,"BITWISE":61,"CONCAT":62,"COMPOSE":63,"RELATION":64,"PIPE":65,"BACKPIPE":66,"!?":67,"->":68,"FUNCTION":69,"IfBlock":70,"ELSE":71,"POST_IF":72,"LoopHead":73,"DO":74,"WHILE":75,"HURL":76,"JUMP":77,"SWITCH":78,"Cases":79,"DEFAULT":80,"TRY":81,"CATCH":82,"FINALLY":83,"CLASS":84,"OptExtends":85,"OptImplements":86,"EXTENDS":87,"TO":88,"BY":89,"KeyValue":90,"Property":91,":":92,"Body":93,"IF":94,"FOR":95,"IN":96,"CASE":97,"OF":98,"OWN":99,"FROM":100,"IMPLEMENTS":101,"Root":102,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ID",7:"STRNUM",8:"LITERAL",9:"DOT",11:"CALL(",14:")CALL",15:"?",16:"LET",18:"WITH",20:"[",22:"]",23:"{",24:"}",25:"(",26:"BIOP",27:")",28:"BIOPR",29:"BIOPBP",30:"BIOPP",31:"PARAM(",32:")PARAM",33:"UNARY",34:"CREMENT",35:"BACKTICK",37:"LABEL",40:",",41:"NEWLINE",42:"INDENT",43:"DEDENT",44:"...",47:"<-",48:"DECL",50:"COMMENT",51:"CLONEPORT",52:"ASSIGN",53:"IMPORT",54:"+-",55:"CLONE",56:"COMPARE",57:"LOGIC",58:"MATH",59:"POWER",60:"SHIFT",61:"BITWISE",62:"CONCAT",63:"COMPOSE",64:"RELATION",65:"PIPE",66:"BACKPIPE",67:"!?",68:"->",69:"FUNCTION",71:"ELSE",72:"POST_IF",74:"DO",75:"WHILE",76:"HURL",77:"JUMP",78:"SWITCH",80:"DEFAULT",81:"TRY",82:"CATCH",83:"FINALLY",84:"CLASS",87:"EXTENDS",88:"TO",89:"BY",92:":",94:"IF",95:"FOR",96:"IN",97:"CASE",98:"OF",99:"OWN",100:"FROM",101:"IMPLEMENTS"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[3,1],[3,3],[3,3],[3,5],[3,2],[3,6],[3,3],[3,4],[3,7],[3,3],[3,4],[3,4],[3,3],[3,4],[3,4],[3,3],[3,7],[3,3],[3,7],[3,3],[3,3],[3,5],[3,6],[3,6],[6,4],[6,4],[6,5],[6,5],[10,1],[10,1],[38,1],[38,1],[12,0],[12,1],[12,3],[12,4],[12,6],[39,1],[39,2],[39,1],[13,0],[13,1],[45,0],[45,1],[45,3],[45,2],[46,1],[46,6],[46,2],[46,5],[46,1],[46,1],[17,3],[19,3],[19,3],[19,5],[19,1],[19,3],[19,6],[19,3],[19,6],[19,2],[19,2],[19,3],[19,3],[19,3],[19,2],[19,2],[19,2],[19,5],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,6],[19,6],[19,1],[19,3],[19,3],[19,2],[19,4],[19,4],[19,2],[19,5],[19,1],[19,1],[19,2],[19,3],[19,5],[19,5],[19,2],[19,4],[19,4],[19,2],[19,2],[19,4],[19,6],[19,4],[19,5],[19,4],[19,3],[19,2],[19,2],[19,5],[19,7],[49,1],[49,3],[90,1],[90,1],[90,3],[90,3],[90,5],[90,5],[91,3],[91,6],[91,1],[91,3],[91,2],[91,2],[91,2],[91,1],[36,0],[36,1],[36,3],[36,4],[36,4],[5,3],[93,1],[93,1],[93,3],[70,3],[70,5],[73,4],[73,6],[73,6],[73,8],[73,4],[73,6],[73,6],[73,8],[73,5],[73,7],[73,7],[73,9],[73,6],[73,8],[73,8],[73,10],[73,10],[73,2],[73,4],[73,4],[73,6],[21,1],[21,2],[79,3],[79,4],[85,2],[85,0],[86,2],[86,0],[102,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:this.$ = yy.Chain(yy.L(yylineno, yy.Var($$[$0])));
break;
case 2:
case 3:this.$ = yy.Chain($$[$0]);
break;
case 4:
case 5:this.$ = yy.Chain(yy.L(yylineno, yy.Literal($$[$0])));
break;
case 6:
case 7:this.$ = $$[$0-2].add(yy.Index($$[$0], $$[$0-1], true));
break;
case 8:this.$ = $$[$0-4].add(yy.Call($$[$0-2]));
break;
case 9:this.$ = yy.Chain(yy.Existence($$[$0-1].unwrap()));
break;
case 10:this.$ = yy.Chain(yy.Call['let']($$[$0-3], $$[$0]));
break;
case 11:this.$ = yy.Chain(yy.Call.block(yy.Fun([], $$[$0]), [$$[$0-1]], '.call'));
break;
case 12:this.$ = yy.Chain(new yy.Parens($$[$0-1][0].makeComprehension($$[$0-2], $$[$0-1].slice(1))));
break;
case 13:this.$ = yy.Chain(new yy.Parens($$[$0-1][0].addObjComp().makeComprehension(yy.L(yylineno, yy.Arr($$[$0-4])), $$[$0-1].slice(1))));
break;
case 14:this.$ = yy.Chain(yy.Binary($$[$0-1]));
break;
case 15:this.$ = yy.Chain(yy.Binary($$[$0-2], void 8, $$[$0-1]));
break;
case 16:this.$ = yy.Chain(yy.Binary($$[$0-1], $$[$0-2]));
break;
case 17:this.$ = yy.Chain('!' === $$[$0-1].charAt(0)
        ? yy.Binary($$[$0-1].slice(1)).invertIt()
        : yy.Binary($$[$0-1]));
break;
case 18:this.$ = yy.Chain('!' === $$[$0-2].charAt(0)
        ? yy.Binary($$[$0-2].slice(1), void 8, $$[$0-1]).invertIt()
        : yy.Binary($$[$0-2], void 8, $$[$0-1]));
break;
case 19:this.$ = yy.Chain('!' === $$[$0-1].charAt(0)
        ? yy.Binary($$[$0-1].slice(1), $$[$0-2]).invertIt()
        : yy.Binary($$[$0-1], $$[$0-2]));
break;
case 20:this.$ = yy.Chain(yy.Binary($$[$0-1]));
break;
case 21:this.$ = yy.Chain(yy.Binary($$[$0-5], void 8, $$[$0-3]));
break;
case 22:this.$ = yy.Chain(yy.Binary($$[$0-1]));
break;
case 23:this.$ = yy.Chain(yy.Binary($$[$0-1], $$[$0-4]));
break;
case 24:
case 25:this.$ = yy.Chain(yy.Unary($$[$0-1]));
break;
case 26:this.$ = yy.Chain($$[$0-2]);
break;
case 27:this.$ = yy.Chain($$[$0-2].add(yy.Call([$$[$0-4]])));
break;
case 28:this.$ = yy.Chain(yy.Chain(yy.Var('__flip')).add(yy.Call([$$[$0-3]]))).flipIt().add(yy.Call([$$[$0-1]]));
break;
case 29:this.$ = yy.L(yylineno, yy.Arr($$[$0-2]));
break;
case 30:this.$ = yy.L(yylineno, yy.Obj($$[$0-2]));
break;
case 31:this.$ = yy.L(yylineno, yy.Arr($$[$0-3])).named($$[$0]);
break;
case 32:this.$ = yy.L(yylineno, yy.Obj($$[$0-3])).named($$[$0]);
break;
case 35:this.$ = yy.L(yylineno, yy.Key($$[$0]));
break;
case 36:this.$ = yy.L(yylineno, yy.Literal($$[$0]));
break;
case 37:this.$ = [];
break;
case 38:this.$ = [$$[$0]];
break;
case 39:this.$ = $$[$0-2].concat($$[$0]);
break;
case 40:this.$ = $$[$0-3].concat($$[$0]);
break;
case 41:this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 43:this.$ = yy.Splat($$[$0]);
break;
case 44:this.$ = yy.Splat(yy.L(yylineno, yy.Arr()), true);
break;
case 47:this.$ = yy.Block();
break;
case 48:this.$ = yy.Block($$[$0]);
break;
case 49:this.$ = $$[$0-2].add($$[$0]);
break;
case 52:this.$ = yy.Call.back($$[$0-4], $$[$0], $$[$0-1].charAt(1) === '~', $$[$0-1].length === 3);
break;
case 53:this.$ = yy.Decl[$$[$0-1]]($$[$0]);
break;
case 54:this.$ = yy.Decl[$$[$0-4]]($$[$0-2]);
break;
case 55:this.$ = yy.L(yylineno, yy.JS($$[$0], true, true));
break;
case 56:this.$ = yy.L(yylineno, yy.Throw(yy.JS("Error('unimplemented')")));
break;
case 57:this.$ = $$[$0-1].chomp();
break;
case 58:this.$ = yy.Import(yy.Unary('^^', $$[$0-2], {
        prec: 'yy.UNARY'
      }), $$[$0], false);
break;
case 59:this.$ = yy.Import(yy.Unary('^^', $$[$0-2], {
        prec: 'yy.UNARY'
      }), $$[$0].unwrap(), false);
break;
case 60:this.$ = $$[$0-2].add(yy.Call([$$[$0-4], $$[$0]]));
break;
case 61:this.$ = $$[$0].unwrap();
break;
case 62:this.$ = yy.Assign($$[$0-2].unwrap(), $$[$0], $$[$0-1]);
break;
case 63:this.$ = yy.Assign($$[$0-5].unwrap(), yy.Arr.maybe($$[$0-2]), $$[$0-4]);
break;
case 64:this.$ = yy.Import($$[$0-2], $$[$0], $$[$0-1] === '<<<<');
break;
case 65:this.$ = yy.Import($$[$0-5], yy.Arr.maybe($$[$0-2]), $$[$0-4] === '<<<<');
break;
case 66:this.$ = yy.Unary($$[$0-1], $$[$0].unwrap());
break;
case 67:this.$ = yy.Unary($$[$0], $$[$0-1].unwrap(), true);
break;
case 68:
case 69:
case 70:this.$ = yy.Assign($$[$0].unwrap(), [$$[$0-2]], $$[$0-1]);
break;
case 71:
case 72:
case 73:this.$ = yy.Unary($$[$0-1], $$[$0]);
break;
case 74:this.$ = yy.Unary($$[$0-4], yy.Arr.maybe($$[$0-2]));
break;
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
case 81:
case 82:
case 83:this.$ = yy.Binary($$[$0-1], $$[$0-2], $$[$0]);
break;
case 84:this.$ = '!' === $$[$0-1].charAt(0)
        ? yy.Binary($$[$0-1].slice(1), $$[$0-2], $$[$0]).invert()
        : yy.Binary($$[$0-1], $$[$0-2], $$[$0]);
break;
case 85:this.$ = yy.Block($$[$0-2]).pipe($$[$0], $$[$0-1]);
break;
case 86:this.$ = yy.Block($$[$0-2]).pipe([$$[$0]], $$[$0-1]);
break;
case 87:this.$ = yy.Existence($$[$0-1].unwrap(), true);
break;
case 88:this.$ = yy.L(yylineno, yy.Fun($$[$0-4], $$[$0], $$[$0-1].charAt(0) === '~', $$[$0-1].length === 3));
break;
case 89:this.$ = yy.L(yylineno, yy.Fun($$[$0-3], $$[$0]).named($$[$0-5]));
break;
case 91:this.$ = $$[$0-2].addElse($$[$0]);
break;
case 92:this.$ = yy.If($$[$0], $$[$0-2], $$[$0-1] === 'unless');
break;
case 93:this.$ = $$[$0-1].addBody($$[$0]);
break;
case 94:this.$ = $$[$0-3].addBody($$[$0-2]).addElse($$[$0]);
break;
case 95:this.$ = new yy.While($$[$0], $$[$0-1] === 'until', true).addBody($$[$0-2]);
break;
case 96:this.$ = yy.Jump[$$[$0-1]]($$[$0]);
break;
case 97:this.$ = yy.Jump[$$[$0-4]](yy.Arr.maybe($$[$0-2]));
break;
case 98:this.$ = yy.L(yylineno, yy.Jump[$$[$0]]());
break;
case 99:this.$ = yy.L(yylineno, new yy.Jump($$[$0]));
break;
case 100:this.$ = yy.L(yylineno, new yy.Jump($$[$0-1], $$[$0]));
break;
case 101:this.$ = new yy.Switch($$[$0-1], $$[$0]);
break;
case 102:
case 103:this.$ = new yy.Switch($$[$0-3], $$[$0-2], $$[$0]);
break;
case 104:this.$ = new yy.Switch(null, $$[$0]);
break;
case 105:
case 106:this.$ = new yy.Switch(null, $$[$0-2], $$[$0]);
break;
case 107:this.$ = new yy.Switch(null, [], $$[$0]);
break;
case 108:this.$ = new yy.Try($$[$0]);
break;
case 109:this.$ = new yy.Try($$[$0-2], $$[$0-1], $$[$0]);
break;
case 110:this.$ = new yy.Try($$[$0-4], $$[$0-3], $$[$0-2], $$[$0]);
break;
case 111:this.$ = new yy.Try($$[$0-2], null, null, $$[$0]);
break;
case 112:this.$ = new yy.Class($$[$0-3].unwrap(), $$[$0-2], $$[$0-1], $$[$0]);
break;
case 113:this.$ = new yy.Class(null, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 114:this.$ = yy.Util.Extends($$[$0-2].unwrap(), $$[$0]);
break;
case 115:
case 116:this.$ = new yy.Label($$[$0-1], $$[$0]);
break;
case 117:this.$ = new yy.Parens(new yy.For({
        from: $$[$0-3],
        op: $$[$0-2],
        to: $$[$0-1]
      }));
break;
case 118:this.$ = new yy.Parens(new yy.For({
        from: $$[$0-5],
        op: $$[$0-4],
        to: $$[$0-3],
        step: $$[$0-1]
      }));
break;
case 119:this.$ = [$$[$0]];
break;
case 120:this.$ = $$[$0-2].concat($$[$0]);
break;
case 122:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0], $$[$0] != 'arguments' && $$[$0] != 'eval')), yy.L(yylineno, yy.Literal($$[$0])));
break;
case 123:this.$ = yy.Prop($$[$0], yy.Chain($$[$0-2], [yy.Index($$[$0], $$[$0-1])]));
break;
case 124:this.$ = yy.Prop($$[$0], yy.Chain(yy.L(yylineno, yy.Literal($$[$0-2])), [yy.Index($$[$0], $$[$0-1])]));
break;
case 125:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0])), yy.L(yylineno, yy.Obj($$[$0-3]).named($$[$0])));
break;
case 126:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0])), yy.L(yylineno, yy.Arr($$[$0-3]).named($$[$0])));
break;
case 127:this.$ = yy.Prop($$[$0-2], $$[$0]);
break;
case 128:this.$ = yy.Prop($$[$0-5], yy.Arr.maybe($$[$0-2]));
break;
case 130:this.$ = yy.Binary($$[$0-1], $$[$0-2], $$[$0]);
break;
case 131:this.$ = yy.Prop($$[$0].maybeKey(), yy.L(yylineno, yy.Literal($$[$0-1] === '+')));
break;
case 132:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0], true)), yy.L(yylineno, yy.Literal($$[$0-1] === '+')));
break;
case 133:this.$ = yy.Splat($$[$0]);
break;
case 134:this.$ = yy.L(yylineno, yy.JS($$[$0], true, true));
break;
case 135:this.$ = [];
break;
case 136:this.$ = [$$[$0]];
break;
case 137:this.$ = $$[$0-2].concat($$[$0]);
break;
case 138:this.$ = $$[$0-3].concat($$[$0]);
break;
case 139:this.$ = $$[$0-2];
break;
case 140:this.$ = yy.Parens($$[$0-1].chomp().unwrap(), false, $$[$0-2] === '"');
break;
case 143:this.$ = $$[$0-2].add($$[$0]);
break;
case 144:this.$ = yy.If($$[$0-1], $$[$0], $$[$0-2] === 'unless');
break;
case 145:this.$ = $$[$0-4].addElse(yy.If($$[$0-1], $$[$0], $$[$0-2] === 'unless'));
break;
case 146:this.$ = new yy.For({
        item: $$[$0-2].unwrap(),
        index: $$[$0-1],
        source: $$[$0]
      });
break;
case 147:this.$ = new yy.For({
        item: $$[$0-4].unwrap(),
        index: $$[$0-3],
        source: $$[$0-2],
        guard: $$[$0]
      });
break;
case 148:this.$ = new yy.For({
        item: $$[$0-4].unwrap(),
        index: $$[$0-3],
        source: $$[$0-2],
        step: $$[$0]
      });
break;
case 149:this.$ = new yy.For({
        item: $$[$0-6].unwrap(),
        index: $$[$0-5],
        source: $$[$0-4],
        step: $$[$0-2],
        guard: $$[$0]
      });
break;
case 150:this.$ = new yy.For({
        object: true,
        index: $$[$0-2],
        source: $$[$0]
      });
break;
case 151:this.$ = new yy.For({
        object: true,
        index: $$[$0-4],
        source: $$[$0-2],
        guard: $$[$0]
      });
break;
case 152:this.$ = new yy.For({
        object: true,
        index: $$[$0-4],
        item: $$[$0-2].unwrap(),
        source: $$[$0]
      });
break;
case 153:this.$ = new yy.For({
        object: true,
        index: $$[$0-6],
        item: $$[$0-4].unwrap(),
        source: $$[$0-2],
        guard: $$[$0]
      });
break;
case 154:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-2],
        source: $$[$0]
      });
break;
case 155:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-4],
        source: $$[$0-2],
        guard: $$[$01]
      });
break;
case 156:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-4],
        item: $$[$0-2].unwrap(),
        source: $$[$0]
      });
break;
case 157:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-6],
        item: $$[$0-4].unwrap(),
        source: $$[$0-2],
        guard: $$[$0-1]
      });
break;
case 158:this.$ = new yy.For({
        index: $$[$0-4],
        from: $$[$0-2],
        op: $$[$0-1],
        to: $$[$0]
      });
break;
case 159:this.$ = new yy.For({
        index: $$[$0-6],
        from: $$[$0-4],
        op: $$[$0-3],
        to: $$[$0-2],
        guard: $$[$0]
      });
break;
case 160:this.$ = new yy.For({
        index: $$[$0-6],
        from: $$[$0-4],
        op: $$[$0-3],
        to: $$[$0-2],
        step: $$[$0]
      });
break;
case 161:this.$ = new yy.For({
        index: $$[$0-8],
        from: $$[$0-6],
        op: $$[$0-5],
        to: $$[$0-4],
        step: $$[$0-2],
        guard: $$[$0]
      });
break;
case 162:this.$ = new yy.For({
        index: $$[$0-8],
        from: $$[$0-6],
        op: $$[$0-5],
        to: $$[$0-4],
        guard: $$[$0-2],
        step: $$[$0]
      });
break;
case 163:this.$ = new yy.While($$[$0], $$[$0-1] === 'until');
break;
case 164:this.$ = new yy.While($$[$0-2], $$[$0-3] === 'until').addGuard($$[$0]);
break;
case 165:this.$ = new yy.While($$[$0-2], $$[$0-3] === 'until', $$[$0]);
break;
case 166:this.$ = new yy.While($$[$0-4], $$[$0-5] === 'until', $$[$0-2]).addGuard($$[$0]);
break;
case 167:this.$ = [$$[$0]];
break;
case 168:this.$ = $$[$0-1].concat($$[$0]);
break;
case 169:this.$ = [new yy.Case($$[$0-1], $$[$0])];
break;
case 170:this.$ = $$[$0-3].concat(new yy.Case($$[$0-1], $$[$0]));
break;
case 171:this.$ = $$[$0];
break;
case 172:this.$ = null;
break;
case 173:this.$ = $$[$0];
break;
case 174:this.$ = null;
break;
case 175:return this.$
}
},
table: [{1:[2,47],3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:4,18:[1,34],19:7,20:[1,27],23:[1,35],25:[1,36],31:[1,8],33:[1,14],34:[1,13],37:[1,26],41:[2,47],42:[1,6],44:[1,11],45:3,46:5,48:[1,9],50:[1,10],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],93:2,94:[1,37],95:[1,38],102:1},{1:[3]},{1:[2,175]},{1:[2,141],27:[2,141],41:[1,40]},{1:[2,142],27:[2,142],41:[1,41]},{1:[2,48],27:[2,48],41:[2,48],43:[2,48]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:7,20:[1,27],23:[1,35],25:[1,36],31:[1,8],33:[1,14],34:[1,13],37:[1,26],41:[2,47],43:[2,47],44:[1,11],45:42,46:5,48:[1,9],50:[1,10],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,51],27:[2,51],35:[1,43],41:[2,51],43:[2,51],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:58,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],32:[2,37],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:65,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],42:[1,64],49:63,54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,55],27:[2,55],41:[2,55],43:[2,55]},{1:[2,56],27:[2,56],41:[2,56],43:[2,56]},{1:[2,61],9:[1,71],11:[1,72],14:[2,61],15:[1,73],22:[2,61],24:[2,61],26:[2,61],27:[2,61],28:[2,61],32:[2,61],34:[1,68],35:[2,61],40:[2,61],41:[2,61],42:[2,61],43:[2,61],51:[1,66],52:[1,67],53:[2,61],54:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[1,69],72:[2,61],75:[2,61],87:[1,70],88:[2,61],89:[2,61],95:[2,61],97:[2,61],101:[2,61]},{3:74,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:77,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],42:[1,78],52:[1,76],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:80,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],52:[1,79],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:82,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],52:[1,81],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{11:[1,83]},{1:[2,90],14:[2,90],22:[2,90],24:[2,90],26:[2,90],27:[2,90],28:[2,90],32:[2,90],35:[2,90],40:[2,90],41:[2,90],42:[2,90],43:[2,90],53:[2,90],54:[2,90],56:[2,90],57:[2,90],58:[2,90],59:[2,90],60:[2,90],61:[2,90],62:[2,90],63:[2,90],64:[2,90],65:[2,90],66:[2,90],71:[1,84],72:[2,90],75:[2,90],88:[2,90],89:[2,90],95:[2,90],97:[2,90],101:[2,90]},{17:85,42:[1,6]},{17:86,42:[1,6]},{1:[2,98],3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],14:[2,98],16:[1,33],18:[1,34],19:87,20:[1,27],22:[2,98],23:[1,35],24:[2,98],25:[1,36],26:[2,98],27:[2,98],28:[2,98],31:[1,62],32:[2,98],33:[1,14],34:[1,13],35:[2,98],37:[1,26],40:[2,98],41:[2,98],42:[1,88],43:[2,98],53:[2,98],54:[1,15],55:[1,16],56:[2,98],57:[2,98],58:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],63:[2,98],64:[2,98],65:[2,98],66:[2,98],69:[1,17],70:18,72:[2,98],73:19,74:[1,20],75:[2,98],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],88:[2,98],89:[2,98],94:[1,37],95:[2,98],97:[2,98],101:[2,98]},{1:[2,99],4:[1,89],14:[2,99],22:[2,99],24:[2,99],26:[2,99],27:[2,99],28:[2,99],32:[2,99],35:[2,99],40:[2,99],41:[2,99],42:[2,99],43:[2,99],53:[2,99],54:[2,99],56:[2,99],57:[2,99],58:[2,99],59:[2,99],60:[2,99],61:[2,99],62:[2,99],63:[2,99],64:[2,99],65:[2,99],66:[2,99],72:[2,99],75:[2,99],88:[2,99],89:[2,99],95:[2,99],97:[2,99],101:[2,99]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:92,18:[1,34],19:90,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],42:[1,6],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],79:91,81:[1,24],84:[1,25],94:[1,37],95:[1,38],97:[1,93]},{17:94,42:[1,6]},{3:95,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36],42:[2,172],85:96,87:[1,97],101:[2,172]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:99,18:[1,34],19:98,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],42:[1,6],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:101,16:[1,33],18:[1,34],19:100,20:[1,27],22:[2,37],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,1],9:[2,1],11:[2,1],14:[2,1],15:[2,1],22:[2,1],24:[2,1],26:[2,1],27:[2,1],28:[2,1],32:[2,1],34:[2,1],35:[2,1],40:[2,1],41:[2,1],42:[2,1],43:[2,1],51:[2,1],52:[2,1],53:[2,1],54:[2,1],56:[2,1],57:[2,1],58:[2,1],59:[2,1],60:[2,1],61:[2,1],62:[2,1],63:[2,1],64:[2,1],65:[2,1],66:[2,1],67:[2,1],72:[2,1],75:[2,1],87:[2,1],88:[2,1],89:[2,1],95:[2,1],97:[2,1],98:[2,1],101:[2,1]},{1:[2,2],9:[2,2],11:[2,2],14:[2,2],15:[2,2],22:[2,2],24:[2,2],26:[2,2],27:[2,2],28:[2,2],32:[2,2],34:[2,2],35:[2,2],40:[2,2],41:[2,2],42:[2,2],43:[2,2],51:[2,2],52:[2,2],53:[2,2],54:[2,2],56:[2,2],57:[2,2],58:[2,2],59:[2,2],60:[2,2],61:[2,2],62:[2,2],63:[2,2],64:[2,2],65:[2,2],66:[2,2],67:[2,2],72:[2,2],75:[2,2],87:[2,2],88:[2,2],89:[2,2],95:[2,2],96:[2,2],97:[2,2],98:[2,2],101:[2,2]},{1:[2,3],9:[2,3],11:[2,3],14:[2,3],15:[2,3],22:[2,3],24:[2,3],26:[2,3],27:[2,3],28:[2,3],32:[2,3],34:[2,3],35:[2,3],40:[2,3],41:[2,3],42:[2,3],43:[2,3],51:[2,3],52:[2,3],53:[2,3],54:[2,3],56:[2,3],57:[2,3],58:[2,3],59:[2,3],60:[2,3],61:[2,3],62:[2,3],63:[2,3],64:[2,3],65:[2,3],66:[2,3],67:[2,3],72:[2,3],75:[2,3],87:[2,3],88:[2,3],89:[2,3],95:[2,3],96:[2,3],97:[2,3],98:[2,3],101:[2,3]},{1:[2,4],9:[2,4],11:[2,4],14:[2,4],15:[2,4],22:[2,4],24:[2,4],26:[2,4],27:[2,4],28:[2,4],32:[2,4],34:[2,4],35:[2,4],40:[2,4],41:[2,4],42:[2,4],43:[2,4],51:[2,4],52:[2,4],53:[2,4],54:[2,4],56:[2,4],57:[2,4],58:[2,4],59:[2,4],60:[2,4],61:[2,4],62:[2,4],63:[2,4],64:[2,4],65:[2,4],66:[2,4],67:[2,4],72:[2,4],75:[2,4],87:[2,4],88:[2,4],89:[2,4],95:[2,4],96:[2,4],97:[2,4],98:[2,4],101:[2,4]},{1:[2,5],9:[2,5],11:[2,5],14:[2,5],15:[2,5],22:[2,5],24:[2,5],26:[2,5],27:[2,5],28:[2,5],32:[2,5],34:[2,5],35:[2,5],40:[2,5],41:[2,5],42:[2,5],43:[2,5],51:[2,5],52:[2,5],53:[2,5],54:[2,5],56:[2,5],57:[2,5],58:[2,5],59:[2,5],60:[2,5],61:[2,5],62:[2,5],63:[2,5],64:[2,5],65:[2,5],66:[2,5],67:[2,5],72:[2,5],75:[2,5],87:[2,5],88:[2,5],89:[2,5],95:[2,5],96:[2,5],97:[2,5],98:[2,5],101:[2,5]},{11:[1,102]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:103,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{4:[1,117],5:114,7:[1,118],8:[1,115],10:108,20:[1,104],23:[1,116],24:[2,135],25:[1,119],36:105,38:113,40:[2,135],41:[2,135],42:[1,107],44:[1,111],50:[1,112],54:[1,110],90:109,91:106},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:4,18:[1,34],19:121,20:[1,27],23:[1,35],25:[1,36],26:[1,120],27:[2,47],28:[1,122],29:[1,123],30:[1,124],31:[1,125],33:[1,126],34:[1,127],35:[1,128],37:[1,26],41:[2,47],42:[1,6],44:[1,11],45:3,46:5,48:[1,9],50:[1,10],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],93:129,94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:130,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:131,4:[1,132],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36],99:[1,133]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:134,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,50],3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:7,20:[1,27],23:[1,35],25:[1,36],27:[2,50],31:[1,8],33:[1,14],34:[1,13],37:[1,26],41:[2,50],43:[2,50],44:[1,11],46:135,48:[1,9],50:[1,10],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,47],3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:7,20:[1,27],23:[1,35],25:[1,36],27:[2,47],31:[1,8],33:[1,14],34:[1,13],37:[1,26],41:[2,47],44:[1,11],45:136,46:5,48:[1,9],50:[1,10],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{41:[1,40],43:[1,137]},{3:138,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:139,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],42:[1,140],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:141,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:142,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:143,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:144,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:145,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:146,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:147,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:148,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:149,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:150,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:151,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:152,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:153,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{13:154,32:[2,45],40:[1,155],41:[2,45],42:[2,45]},{14:[2,38],22:[2,38],32:[2,38],40:[2,38],41:[2,38],42:[2,38],43:[2,38]},{14:[2,42],22:[2,42],32:[2,42],35:[1,43],40:[2,42],41:[2,42],42:[2,42],43:[2,42],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],14:[2,44],16:[1,33],18:[1,34],19:156,20:[1,27],22:[2,44],23:[1,35],25:[1,36],31:[1,62],32:[2,44],33:[1,14],34:[1,13],37:[1,26],40:[2,44],41:[2,44],42:[2,44],43:[2,44],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:157,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],32:[2,37],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,53],27:[2,53],40:[1,158],41:[2,53],43:[2,53]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:159,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,119],27:[2,119],35:[1,43],40:[2,119],41:[2,119],42:[2,119],43:[2,119],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:161,18:[1,34],19:160,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],42:[1,6],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:162,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],42:[1,163],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,67],14:[2,67],22:[2,67],24:[2,67],26:[2,67],27:[2,67],28:[2,67],32:[2,67],35:[2,67],40:[2,67],41:[2,67],42:[2,67],43:[2,67],53:[2,67],54:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],63:[2,67],64:[2,67],65:[2,67],66:[2,67],72:[2,67],75:[2,67],88:[2,67],89:[2,67],95:[2,67],97:[2,67],101:[2,67]},{1:[2,87],14:[2,87],22:[2,87],24:[2,87],26:[2,87],27:[2,87],28:[2,87],32:[2,87],35:[2,87],40:[2,87],41:[2,87],42:[2,87],43:[2,87],53:[2,87],54:[2,87],56:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87],61:[2,87],62:[2,87],63:[2,87],64:[2,87],65:[2,87],66:[2,87],72:[2,87],75:[2,87],88:[2,87],89:[2,87],95:[2,87],97:[2,87],101:[2,87]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:164,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{4:[1,117],5:114,6:166,7:[1,118],10:165,20:[1,167],23:[1,168],25:[1,119],38:113},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:169,14:[2,37],16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,9],9:[2,9],11:[2,9],14:[2,9],15:[2,9],22:[2,9],24:[2,9],26:[2,9],27:[2,9],28:[2,9],32:[2,9],34:[2,9],35:[2,9],40:[2,9],41:[2,9],42:[2,9],43:[2,9],51:[2,9],52:[2,9],53:[2,9],54:[2,9],56:[2,9],57:[2,9],58:[2,9],59:[2,9],60:[2,9],61:[2,9],62:[2,9],63:[2,9],64:[2,9],65:[2,9],66:[2,9],67:[2,9],72:[2,9],75:[2,9],87:[2,9],88:[2,9],89:[2,9],95:[2,9],96:[2,9],97:[2,9],98:[2,9],101:[2,9]},{1:[2,66],9:[1,71],11:[1,72],14:[2,66],15:[1,73],22:[2,66],24:[2,66],26:[2,66],27:[2,66],28:[2,66],32:[2,66],35:[2,66],40:[2,66],41:[2,66],42:[2,66],43:[2,66],53:[2,66],54:[2,66],56:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],61:[2,66],62:[2,66],63:[2,66],64:[2,66],65:[2,66],66:[2,66],72:[2,66],75:[2,66],88:[2,66],89:[2,66],95:[2,66],97:[2,66],101:[2,66]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:101,16:[1,33],18:[1,34],19:170,20:[1,27],22:[2,37],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:171,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36]},{1:[2,71],14:[2,71],22:[2,71],24:[2,71],26:[2,71],27:[2,71],28:[2,71],32:[2,71],35:[1,43],40:[2,71],41:[2,71],42:[2,71],43:[2,71],53:[2,71],54:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[1,49],60:[2,71],61:[2,71],62:[2,71],63:[1,53],64:[2,71],65:[2,71],66:[2,71],72:[2,71],75:[2,71],88:[2,71],89:[2,71],95:[2,71],97:[2,71],101:[2,71]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:172,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:173,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36]},{1:[2,72],14:[2,72],22:[2,72],24:[2,72],26:[2,72],27:[2,72],28:[2,72],32:[2,72],35:[1,43],40:[2,72],41:[2,72],42:[2,72],43:[2,72],53:[2,72],54:[2,72],56:[2,72],57:[2,72],58:[2,72],59:[1,49],60:[2,72],61:[2,72],62:[2,72],63:[1,53],64:[2,72],65:[2,72],66:[2,72],72:[2,72],75:[2,72],88:[2,72],89:[2,72],95:[2,72],97:[2,72],101:[2,72]},{3:174,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36]},{1:[2,73],14:[2,73],22:[2,73],24:[2,73],26:[2,73],27:[2,73],28:[2,73],32:[2,73],35:[1,43],40:[2,73],41:[2,73],42:[2,73],43:[2,73],53:[2,73],54:[2,73],56:[2,73],57:[2,73],58:[2,73],59:[1,49],60:[2,73],61:[2,73],62:[2,73],63:[1,53],64:[2,73],65:[2,73],66:[2,73],72:[2,73],75:[2,73],88:[2,73],89:[2,73],95:[2,73],97:[2,73],101:[2,73]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:175,14:[2,37],16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{17:176,42:[1,6],94:[1,177]},{1:[2,93],14:[2,93],22:[2,93],24:[2,93],26:[2,93],27:[2,93],28:[2,93],32:[2,93],35:[2,93],40:[2,93],41:[2,93],42:[2,93],43:[2,93],53:[2,93],54:[2,93],56:[2,93],57:[2,93],58:[2,93],59:[2,93],60:[2,93],61:[2,93],62:[2,93],63:[2,93],64:[2,93],65:[2,93],66:[2,93],71:[1,178],72:[2,93],75:[2,93],88:[2,93],89:[2,93],95:[2,93],97:[2,93],101:[2,93]},{75:[1,179]},{1:[2,96],14:[2,96],22:[2,96],24:[2,96],26:[2,96],27:[2,96],28:[2,96],32:[2,96],35:[1,43],40:[2,96],41:[2,96],42:[2,96],43:[2,96],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[2,96],72:[2,96],75:[2,96],88:[2,96],89:[2,96],95:[2,96],97:[2,96],101:[2,96]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:180,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,100],14:[2,100],22:[2,100],24:[2,100],26:[2,100],27:[2,100],28:[2,100],32:[2,100],35:[2,100],40:[2,100],41:[2,100],42:[2,100],43:[2,100],53:[2,100],54:[2,100],56:[2,100],57:[2,100],58:[2,100],59:[2,100],60:[2,100],61:[2,100],62:[2,100],63:[2,100],64:[2,100],65:[2,100],66:[2,100],72:[2,100],75:[2,100],88:[2,100],89:[2,100],95:[2,100],97:[2,100],101:[2,100]},{35:[1,43],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],79:181,97:[1,93]},{1:[2,104],14:[2,104],22:[2,104],24:[2,104],26:[2,104],27:[2,104],28:[2,104],32:[2,104],35:[2,104],40:[2,104],41:[2,104],42:[2,104],43:[2,104],53:[2,104],54:[2,104],56:[2,104],57:[2,104],58:[2,104],59:[2,104],60:[2,104],61:[2,104],62:[2,104],63:[2,104],64:[2,104],65:[2,104],66:[2,104],71:[1,183],72:[2,104],75:[2,104],80:[1,182],88:[2,104],89:[2,104],95:[2,104],97:[1,184],101:[2,104]},{1:[2,107],14:[2,107],22:[2,107],24:[2,107],26:[2,107],27:[2,107],28:[2,107],32:[2,107],35:[2,107],40:[2,107],41:[2,107],42:[2,107],43:[2,107],53:[2,107],54:[2,107],56:[2,107],57:[2,107],58:[2,107],59:[2,107],60:[2,107],61:[2,107],62:[2,107],63:[2,107],64:[2,107],65:[2,107],66:[2,107],72:[2,107],75:[2,107],88:[2,107],89:[2,107],95:[2,107],97:[2,107],101:[2,107]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:65,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],49:185,54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,108],14:[2,108],22:[2,108],24:[2,108],26:[2,108],27:[2,108],28:[2,108],32:[2,108],35:[2,108],40:[2,108],41:[2,108],42:[2,108],43:[2,108],53:[2,108],54:[2,108],56:[2,108],57:[2,108],58:[2,108],59:[2,108],60:[2,108],61:[2,108],62:[2,108],63:[2,108],64:[2,108],65:[2,108],66:[2,108],72:[2,108],75:[2,108],82:[1,186],83:[1,187],88:[2,108],89:[2,108],95:[2,108],97:[2,108],101:[2,108]},{9:[1,71],11:[1,72],15:[1,73],42:[2,172],85:188,87:[1,97],101:[2,172]},{42:[2,174],86:189,101:[1,190]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:191,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,115],14:[2,115],22:[2,115],24:[2,115],26:[2,115],27:[2,115],28:[2,115],32:[2,115],35:[1,43],40:[2,115],41:[2,115],42:[2,115],43:[2,115],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[2,115],72:[2,115],75:[2,115],88:[2,115],89:[2,115],95:[2,115],97:[2,115],101:[2,115]},{1:[2,116],14:[2,116],22:[2,116],24:[2,116],26:[2,116],27:[2,116],28:[2,116],32:[2,116],35:[2,116],40:[2,116],41:[2,116],42:[2,116],43:[2,116],53:[2,116],54:[2,116],56:[2,116],57:[2,116],58:[2,116],59:[2,116],60:[2,116],61:[2,116],62:[2,116],63:[2,116],64:[2,116],65:[2,116],66:[2,116],72:[2,116],75:[2,116],88:[2,116],89:[2,116],95:[2,116],97:[2,116],101:[2,116]},{21:193,22:[2,42],35:[1,43],40:[2,42],41:[2,42],42:[2,42],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],73:194,75:[1,39],88:[1,192],95:[1,38]},{13:195,22:[2,45],40:[1,155],41:[2,45],42:[2,45]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:196,14:[2,37],16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{17:197,35:[1,43],42:[1,6],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:198,16:[1,33],18:[1,34],19:60,20:[1,27],22:[2,37],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{13:199,24:[2,45],40:[1,200],41:[2,45]},{24:[2,136],40:[2,136],41:[2,136],43:[2,136]},{4:[1,117],5:114,7:[1,118],8:[1,115],10:108,20:[1,202],23:[1,116],25:[1,119],36:201,38:113,40:[2,135],41:[2,135],42:[1,107],43:[2,135],44:[1,111],50:[1,112],54:[1,110],90:109,91:106},{9:[1,204],24:[2,121],40:[2,121],41:[2,121],43:[2,121],57:[2,121],92:[1,203]},{24:[2,129],40:[2,129],41:[2,129],43:[2,129],57:[1,205]},{4:[1,117],5:114,7:[1,118],8:[1,207],10:206,25:[1,119],38:113},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:208,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{24:[2,134],40:[2,134],41:[2,134],43:[2,134]},{1:[2,33],9:[2,33],11:[2,33],14:[2,33],15:[2,33],22:[2,33],24:[2,33],26:[2,33],27:[2,33],28:[2,33],32:[2,33],34:[2,33],35:[2,33],40:[2,33],41:[2,33],42:[2,33],43:[2,33],51:[2,33],52:[2,33],53:[2,33],54:[2,33],56:[2,33],57:[2,33],58:[2,33],59:[2,33],60:[2,33],61:[2,33],62:[2,33],63:[2,33],64:[2,33],65:[2,33],66:[2,33],67:[2,33],72:[2,33],75:[2,33],87:[2,33],88:[2,33],89:[2,33],92:[2,33],95:[2,33],96:[2,33],97:[2,33],98:[2,33],101:[2,33]},{1:[2,34],9:[2,34],11:[2,34],14:[2,34],15:[2,34],22:[2,34],24:[2,34],26:[2,34],27:[2,34],28:[2,34],32:[2,34],34:[2,34],35:[2,34],40:[2,34],41:[2,34],42:[2,34],43:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34],56:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34],63:[2,34],64:[2,34],65:[2,34],66:[2,34],67:[2,34],72:[2,34],75:[2,34],87:[2,34],88:[2,34],89:[2,34],92:[2,34],95:[2,34],96:[2,34],97:[2,34],98:[2,34],101:[2,34]},{9:[1,209],24:[2,122],40:[2,122],41:[2,122],43:[2,122],57:[2,122]},{4:[1,117],5:114,7:[1,118],8:[1,115],10:108,20:[1,202],23:[1,116],24:[2,135],25:[1,119],36:210,38:113,40:[2,135],41:[2,135],42:[1,107],44:[1,111],50:[1,112],54:[1,110],90:109,91:106},{1:[2,35],9:[2,35],11:[2,35],14:[2,35],15:[2,35],22:[2,35],24:[2,35],26:[2,35],27:[2,35],28:[2,35],32:[2,35],34:[2,35],35:[2,35],40:[2,35],41:[2,35],42:[2,35],43:[2,35],51:[2,35],52:[2,35],53:[2,35],54:[2,35],56:[2,35],57:[2,35],58:[2,35],59:[2,35],60:[2,35],61:[2,35],62:[2,35],63:[2,35],64:[2,35],65:[2,35],66:[2,35],67:[2,35],72:[2,35],75:[2,35],87:[2,35],88:[2,35],89:[2,35],92:[2,35],95:[2,35],96:[2,35],97:[2,35],98:[2,35],101:[2,35]},{1:[2,36],9:[2,36],11:[2,36],14:[2,36],15:[2,36],22:[2,36],24:[2,36],26:[2,36],27:[2,36],28:[2,36],32:[2,36],34:[2,36],35:[2,36],40:[2,36],41:[2,36],42:[2,36],43:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[2,36],56:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],64:[2,36],65:[2,36],66:[2,36],67:[2,36],72:[2,36],75:[2,36],87:[2,36],88:[2,36],89:[2,36],92:[2,36],95:[2,36],96:[2,36],97:[2,36],98:[2,36],101:[2,36]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:4,18:[1,34],19:7,20:[1,27],23:[1,35],25:[1,36],27:[2,47],31:[1,8],33:[1,14],34:[1,13],37:[1,26],41:[2,47],42:[1,6],44:[1,11],45:3,46:5,48:[1,9],50:[1,10],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],93:129,94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:212,20:[1,27],23:[1,35],25:[1,36],27:[1,211],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{26:[1,213],27:[2,51],28:[1,214],35:[1,215],41:[2,51],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:217,20:[1,27],23:[1,35],25:[1,36],27:[1,216],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{11:[1,219],27:[1,218]},{27:[1,220]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:221,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],32:[2,37],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:77,20:[1,27],23:[1,35],25:[1,36],27:[1,222],31:[1,62],33:[1,14],34:[1,13],37:[1,26],42:[1,78],52:[1,76],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:74,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36],27:[1,223]},{3:224,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36]},{27:[1,225]},{17:226,35:[1,43],42:[1,6],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{9:[1,71],11:[1,72],15:[1,73],96:[1,227]},{9:[2,1],11:[2,1],15:[2,1],40:[1,229],96:[2,1],98:[1,228],100:[1,230]},{4:[1,231]},{22:[2,163],24:[2,163],35:[1,43],40:[1,233],42:[2,163],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,163],95:[2,163],97:[1,232]},{1:[2,49],27:[2,49],41:[2,49],43:[2,49]},{1:[2,143],27:[2,143],41:[1,40]},{1:[2,57],9:[2,57],11:[2,57],14:[2,57],15:[2,57],22:[2,57],24:[2,57],26:[2,57],27:[2,57],28:[2,57],32:[2,57],34:[2,57],35:[2,57],40:[2,57],41:[2,57],42:[2,57],43:[2,57],51:[2,57],52:[2,57],53:[2,57],54:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],71:[2,57],72:[2,57],75:[2,57],80:[2,57],82:[2,57],83:[2,57],87:[2,57],88:[2,57],89:[2,57],95:[2,57],96:[2,57],97:[2,57],98:[2,57],101:[2,57]},{9:[1,71],11:[1,72],15:[1,73],35:[1,234]},{1:[2,64],14:[2,64],22:[2,64],24:[2,64],26:[2,64],27:[2,64],28:[2,64],32:[2,64],35:[1,43],40:[2,64],41:[2,64],42:[2,64],43:[2,64],53:[2,64],54:[1,45],56:[2,64],57:[2,64],58:[1,48],59:[1,49],60:[2,64],61:[2,64],62:[2,64],63:[1,53],64:[2,64],65:[2,64],66:[2,64],72:[2,64],75:[2,64],88:[2,64],89:[2,64],95:[2,64],97:[2,64],101:[2,64]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:235,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,75],14:[2,75],22:[2,75],24:[2,75],26:[2,75],27:[2,75],28:[2,75],32:[2,75],35:[1,43],40:[2,75],41:[2,75],42:[2,75],43:[2,75],53:[2,75],54:[2,75],56:[2,75],57:[2,75],58:[1,48],59:[1,49],60:[2,75],61:[2,75],62:[2,75],63:[1,53],64:[2,75],65:[2,75],66:[2,75],72:[2,75],75:[2,75],88:[2,75],89:[2,75],95:[2,75],97:[2,75],101:[2,75]},{1:[2,76],14:[2,76],22:[2,76],24:[2,76],26:[2,76],27:[2,76],28:[2,76],32:[2,76],35:[1,43],40:[2,76],41:[2,76],42:[2,76],43:[2,76],53:[1,44],54:[1,45],56:[1,46],57:[2,76],58:[1,48],59:[1,49],60:[1,50],61:[2,76],62:[1,52],63:[1,53],64:[1,54],65:[2,76],66:[2,76],72:[2,76],75:[2,76],88:[2,76],89:[2,76],95:[2,76],97:[2,76],101:[2,76]},{1:[2,77],14:[2,77],22:[2,77],24:[2,77],26:[2,77],27:[2,77],28:[2,77],32:[2,77],35:[1,43],40:[2,77],41:[2,77],42:[2,77],43:[2,77],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[2,77],66:[2,77],72:[2,77],75:[2,77],88:[2,77],89:[2,77],95:[2,77],97:[2,77],101:[2,77]},{1:[2,78],14:[2,78],22:[2,78],24:[2,78],26:[2,78],27:[2,78],28:[2,78],32:[2,78],35:[1,43],40:[2,78],41:[2,78],42:[2,78],43:[2,78],53:[2,78],54:[2,78],56:[2,78],57:[2,78],58:[2,78],59:[1,49],60:[2,78],61:[2,78],62:[2,78],63:[1,53],64:[2,78],65:[2,78],66:[2,78],72:[2,78],75:[2,78],88:[2,78],89:[2,78],95:[2,78],97:[2,78],101:[2,78]},{1:[2,79],14:[2,79],22:[2,79],24:[2,79],26:[2,79],27:[2,79],28:[2,79],32:[2,79],35:[1,43],40:[2,79],41:[2,79],42:[2,79],43:[2,79],53:[2,79],54:[2,79],56:[2,79],57:[2,79],58:[2,79],59:[1,49],60:[2,79],61:[2,79],62:[2,79],63:[1,53],64:[2,79],65:[2,79],66:[2,79],72:[2,79],75:[2,79],88:[2,79],89:[2,79],95:[2,79],97:[2,79],101:[2,79]},{1:[2,80],14:[2,80],22:[2,80],24:[2,80],26:[2,80],27:[2,80],28:[2,80],32:[2,80],35:[1,43],40:[2,80],41:[2,80],42:[2,80],43:[2,80],53:[2,80],54:[1,45],56:[2,80],57:[2,80],58:[1,48],59:[1,49],60:[2,80],61:[2,80],62:[2,80],63:[1,53],64:[2,80],65:[2,80],66:[2,80],72:[2,80],75:[2,80],88:[2,80],89:[2,80],95:[2,80],97:[2,80],101:[2,80]},{1:[2,81],14:[2,81],22:[2,81],24:[2,81],26:[2,81],27:[2,81],28:[2,81],32:[2,81],35:[1,43],40:[2,81],41:[2,81],42:[2,81],43:[2,81],53:[1,44],54:[1,45],56:[1,46],57:[2,81],58:[1,48],59:[1,49],60:[1,50],61:[2,81],62:[1,52],63:[1,53],64:[1,54],65:[2,81],66:[2,81],72:[2,81],75:[2,81],88:[2,81],89:[2,81],95:[2,81],97:[2,81],101:[2,81]},{1:[2,82],14:[2,82],22:[2,82],24:[2,82],26:[2,82],27:[2,82],28:[2,82],32:[2,82],35:[1,43],40:[2,82],41:[2,82],42:[2,82],43:[2,82],53:[1,44],54:[1,45],56:[2,82],57:[2,82],58:[1,48],59:[1,49],60:[1,50],61:[2,82],62:[1,52],63:[1,53],64:[2,82],65:[2,82],66:[2,82],72:[2,82],75:[2,82],88:[2,82],89:[2,82],95:[2,82],97:[2,82],101:[2,82]},{1:[2,83],14:[2,83],22:[2,83],24:[2,83],26:[2,83],27:[2,83],28:[2,83],32:[2,83],35:[1,43],40:[2,83],41:[2,83],42:[2,83],43:[2,83],53:[2,83],54:[2,83],56:[2,83],57:[2,83],58:[2,83],59:[2,83],60:[2,83],61:[2,83],62:[2,83],63:[1,53],64:[2,83],65:[2,83],66:[2,83],72:[2,83],75:[2,83],88:[2,83],89:[2,83],95:[2,83],97:[2,83],101:[2,83]},{1:[2,84],14:[2,84],22:[2,84],24:[2,84],26:[2,84],27:[2,84],28:[2,84],32:[2,84],35:[1,43],40:[2,84],41:[2,84],42:[2,84],43:[2,84],53:[1,44],54:[1,45],56:[2,84],57:[2,84],58:[1,48],59:[1,49],60:[1,50],61:[2,84],62:[1,52],63:[1,53],64:[2,84],65:[2,84],66:[2,84],72:[2,84],75:[2,84],88:[2,84],89:[2,84],95:[2,84],97:[2,84],101:[2,84]},{1:[2,85],14:[2,85],22:[2,85],24:[2,85],26:[2,85],27:[2,85],28:[2,85],32:[2,85],35:[1,43],40:[2,85],41:[2,85],42:[2,85],43:[2,85],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[2,85],66:[2,85],72:[2,85],75:[2,85],88:[2,85],89:[2,85],95:[2,85],97:[2,85],101:[2,85]},{1:[2,86],14:[2,86],22:[2,86],24:[2,86],26:[2,86],27:[2,86],28:[2,86],32:[2,86],35:[1,43],40:[2,86],41:[2,86],42:[2,86],43:[2,86],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[2,86],75:[2,86],88:[2,86],89:[2,86],95:[2,86],97:[2,86],101:[2,86]},{1:[2,92],14:[2,92],22:[2,92],24:[2,92],26:[2,92],27:[2,92],28:[2,92],32:[2,92],35:[1,43],40:[2,92],41:[2,92],42:[2,92],43:[2,92],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[2,92],75:[2,92],88:[2,92],89:[2,92],95:[2,92],97:[2,92],101:[2,92]},{32:[1,236],41:[1,237],42:[1,238]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],14:[2,46],16:[1,33],18:[1,34],19:60,20:[1,27],22:[2,46],23:[1,35],25:[1,36],31:[1,62],32:[2,46],33:[1,14],34:[1,13],37:[1,26],39:239,41:[2,46],42:[2,46],43:[2,46],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{14:[2,43],22:[2,43],32:[2,43],35:[1,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{13:240,32:[2,45],40:[1,155],41:[2,45],42:[2,45]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:241,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{13:242,40:[1,155],41:[2,45],42:[2,45],43:[2,45]},{1:[2,58],14:[2,58],22:[2,58],24:[2,58],26:[2,58],27:[2,58],28:[2,58],32:[2,58],35:[1,43],40:[2,58],41:[2,58],42:[2,58],43:[2,58],53:[2,58],54:[1,45],56:[2,58],57:[2,58],58:[1,48],59:[1,49],60:[2,58],61:[2,58],62:[2,58],63:[1,53],64:[2,58],65:[2,58],66:[2,58],72:[2,58],75:[2,58],88:[2,58],89:[2,58],95:[2,58],97:[2,58],101:[2,58]},{1:[2,59],14:[2,59],22:[2,59],24:[2,59],26:[2,59],27:[2,59],28:[2,59],32:[2,59],35:[2,59],40:[2,59],41:[2,59],42:[2,59],43:[2,59],53:[2,59],54:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59],72:[2,59],75:[2,59],88:[2,59],89:[2,59],95:[2,59],97:[2,59],101:[2,59]},{1:[2,62],14:[2,62],22:[2,62],24:[2,62],26:[2,62],27:[2,62],28:[2,62],32:[2,62],35:[1,43],40:[2,62],41:[2,62],42:[2,62],43:[2,62],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[2,62],72:[2,62],75:[2,62],88:[2,62],89:[2,62],95:[2,62],97:[2,62],101:[2,62]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:243,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,114],14:[2,114],22:[2,114],24:[2,114],26:[2,114],27:[2,114],28:[2,114],32:[2,114],35:[1,43],40:[2,114],41:[2,114],42:[2,114],43:[2,114],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[2,114],72:[2,114],75:[2,114],88:[2,114],89:[2,114],95:[2,114],97:[2,114],101:[2,114]},{1:[2,6],9:[2,6],11:[2,6],14:[2,6],15:[2,6],22:[2,6],24:[2,6],26:[2,6],27:[2,6],28:[2,6],32:[2,6],34:[2,6],35:[2,6],40:[2,6],41:[2,6],42:[2,6],43:[2,6],51:[2,6],52:[2,6],53:[2,6],54:[2,6],56:[2,6],57:[2,6],58:[2,6],59:[2,6],60:[2,6],61:[2,6],62:[2,6],63:[2,6],64:[2,6],65:[2,6],66:[2,6],67:[2,6],72:[2,6],75:[2,6],87:[2,6],88:[2,6],89:[2,6],95:[2,6],96:[2,6],97:[2,6],98:[2,6],101:[2,6]},{1:[2,7],9:[2,7],11:[2,7],14:[2,7],15:[2,7],22:[2,7],24:[2,7],26:[2,7],27:[2,7],28:[2,7],32:[2,7],34:[2,7],35:[2,7],40:[2,7],41:[2,7],42:[2,7],43:[2,7],51:[2,7],52:[2,7],53:[2,7],54:[2,7],56:[2,7],57:[2,7],58:[2,7],59:[2,7],60:[2,7],61:[2,7],62:[2,7],63:[2,7],64:[2,7],65:[2,7],66:[2,7],67:[2,7],72:[2,7],75:[2,7],87:[2,7],88:[2,7],89:[2,7],95:[2,7],96:[2,7],97:[2,7],98:[2,7],101:[2,7]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:101,16:[1,33],18:[1,34],19:60,20:[1,27],22:[2,37],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{4:[1,117],5:114,7:[1,118],8:[1,115],10:108,20:[1,202],23:[1,116],24:[2,135],25:[1,119],36:105,38:113,40:[2,135],41:[2,135],42:[1,107],44:[1,111],50:[1,112],54:[1,110],90:109,91:106},{13:244,14:[2,45],40:[1,155],41:[2,45],42:[2,45]},{21:193,22:[2,42],35:[1,43],40:[2,42],41:[2,42],42:[2,42],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],73:194,75:[1,39],95:[1,38]},{1:[2,68],9:[1,71],11:[1,72],14:[2,68],15:[1,73],22:[2,68],24:[2,68],26:[2,68],27:[2,68],28:[2,68],32:[2,68],35:[2,68],40:[2,68],41:[2,68],42:[2,68],43:[2,68],53:[2,68],54:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68],64:[2,68],65:[2,68],66:[2,68],72:[2,68],75:[2,68],88:[2,68],89:[2,68],95:[2,68],97:[2,68],101:[2,68]},{13:245,40:[1,155],41:[2,45],42:[2,45],43:[2,45]},{1:[2,69],9:[1,71],11:[1,72],14:[2,69],15:[1,73],22:[2,69],24:[2,69],26:[2,69],27:[2,69],28:[2,69],32:[2,69],35:[2,69],40:[2,69],41:[2,69],42:[2,69],43:[2,69],53:[2,69],54:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69],72:[2,69],75:[2,69],88:[2,69],89:[2,69],95:[2,69],97:[2,69],101:[2,69]},{1:[2,70],9:[1,71],11:[1,72],14:[2,70],15:[1,73],22:[2,70],24:[2,70],26:[2,70],27:[2,70],28:[2,70],32:[2,70],35:[2,70],40:[2,70],41:[2,70],42:[2,70],43:[2,70],53:[2,70],54:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],72:[2,70],75:[2,70],88:[2,70],89:[2,70],95:[2,70],97:[2,70],101:[2,70]},{13:246,14:[2,45],40:[1,155],41:[2,45],42:[2,45]},{1:[2,91],14:[2,91],22:[2,91],24:[2,91],26:[2,91],27:[2,91],28:[2,91],32:[2,91],35:[2,91],40:[2,91],41:[2,91],42:[2,91],43:[2,91],53:[2,91],54:[2,91],56:[2,91],57:[2,91],58:[2,91],59:[2,91],60:[2,91],61:[2,91],62:[2,91],63:[2,91],64:[2,91],65:[2,91],66:[2,91],72:[2,91],75:[2,91],88:[2,91],89:[2,91],95:[2,91],97:[2,91],101:[2,91]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:247,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{17:248,42:[1,6]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:249,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{13:250,40:[1,155],41:[2,45],42:[2,45],43:[2,45]},{1:[2,101],14:[2,101],22:[2,101],24:[2,101],26:[2,101],27:[2,101],28:[2,101],32:[2,101],35:[2,101],40:[2,101],41:[2,101],42:[2,101],43:[2,101],53:[2,101],54:[2,101],56:[2,101],57:[2,101],58:[2,101],59:[2,101],60:[2,101],61:[2,101],62:[2,101],63:[2,101],64:[2,101],65:[2,101],66:[2,101],71:[1,252],72:[2,101],75:[2,101],80:[1,251],88:[2,101],89:[2,101],95:[2,101],97:[1,184],101:[2,101]},{17:253,42:[1,6]},{17:254,42:[1,6]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:65,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],49:255,54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{17:256,40:[1,158],42:[1,6]},{17:257,42:[1,6]},{17:258,42:[1,6]},{42:[2,174],86:259,101:[1,190]},{17:260,42:[1,6]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:65,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],49:261,54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{35:[1,43],42:[2,171],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],101:[2,171]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:262,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{22:[1,263],73:264,75:[1,39],95:[1,38]},{22:[2,167],24:[2,167],75:[2,167],95:[2,167]},{22:[1,265],41:[1,237],42:[1,238]},{13:266,14:[2,45],40:[1,155],41:[2,45],42:[2,45]},{1:[2,11],9:[2,11],11:[2,11],14:[2,11],15:[2,11],22:[2,11],24:[2,11],26:[2,11],27:[2,11],28:[2,11],32:[2,11],34:[2,11],35:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],51:[2,11],52:[2,11],53:[2,11],54:[2,11],56:[2,11],57:[2,11],58:[2,11],59:[2,11],60:[2,11],61:[2,11],62:[2,11],63:[2,11],64:[2,11],65:[2,11],66:[2,11],67:[2,11],72:[2,11],75:[2,11],87:[2,11],88:[2,11],89:[2,11],95:[2,11],96:[2,11],97:[2,11],98:[2,11],101:[2,11]},{13:267,22:[2,45],40:[1,155],41:[2,45],42:[2,45]},{24:[1,268],41:[1,269]},{4:[1,117],5:114,7:[1,118],8:[1,115],10:108,20:[1,202],23:[1,116],24:[2,46],25:[1,119],38:113,41:[2,46],43:[2,46],44:[1,111],50:[1,112],54:[1,110],90:109,91:270},{13:271,40:[1,200],41:[2,45],43:[2,45]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:272,16:[1,33],18:[1,34],19:60,20:[1,27],22:[2,37],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:273,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],42:[1,274],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{4:[1,117],7:[1,118],38:275},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:276,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{24:[2,131],40:[2,131],41:[2,131],43:[2,131]},{24:[2,132],40:[2,132],41:[2,132],43:[2,132]},{24:[2,133],35:[1,43],40:[2,133],41:[2,133],43:[2,133],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{4:[1,117],7:[1,118],38:277},{13:278,24:[2,45],40:[1,200],41:[2,45]},{1:[2,14],9:[2,14],11:[2,14],14:[2,14],15:[2,14],22:[2,14],24:[2,14],26:[2,14],27:[2,14],28:[2,14],32:[2,14],34:[2,14],35:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],51:[2,14],52:[2,14],53:[2,14],54:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],63:[2,14],64:[2,14],65:[2,14],66:[2,14],67:[2,14],72:[2,14],75:[2,14],87:[2,14],88:[2,14],89:[2,14],95:[2,14],96:[2,14],97:[2,14],98:[2,14],101:[2,14]},{27:[1,279],35:[1,43],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{27:[1,280]},{27:[1,281]},{3:282,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36]},{1:[2,17],9:[2,17],11:[2,17],14:[2,17],15:[2,17],22:[2,17],24:[2,17],26:[2,17],27:[2,17],28:[2,17],32:[2,17],34:[2,17],35:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],51:[2,17],52:[2,17],53:[2,17],54:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],64:[2,17],65:[2,17],66:[2,17],67:[2,17],72:[2,17],75:[2,17],87:[2,17],88:[2,17],89:[2,17],95:[2,17],96:[2,17],97:[2,17],98:[2,17],101:[2,17]},{27:[1,283],35:[1,43],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{1:[2,20],9:[2,20],11:[2,20],14:[2,20],15:[2,20],22:[2,20],24:[2,20],26:[2,20],27:[2,20],28:[2,20],32:[2,20],34:[2,20],35:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],51:[2,20],52:[2,20],53:[2,20],54:[2,20],56:[2,20],57:[2,20],58:[2,20],59:[2,20],60:[2,20],61:[2,20],62:[2,20],63:[2,20],64:[2,20],65:[2,20],66:[2,20],67:[2,20],72:[2,20],75:[2,20],87:[2,20],88:[2,20],89:[2,20],95:[2,20],96:[2,20],97:[2,20],98:[2,20],101:[2,20]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:284,14:[2,37],16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,22],9:[2,22],11:[2,22],14:[2,22],15:[2,22],22:[2,22],24:[2,22],26:[2,22],27:[2,22],28:[2,22],32:[2,22],34:[2,22],35:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],51:[2,22],52:[2,22],53:[2,22],54:[2,22],56:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22],63:[2,22],64:[2,22],65:[2,22],66:[2,22],67:[2,22],72:[2,22],75:[2,22],87:[2,22],88:[2,22],89:[2,22],95:[2,22],96:[2,22],97:[2,22],98:[2,22],101:[2,22]},{13:285,32:[2,45],40:[1,155],41:[2,45],42:[2,45]},{1:[2,24],9:[2,24],11:[2,24],14:[2,24],15:[2,24],22:[2,24],24:[2,24],26:[2,24],27:[2,24],28:[2,24],32:[2,24],34:[2,24],35:[2,24],40:[2,24],41:[2,24],42:[2,24],43:[2,24],51:[2,24],52:[2,24],53:[2,24],54:[2,24],56:[2,24],57:[2,24],58:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],64:[2,24],65:[2,24],66:[2,24],67:[2,24],72:[2,24],75:[2,24],87:[2,24],88:[2,24],89:[2,24],95:[2,24],96:[2,24],97:[2,24],98:[2,24],101:[2,24]},{1:[2,25],9:[2,25],11:[2,25],14:[2,25],15:[2,25],22:[2,25],24:[2,25],26:[2,25],27:[2,25],28:[2,25],32:[2,25],34:[2,25],35:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],51:[2,25],52:[2,25],53:[2,25],54:[2,25],56:[2,25],57:[2,25],58:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],64:[2,25],65:[2,25],66:[2,25],67:[2,25],72:[2,25],75:[2,25],87:[2,25],88:[2,25],89:[2,25],95:[2,25],96:[2,25],97:[2,25],98:[2,25],101:[2,25]},{9:[1,71],11:[1,72],15:[1,73],35:[1,286]},{1:[2,140],9:[2,140],11:[2,140],14:[2,140],15:[2,140],22:[2,140],24:[2,140],26:[2,140],27:[2,140],28:[2,140],32:[2,140],34:[2,140],35:[2,140],40:[2,140],41:[2,140],42:[2,140],43:[2,140],51:[2,140],52:[2,140],53:[2,140],54:[2,140],56:[2,140],57:[2,140],58:[2,140],59:[2,140],60:[2,140],61:[2,140],62:[2,140],63:[2,140],64:[2,140],65:[2,140],66:[2,140],67:[2,140],72:[2,140],75:[2,140],87:[2,140],88:[2,140],89:[2,140],92:[2,140],95:[2,140],96:[2,140],97:[2,140],98:[2,140],101:[2,140]},{1:[2,144],14:[2,144],22:[2,144],24:[2,144],26:[2,144],27:[2,144],28:[2,144],32:[2,144],35:[2,144],40:[2,144],41:[2,144],42:[2,144],43:[2,144],53:[2,144],54:[2,144],56:[2,144],57:[2,144],58:[2,144],59:[2,144],60:[2,144],61:[2,144],62:[2,144],63:[2,144],64:[2,144],65:[2,144],66:[2,144],71:[2,144],72:[2,144],75:[2,144],88:[2,144],89:[2,144],95:[2,144],97:[2,144],101:[2,144]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:287,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:288,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:289,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:290,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{40:[1,292],98:[1,291]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:293,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:294,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:295,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{13:296,40:[1,155],41:[2,45],42:[2,45],43:[2,45]},{47:[1,297],68:[1,298]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:299,44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:300,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{14:[2,39],22:[2,39],32:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39]},{32:[1,301],41:[1,237],42:[1,238]},{1:[2,120],27:[2,120],35:[1,43],40:[2,120],41:[2,120],42:[2,120],43:[2,120],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{41:[1,237],42:[1,238],43:[1,302]},{13:303,40:[1,155],41:[2,45],42:[2,45],43:[2,45]},{14:[1,304],41:[1,237],42:[1,238]},{41:[1,237],42:[1,238],43:[1,305]},{14:[1,306],41:[1,237],42:[1,238]},{17:307,35:[1,43],42:[1,6],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{1:[2,94],14:[2,94],22:[2,94],24:[2,94],26:[2,94],27:[2,94],28:[2,94],32:[2,94],35:[2,94],40:[2,94],41:[2,94],42:[2,94],43:[2,94],53:[2,94],54:[2,94],56:[2,94],57:[2,94],58:[2,94],59:[2,94],60:[2,94],61:[2,94],62:[2,94],63:[2,94],64:[2,94],65:[2,94],66:[2,94],72:[2,94],75:[2,94],88:[2,94],89:[2,94],95:[2,94],97:[2,94],101:[2,94]},{1:[2,95],14:[2,95],22:[2,95],24:[2,95],26:[2,95],27:[2,95],28:[2,95],32:[2,95],35:[1,43],40:[2,95],41:[2,95],42:[2,95],43:[2,95],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[2,95],75:[2,95],88:[2,95],89:[2,95],95:[2,95],97:[2,95],101:[2,95]},{41:[1,237],42:[1,238],43:[1,308]},{17:309,42:[1,6]},{17:310,42:[1,6]},{1:[2,105],14:[2,105],22:[2,105],24:[2,105],26:[2,105],27:[2,105],28:[2,105],32:[2,105],35:[2,105],40:[2,105],41:[2,105],42:[2,105],43:[2,105],53:[2,105],54:[2,105],56:[2,105],57:[2,105],58:[2,105],59:[2,105],60:[2,105],61:[2,105],62:[2,105],63:[2,105],64:[2,105],65:[2,105],66:[2,105],72:[2,105],75:[2,105],88:[2,105],89:[2,105],95:[2,105],97:[2,105],101:[2,105]},{1:[2,106],14:[2,106],22:[2,106],24:[2,106],26:[2,106],27:[2,106],28:[2,106],32:[2,106],35:[2,106],40:[2,106],41:[2,106],42:[2,106],43:[2,106],53:[2,106],54:[2,106],56:[2,106],57:[2,106],58:[2,106],59:[2,106],60:[2,106],61:[2,106],62:[2,106],63:[2,106],64:[2,106],65:[2,106],66:[2,106],72:[2,106],75:[2,106],88:[2,106],89:[2,106],95:[2,106],97:[2,106],101:[2,106]},{17:311,40:[1,158],42:[1,6]},{1:[2,169],14:[2,169],22:[2,169],24:[2,169],26:[2,169],27:[2,169],28:[2,169],32:[2,169],35:[2,169],40:[2,169],41:[2,169],42:[2,169],43:[2,169],53:[2,169],54:[2,169],56:[2,169],57:[2,169],58:[2,169],59:[2,169],60:[2,169],61:[2,169],62:[2,169],63:[2,169],64:[2,169],65:[2,169],66:[2,169],71:[2,169],72:[2,169],75:[2,169],80:[2,169],88:[2,169],89:[2,169],95:[2,169],97:[2,169],101:[2,169]},{1:[2,109],14:[2,109],22:[2,109],24:[2,109],26:[2,109],27:[2,109],28:[2,109],32:[2,109],35:[2,109],40:[2,109],41:[2,109],42:[2,109],43:[2,109],53:[2,109],54:[2,109],56:[2,109],57:[2,109],58:[2,109],59:[2,109],60:[2,109],61:[2,109],62:[2,109],63:[2,109],64:[2,109],65:[2,109],66:[2,109],72:[2,109],75:[2,109],83:[1,312],88:[2,109],89:[2,109],95:[2,109],97:[2,109],101:[2,109]},{1:[2,111],14:[2,111],22:[2,111],24:[2,111],26:[2,111],27:[2,111],28:[2,111],32:[2,111],35:[2,111],40:[2,111],41:[2,111],42:[2,111],43:[2,111],53:[2,111],54:[2,111],56:[2,111],57:[2,111],58:[2,111],59:[2,111],60:[2,111],61:[2,111],62:[2,111],63:[2,111],64:[2,111],65:[2,111],66:[2,111],72:[2,111],75:[2,111],88:[2,111],89:[2,111],95:[2,111],97:[2,111],101:[2,111]},{17:313,42:[1,6]},{1:[2,113],14:[2,113],22:[2,113],24:[2,113],26:[2,113],27:[2,113],28:[2,113],32:[2,113],35:[2,113],40:[2,113],41:[2,113],42:[2,113],43:[2,113],53:[2,113],54:[2,113],56:[2,113],57:[2,113],58:[2,113],59:[2,113],60:[2,113],61:[2,113],62:[2,113],63:[2,113],64:[2,113],65:[2,113],66:[2,113],72:[2,113],75:[2,113],88:[2,113],89:[2,113],95:[2,113],97:[2,113],101:[2,113]},{40:[1,158],42:[2,173]},{22:[1,314],35:[1,43],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],89:[1,315]},{1:[2,12],9:[2,12],11:[2,12],14:[2,12],15:[2,12],22:[2,12],24:[2,12],26:[2,12],27:[2,12],28:[2,12],32:[2,12],34:[2,12],35:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],56:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],63:[2,12],64:[2,12],65:[2,12],66:[2,12],67:[2,12],72:[2,12],75:[2,12],87:[2,12],88:[2,12],89:[2,12],95:[2,12],96:[2,12],97:[2,12],98:[2,12],101:[2,12]},{22:[2,168],24:[2,168],75:[2,168],95:[2,168]},{1:[2,29],9:[2,29],11:[2,29],14:[2,29],15:[2,29],22:[2,29],24:[2,29],26:[2,29],27:[2,29],28:[2,29],32:[2,29],34:[2,29],35:[2,29],37:[1,316],40:[2,29],41:[2,29],42:[2,29],43:[2,29],51:[2,29],52:[2,29],53:[2,29],54:[2,29],56:[2,29],57:[2,29],58:[2,29],59:[2,29],60:[2,29],61:[2,29],62:[2,29],63:[2,29],64:[2,29],65:[2,29],66:[2,29],67:[2,29],72:[2,29],75:[2,29],87:[2,29],88:[2,29],89:[2,29],95:[2,29],96:[2,29],97:[2,29],98:[2,29],101:[2,29]},{14:[1,317],41:[1,237],42:[1,238]},{22:[1,318],41:[1,237],42:[1,238]},{1:[2,30],9:[2,30],11:[2,30],14:[2,30],15:[2,30],22:[2,30],24:[2,30],26:[2,30],27:[2,30],28:[2,30],32:[2,30],34:[2,30],35:[2,30],37:[1,319],40:[2,30],41:[2,30],42:[2,30],43:[2,30],51:[2,30],52:[2,30],53:[2,30],54:[2,30],56:[2,30],57:[2,30],58:[2,30],59:[2,30],60:[2,30],61:[2,30],62:[2,30],63:[2,30],64:[2,30],65:[2,30],66:[2,30],67:[2,30],72:[2,30],75:[2,30],87:[2,30],88:[2,30],89:[2,30],95:[2,30],96:[2,30],97:[2,30],98:[2,30],101:[2,30]},{4:[1,117],5:114,7:[1,118],8:[1,115],10:108,20:[1,202],23:[1,116],25:[1,119],38:113,44:[1,111],50:[1,112],54:[1,110],90:109,91:320},{24:[2,137],40:[2,137],41:[2,137],43:[2,137]},{41:[1,269],43:[1,321]},{13:322,22:[2,45],40:[1,155],41:[2,45],42:[2,45]},{24:[2,127],35:[1,43],40:[2,127],41:[2,127],43:[2,127],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:323,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],39:59,40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[1,61],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{24:[2,123],40:[2,123],41:[2,123],43:[2,123],57:[2,123]},{24:[2,130],35:[1,43],40:[2,130],41:[2,130],43:[2,130],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{24:[2,124],40:[2,124],41:[2,124],43:[2,124],57:[2,124]},{24:[1,324],41:[1,269]},{1:[2,15],9:[2,15],11:[2,15],14:[2,15],15:[2,15],22:[2,15],24:[2,15],26:[2,15],27:[2,15],28:[2,15],32:[2,15],34:[2,15],35:[2,15],40:[2,15],41:[2,15],42:[2,15],43:[2,15],51:[2,15],52:[2,15],53:[2,15],54:[2,15],56:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15],63:[2,15],64:[2,15],65:[2,15],66:[2,15],67:[2,15],72:[2,15],75:[2,15],87:[2,15],88:[2,15],89:[2,15],95:[2,15],96:[2,15],97:[2,15],98:[2,15],101:[2,15]},{1:[2,16],9:[2,16],11:[2,16],14:[2,16],15:[2,16],22:[2,16],24:[2,16],26:[2,16],27:[2,16],28:[2,16],32:[2,16],34:[2,16],35:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],51:[2,16],52:[2,16],53:[2,16],54:[2,16],56:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16],63:[2,16],64:[2,16],65:[2,16],66:[2,16],67:[2,16],72:[2,16],75:[2,16],87:[2,16],88:[2,16],89:[2,16],95:[2,16],96:[2,16],97:[2,16],98:[2,16],101:[2,16]},{1:[2,19],9:[2,19],11:[2,19],14:[2,19],15:[2,19],22:[2,19],24:[2,19],26:[2,19],27:[2,19],28:[2,19],32:[2,19],34:[2,19],35:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],51:[2,19],52:[2,19],53:[2,19],54:[2,19],56:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19],61:[2,19],62:[2,19],63:[2,19],64:[2,19],65:[2,19],66:[2,19],67:[2,19],72:[2,19],75:[2,19],87:[2,19],88:[2,19],89:[2,19],95:[2,19],96:[2,19],97:[2,19],98:[2,19],101:[2,19]},{9:[1,71],11:[1,72],15:[1,73],35:[1,325]},{1:[2,18],9:[2,18],11:[2,18],14:[2,18],15:[2,18],22:[2,18],24:[2,18],26:[2,18],27:[2,18],28:[2,18],32:[2,18],34:[2,18],35:[2,18],40:[2,18],41:[2,18],42:[2,18],43:[2,18],51:[2,18],52:[2,18],53:[2,18],54:[2,18],56:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18],63:[2,18],64:[2,18],65:[2,18],66:[2,18],67:[2,18],72:[2,18],75:[2,18],87:[2,18],88:[2,18],89:[2,18],95:[2,18],96:[2,18],97:[2,18],98:[2,18],101:[2,18]},{13:326,14:[2,45],40:[1,155],41:[2,45],42:[2,45]},{32:[1,327],41:[1,237],42:[1,238]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:329,20:[1,27],23:[1,35],25:[1,36],27:[1,328],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{22:[2,146],24:[2,146],35:[1,43],42:[2,146],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,146],89:[1,331],95:[2,146],97:[1,330]},{22:[2,150],24:[2,150],35:[1,43],42:[2,150],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,150],95:[2,150],97:[1,332]},{9:[1,71],11:[1,72],15:[1,73],98:[1,333]},{35:[1,43],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],88:[1,334]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:335,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:336,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,75],23:[1,35],25:[1,36]},{22:[2,164],24:[2,164],35:[1,43],42:[2,164],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,164],95:[2,164]},{22:[2,165],24:[2,165],35:[1,43],42:[2,165],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,165],95:[2,165],97:[1,337]},{1:[2,60],14:[2,60],22:[2,60],24:[2,60],26:[2,60],27:[2,60],28:[2,60],32:[2,60],35:[2,60],40:[2,60],41:[2,60],42:[2,60],43:[2,60],53:[2,60],54:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60],72:[2,60],75:[2,60],88:[2,60],89:[2,60],95:[2,60],97:[2,60],101:[2,60]},{41:[1,237],42:[1,238],43:[1,338]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:339,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{17:340,42:[1,6]},{14:[2,40],22:[2,40],32:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40]},{13:341,40:[1,155],41:[2,45],42:[2,45],43:[2,45]},{68:[1,298]},{1:[2,54],27:[2,54],41:[2,54],43:[2,54]},{41:[1,237],42:[1,238],43:[1,342]},{1:[2,8],9:[2,8],11:[2,8],14:[2,8],15:[2,8],22:[2,8],24:[2,8],26:[2,8],27:[2,8],28:[2,8],32:[2,8],34:[2,8],35:[2,8],40:[2,8],41:[2,8],42:[2,8],43:[2,8],51:[2,8],52:[2,8],53:[2,8],54:[2,8],56:[2,8],57:[2,8],58:[2,8],59:[2,8],60:[2,8],61:[2,8],62:[2,8],63:[2,8],64:[2,8],65:[2,8],66:[2,8],67:[2,8],72:[2,8],75:[2,8],87:[2,8],88:[2,8],89:[2,8],95:[2,8],96:[2,8],97:[2,8],98:[2,8],101:[2,8]},{1:[2,74],14:[2,74],22:[2,74],24:[2,74],26:[2,74],27:[2,74],28:[2,74],32:[2,74],35:[2,74],40:[2,74],41:[2,74],42:[2,74],43:[2,74],53:[2,74],54:[2,74],56:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],65:[2,74],66:[2,74],72:[2,74],75:[2,74],88:[2,74],89:[2,74],95:[2,74],97:[2,74],101:[2,74]},{17:343,42:[1,6]},{1:[2,145],14:[2,145],22:[2,145],24:[2,145],26:[2,145],27:[2,145],28:[2,145],32:[2,145],35:[2,145],40:[2,145],41:[2,145],42:[2,145],43:[2,145],53:[2,145],54:[2,145],56:[2,145],57:[2,145],58:[2,145],59:[2,145],60:[2,145],61:[2,145],62:[2,145],63:[2,145],64:[2,145],65:[2,145],66:[2,145],71:[2,145],72:[2,145],75:[2,145],88:[2,145],89:[2,145],95:[2,145],97:[2,145],101:[2,145]},{1:[2,97],14:[2,97],22:[2,97],24:[2,97],26:[2,97],27:[2,97],28:[2,97],32:[2,97],35:[2,97],40:[2,97],41:[2,97],42:[2,97],43:[2,97],53:[2,97],54:[2,97],56:[2,97],57:[2,97],58:[2,97],59:[2,97],60:[2,97],61:[2,97],62:[2,97],63:[2,97],64:[2,97],65:[2,97],66:[2,97],72:[2,97],75:[2,97],88:[2,97],89:[2,97],95:[2,97],97:[2,97],101:[2,97]},{1:[2,102],14:[2,102],22:[2,102],24:[2,102],26:[2,102],27:[2,102],28:[2,102],32:[2,102],35:[2,102],40:[2,102],41:[2,102],42:[2,102],43:[2,102],53:[2,102],54:[2,102],56:[2,102],57:[2,102],58:[2,102],59:[2,102],60:[2,102],61:[2,102],62:[2,102],63:[2,102],64:[2,102],65:[2,102],66:[2,102],72:[2,102],75:[2,102],88:[2,102],89:[2,102],95:[2,102],97:[2,102],101:[2,102]},{1:[2,103],14:[2,103],22:[2,103],24:[2,103],26:[2,103],27:[2,103],28:[2,103],32:[2,103],35:[2,103],40:[2,103],41:[2,103],42:[2,103],43:[2,103],53:[2,103],54:[2,103],56:[2,103],57:[2,103],58:[2,103],59:[2,103],60:[2,103],61:[2,103],62:[2,103],63:[2,103],64:[2,103],65:[2,103],66:[2,103],72:[2,103],75:[2,103],88:[2,103],89:[2,103],95:[2,103],97:[2,103],101:[2,103]},{1:[2,170],14:[2,170],22:[2,170],24:[2,170],26:[2,170],27:[2,170],28:[2,170],32:[2,170],35:[2,170],40:[2,170],41:[2,170],42:[2,170],43:[2,170],53:[2,170],54:[2,170],56:[2,170],57:[2,170],58:[2,170],59:[2,170],60:[2,170],61:[2,170],62:[2,170],63:[2,170],64:[2,170],65:[2,170],66:[2,170],71:[2,170],72:[2,170],75:[2,170],80:[2,170],88:[2,170],89:[2,170],95:[2,170],97:[2,170],101:[2,170]},{17:344,42:[1,6]},{1:[2,112],14:[2,112],22:[2,112],24:[2,112],26:[2,112],27:[2,112],28:[2,112],32:[2,112],35:[2,112],40:[2,112],41:[2,112],42:[2,112],43:[2,112],53:[2,112],54:[2,112],56:[2,112],57:[2,112],58:[2,112],59:[2,112],60:[2,112],61:[2,112],62:[2,112],63:[2,112],64:[2,112],65:[2,112],66:[2,112],72:[2,112],75:[2,112],88:[2,112],89:[2,112],95:[2,112],97:[2,112],101:[2,112]},{1:[2,117],14:[2,117],22:[2,117],24:[2,117],26:[2,117],27:[2,117],28:[2,117],32:[2,117],35:[2,117],40:[2,117],41:[2,117],42:[2,117],43:[2,117],53:[2,117],54:[2,117],56:[2,117],57:[2,117],58:[2,117],59:[2,117],60:[2,117],61:[2,117],62:[2,117],63:[2,117],64:[2,117],65:[2,117],66:[2,117],72:[2,117],75:[2,117],88:[2,117],89:[2,117],95:[2,117],97:[2,117],101:[2,117]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:345,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,31],9:[2,31],11:[2,31],14:[2,31],15:[2,31],22:[2,31],24:[2,31],26:[2,31],27:[2,31],28:[2,31],32:[2,31],34:[2,31],35:[2,31],40:[2,31],41:[2,31],42:[2,31],43:[2,31],51:[2,31],52:[2,31],53:[2,31],54:[2,31],56:[2,31],57:[2,31],58:[2,31],59:[2,31],60:[2,31],61:[2,31],62:[2,31],63:[2,31],64:[2,31],65:[2,31],66:[2,31],67:[2,31],72:[2,31],75:[2,31],87:[2,31],88:[2,31],89:[2,31],95:[2,31],96:[2,31],97:[2,31],98:[2,31],101:[2,31]},{17:346,42:[1,6]},{21:347,37:[1,348],73:194,75:[1,39],95:[1,38]},{1:[2,32],9:[2,32],11:[2,32],14:[2,32],15:[2,32],22:[2,32],24:[2,32],26:[2,32],27:[2,32],28:[2,32],32:[2,32],34:[2,32],35:[2,32],40:[2,32],41:[2,32],42:[2,32],43:[2,32],51:[2,32],52:[2,32],53:[2,32],54:[2,32],56:[2,32],57:[2,32],58:[2,32],59:[2,32],60:[2,32],61:[2,32],62:[2,32],63:[2,32],64:[2,32],65:[2,32],66:[2,32],67:[2,32],72:[2,32],75:[2,32],87:[2,32],88:[2,32],89:[2,32],95:[2,32],96:[2,32],97:[2,32],98:[2,32],101:[2,32]},{24:[2,138],40:[2,138],41:[2,138],43:[2,138]},{24:[2,139],40:[2,139],41:[2,139],43:[2,139]},{22:[1,349],41:[1,237],42:[1,238]},{13:350,40:[1,155],41:[2,45],42:[2,45],43:[2,45]},{37:[1,351]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:295,20:[1,27],23:[1,35],25:[1,36],27:[1,352],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{14:[1,353],41:[1,237],42:[1,238]},{30:[1,354],47:[1,297],68:[1,298]},{1:[2,26],9:[2,26],11:[2,26],14:[2,26],15:[2,26],22:[2,26],24:[2,26],26:[2,26],27:[2,26],28:[2,26],32:[2,26],34:[2,26],35:[2,26],40:[2,26],41:[2,26],42:[2,26],43:[2,26],51:[2,26],52:[2,26],53:[2,26],54:[2,26],56:[2,26],57:[2,26],58:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26],63:[2,26],64:[2,26],65:[2,26],66:[2,26],67:[2,26],72:[2,26],75:[2,26],87:[2,26],88:[2,26],89:[2,26],95:[2,26],96:[2,26],97:[2,26],98:[2,26],101:[2,26]},{27:[1,355],35:[1,43],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:356,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:357,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:358,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:359,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:360,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{22:[2,154],24:[2,154],35:[1,43],42:[2,154],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,154],95:[2,154],97:[1,361]},{9:[1,71],11:[1,72],15:[1,73],98:[1,362]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:363,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{1:[2,65],14:[2,65],22:[2,65],24:[2,65],26:[2,65],27:[2,65],28:[2,65],32:[2,65],35:[2,65],40:[2,65],41:[2,65],42:[2,65],43:[2,65],53:[2,65],54:[2,65],56:[2,65],57:[2,65],58:[2,65],59:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65],64:[2,65],65:[2,65],66:[2,65],72:[2,65],75:[2,65],88:[2,65],89:[2,65],95:[2,65],97:[2,65],101:[2,65]},{1:[2,52],27:[2,52],35:[1,43],41:[2,52],43:[2,52],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{1:[2,88],14:[2,88],22:[2,88],24:[2,88],26:[2,88],27:[2,88],28:[2,88],32:[2,88],35:[2,88],40:[2,88],41:[2,88],42:[2,88],43:[2,88],53:[2,88],54:[2,88],56:[2,88],57:[2,88],58:[2,88],59:[2,88],60:[2,88],61:[2,88],62:[2,88],63:[2,88],64:[2,88],65:[2,88],66:[2,88],72:[2,88],75:[2,88],88:[2,88],89:[2,88],95:[2,88],97:[2,88],101:[2,88]},{41:[1,237],42:[1,238],43:[1,364]},{1:[2,63],14:[2,63],22:[2,63],24:[2,63],26:[2,63],27:[2,63],28:[2,63],32:[2,63],35:[2,63],40:[2,63],41:[2,63],42:[2,63],43:[2,63],53:[2,63],54:[2,63],56:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],61:[2,63],62:[2,63],63:[2,63],64:[2,63],65:[2,63],66:[2,63],72:[2,63],75:[2,63],88:[2,63],89:[2,63],95:[2,63],97:[2,63],101:[2,63]},{1:[2,89],14:[2,89],22:[2,89],24:[2,89],26:[2,89],27:[2,89],28:[2,89],32:[2,89],35:[2,89],40:[2,89],41:[2,89],42:[2,89],43:[2,89],53:[2,89],54:[2,89],56:[2,89],57:[2,89],58:[2,89],59:[2,89],60:[2,89],61:[2,89],62:[2,89],63:[2,89],64:[2,89],65:[2,89],66:[2,89],72:[2,89],75:[2,89],88:[2,89],89:[2,89],95:[2,89],97:[2,89],101:[2,89]},{1:[2,110],14:[2,110],22:[2,110],24:[2,110],26:[2,110],27:[2,110],28:[2,110],32:[2,110],35:[2,110],40:[2,110],41:[2,110],42:[2,110],43:[2,110],53:[2,110],54:[2,110],56:[2,110],57:[2,110],58:[2,110],59:[2,110],60:[2,110],61:[2,110],62:[2,110],63:[2,110],64:[2,110],65:[2,110],66:[2,110],72:[2,110],75:[2,110],88:[2,110],89:[2,110],95:[2,110],97:[2,110],101:[2,110]},{22:[1,365],35:[1,43],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57]},{1:[2,10],9:[2,10],11:[2,10],14:[2,10],15:[2,10],22:[2,10],24:[2,10],26:[2,10],27:[2,10],28:[2,10],32:[2,10],34:[2,10],35:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],51:[2,10],52:[2,10],53:[2,10],54:[2,10],56:[2,10],57:[2,10],58:[2,10],59:[2,10],60:[2,10],61:[2,10],62:[2,10],63:[2,10],64:[2,10],65:[2,10],66:[2,10],67:[2,10],72:[2,10],75:[2,10],87:[2,10],88:[2,10],89:[2,10],95:[2,10],96:[2,10],97:[2,10],98:[2,10],101:[2,10]},{24:[1,366],73:264,75:[1,39],95:[1,38]},{24:[2,126],40:[2,126],41:[2,126],43:[2,126],57:[2,126]},{37:[1,348]},{41:[1,237],42:[1,238],43:[1,367]},{24:[2,125],40:[2,125],41:[2,125],43:[2,125],57:[2,125]},{1:[2,27],9:[2,27],11:[2,27],14:[2,27],15:[2,27],22:[2,27],24:[2,27],26:[2,27],27:[2,27],28:[2,27],32:[2,27],34:[2,27],35:[2,27],40:[2,27],41:[2,27],42:[2,27],43:[2,27],51:[2,27],52:[2,27],53:[2,27],54:[2,27],56:[2,27],57:[2,27],58:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27],63:[2,27],64:[2,27],65:[2,27],66:[2,27],67:[2,27],72:[2,27],75:[2,27],87:[2,27],88:[2,27],89:[2,27],95:[2,27],96:[2,27],97:[2,27],98:[2,27],101:[2,27]},{27:[1,368]},{27:[1,369]},{1:[2,28],9:[2,28],11:[2,28],14:[2,28],15:[2,28],22:[2,28],24:[2,28],26:[2,28],27:[2,28],28:[2,28],32:[2,28],34:[2,28],35:[2,28],40:[2,28],41:[2,28],42:[2,28],43:[2,28],51:[2,28],52:[2,28],53:[2,28],54:[2,28],56:[2,28],57:[2,28],58:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28],63:[2,28],64:[2,28],65:[2,28],66:[2,28],67:[2,28],72:[2,28],75:[2,28],87:[2,28],88:[2,28],89:[2,28],95:[2,28],96:[2,28],97:[2,28],98:[2,28],101:[2,28]},{22:[2,147],24:[2,147],35:[1,43],42:[2,147],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,147],95:[2,147]},{22:[2,148],24:[2,148],35:[1,43],42:[2,148],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,148],95:[2,148],97:[1,370]},{22:[2,151],24:[2,151],35:[1,43],42:[2,151],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,151],95:[2,151]},{22:[2,152],24:[2,152],35:[1,43],42:[2,152],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,152],95:[2,152],97:[1,371]},{22:[2,158],24:[2,158],35:[1,43],42:[2,158],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,158],89:[1,373],95:[2,158],97:[1,372]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:374,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:375,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{22:[2,166],24:[2,166],35:[1,43],42:[2,166],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,166],95:[2,166]},{14:[2,41],22:[2,41],32:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41]},{1:[2,118],14:[2,118],22:[2,118],24:[2,118],26:[2,118],27:[2,118],28:[2,118],32:[2,118],35:[2,118],40:[2,118],41:[2,118],42:[2,118],43:[2,118],53:[2,118],54:[2,118],56:[2,118],57:[2,118],58:[2,118],59:[2,118],60:[2,118],61:[2,118],62:[2,118],63:[2,118],64:[2,118],65:[2,118],66:[2,118],72:[2,118],75:[2,118],88:[2,118],89:[2,118],95:[2,118],97:[2,118],101:[2,118]},{1:[2,13],9:[2,13],11:[2,13],14:[2,13],15:[2,13],22:[2,13],24:[2,13],26:[2,13],27:[2,13],28:[2,13],32:[2,13],34:[2,13],35:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13],67:[2,13],72:[2,13],75:[2,13],87:[2,13],88:[2,13],89:[2,13],95:[2,13],96:[2,13],97:[2,13],98:[2,13],101:[2,13]},{24:[2,128],40:[2,128],41:[2,128],43:[2,128]},{1:[2,21],9:[2,21],11:[2,21],14:[2,21],15:[2,21],22:[2,21],24:[2,21],26:[2,21],27:[2,21],28:[2,21],32:[2,21],34:[2,21],35:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],51:[2,21],52:[2,21],53:[2,21],54:[2,21],56:[2,21],57:[2,21],58:[2,21],59:[2,21],60:[2,21],61:[2,21],62:[2,21],63:[2,21],64:[2,21],65:[2,21],66:[2,21],67:[2,21],72:[2,21],75:[2,21],87:[2,21],88:[2,21],89:[2,21],95:[2,21],96:[2,21],97:[2,21],98:[2,21],101:[2,21]},{1:[2,23],9:[2,23],11:[2,23],14:[2,23],15:[2,23],22:[2,23],24:[2,23],26:[2,23],27:[2,23],28:[2,23],32:[2,23],34:[2,23],35:[2,23],40:[2,23],41:[2,23],42:[2,23],43:[2,23],51:[2,23],52:[2,23],53:[2,23],54:[2,23],56:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],64:[2,23],65:[2,23],66:[2,23],67:[2,23],72:[2,23],75:[2,23],87:[2,23],88:[2,23],89:[2,23],95:[2,23],96:[2,23],97:[2,23],98:[2,23],101:[2,23]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:376,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:377,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:378,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:379,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{22:[2,155],24:[2,155],35:[1,43],42:[2,155],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,155],95:[2,155]},{22:[2,156],24:[2,156],35:[1,43],42:[2,156],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,156],95:[2,156],97:[1,380]},{22:[2,149],24:[2,149],35:[1,43],42:[2,149],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,149],95:[2,149]},{22:[2,153],24:[2,153],35:[1,43],42:[2,153],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,153],95:[2,153]},{22:[2,159],24:[2,159],35:[1,43],42:[2,159],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,159],89:[1,381],95:[2,159]},{22:[2,160],24:[2,160],35:[1,43],42:[2,160],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,160],95:[2,160],97:[1,382]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:383,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:384,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:385,20:[1,27],23:[1,35],25:[1,36],31:[1,62],33:[1,14],34:[1,13],37:[1,26],54:[1,15],55:[1,16],69:[1,17],70:18,73:19,74:[1,20],75:[1,39],76:[1,21],77:[1,22],78:[1,23],81:[1,24],84:[1,25],94:[1,37],95:[1,38]},{22:[2,157],24:[2,157],35:[1,43],42:[2,157],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,157],95:[2,157]},{22:[2,162],24:[2,162],35:[1,43],42:[2,162],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,162],95:[2,162]},{22:[2,161],24:[2,161],35:[1,43],42:[2,161],53:[1,44],54:[1,45],56:[1,46],57:[1,47],58:[1,48],59:[1,49],60:[1,50],61:[1,51],62:[1,52],63:[1,53],64:[1,54],65:[1,55],66:[1,56],72:[1,57],75:[2,161],95:[2,161]}],
defaultActions: {2:[2,175]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    if (typeof this.lexer.yylloc == 'undefined')
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    if (typeof this.yy.parseError === 'function')
        this.parseError = this.yy.parseError;

    function popStack (n) {
        stack.length = stack.length - 2*n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || 1; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length-1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol == null)
                symbol = lex();
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

        // handle parse error
        _handle_error:
        if (typeof action === 'undefined' || !action.length || !action[0]) {

            if (!recovering) {
                // Report error
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'"+this.terminals_[p]+"'");
                }
                var errStr = '';
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + this.terminals_[symbol]+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == 1 /*EOF*/ ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr,
                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol == EOF) {
                    throw new Error(errStr || 'Parsing halted.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            while (1) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    break;
                }
                if (state == 0) {
                    throw new Error(errStr || 'Parsing halted.');
                }
                popStack(1);
                state = stack[stack.length-1];
            }

            preErrorSymbol = symbol; // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0)
                        recovering--;
                } else { // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2: // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3: // accept
                return true;
        }

    }

    return true;
}};
undefined


/***/ },
/* 5 */
/***/ function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ },
/* 6 */
/***/ function(module, exports) {



/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var __split = ''.split;
module.exports = function(LiveScript){
  var fs, path;
  fs = __webpack_require__(6);
  path = __webpack_require__(7);
  LiveScript.run = function(code, options, js){
    var filename, main, dirname, __ref;
    if (options != null) {
      filename = options.filename;
    }
    main = __webpack_require__.c[__webpack_require__.s];
    if (filename) {
      dirname = path.dirname(fs.realpathSync(filename = process.argv[1] = path.resolve(filename)));
    } else {
      dirname = filename = '.';
    }
    main.paths = main.constructor._nodeModulePaths(dirname);
    main.filename = filename;
    js || (code = LiveScript.compile(code, (__ref = {}, __import(__ref, options), __ref.bare = true, __ref)));
    try {
      return main._compile(code, filename);
    } catch (e) {
      throw hackTrace(e, code, filename);
    }
  };
  __importAll(LiveScript, __webpack_require__(5).EventEmitter.prototype);
  ({})['.ls'] = function(module, filename){
    var js;
    js = LiveScript.compile(fs.readFileSync(filename, 'utf8'), {
      filename: filename,
      bare: true
    });
    try {
      return module._compile(js, filename);
    } catch (e) {
      throw hackTrace(e, js, filename);
    }
  };
};
function hackTrace(error, js, filename){
  var stack, traces, i, trace, index, lno, end, length, lines, n, __len, __ref;
  if (error != null) {
    stack = error.stack;
  }
  if (!stack) {
    return error;
  }
  traces = __split.call(stack, '\n');
  if (!(traces.length > 1)) {
    return error;
  }
  for (i = 0, __len = traces.length; i < __len; ++i) {
    trace = traces[i];
    if (0 > (index = trace.indexOf("(" + filename + ":"))) {
      continue;
    }
    lno = (/:(\d+):/.exec(trace.slice(index + filename.length)) || '')[1];
    if (!(lno = +lno)) {
      continue;
    }
    length = ('' + (end = lno + 4)).length;
    lines || (lines = __split.call(js, '\n'));
    for (n = 1 > (__ref = lno - 4) ? 1 : __ref; n <= end; ++n) {
      traces[i] += "\n" + ('    ' + n).slice(-length) + "" + '|+'.charAt(n === lno) + " " + [lines[n - 1]];
    }
  }
  return error.stack = traces.join('\n'), error;
}
function __import(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function __importAll(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

self.Livescript  = __webpack_require__(1);

self.onmessage = function(ev) {
  var data = JSON.parse(ev.data);
  var opts = data.options || {};
  var js = data.js;
  var result;
  var err

    try {
      result = self.Livescript.compile(js, opts);
    } catch (e) {
      err = e
    }

  self.postMessage(JSON.stringify({err: err, js: result}))
};


/***/ }
/******/ ]);
//# sourceMappingURL=livescript-0.9.11.min.js.map