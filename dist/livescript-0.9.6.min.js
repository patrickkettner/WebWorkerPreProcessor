/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

var lexer, parser;
lexer = __webpack_require__(3);
parser = __webpack_require__(4).parser;
parser.yy = __webpack_require__(2);
parser.lexer = {
  lex: function(){
    var tag, __ref;
    __ref = this.tokens[++this.pos] || [''], tag = __ref[0], this.yytext = __ref[1], this.yylineno = __ref[2];
    return tag;
  },
  setInput: function(it){
    this.pos = -1;
    return this.tokens = it;
  },
  upcomingInput: function(){
    return '';
  }
};
exports.VERSION = '0.9.6';
exports.compile = function(code, options){
  var that;
  try {
    return parser.parse(lexer.lex(code)).compileRoot(options);
  } catch (e) {
    if (that = options != null ? options.filename : void 8) {
      e.message += "\nat " + that;
    }
    throw e;
  }
};
exports.ast = function(it){
  return parser.parse(typeof it === 'string' ? lexer.lex(it) : it);
};
exports.tokens = lexer.lex;
exports.lex = function(it){
  return lexer.lex(it, {
    raw: true
  });
};
exports.run = function(code, options){
  var __ref;
  return Function(exports.compile(code, (__ref = {}, __import(__ref, options), __ref.bare = true, __ref)))();
};
exports.tokens.rewrite = lexer.rewrite;
__importAll(exports.ast, parser.yy);
if (true) {
  __webpack_require__(8)(exports);
} else {
  exports.require = require;
  if ('' + this === '[object BackstagePass]') {
    this.EXPORTED_SYMBOLS = ['LiveScript'];
  }
}
function __import(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function __importAll(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}

/***/ },
/* 2 */
/***/ function(module, exports) {

var Node, Negatable, Block, Atom, Literal, Var, Key, Index, Chain, Call, List, Obj, Prop, Arr, Unary, Binary, Assign, Import, In, Existence, Fun, Class, Super, Parens, Splat, Jump, Throw, Return, While, For, Try, Switch, Case, If, Label, JS, Util, UTILS, LEVEL_TOP, LEVEL_PAREN, LEVEL_LIST, LEVEL_COND, LEVEL_OP, LEVEL_CALL, PREC, TAB, ID, SIMPLENUM, __ref, __slice = [].slice;
(Node = function(){
  throw Error('unimplemented');
}).prototype = {
  compile: function(options, level){
    var o, key, node, code, that, tmp, __i, __len;
    o = {};
    for (key in options) {
      o[key] = options[key];
    }
    if (level != null) {
      o.level = level;
    }
    node = this.unfoldSoak(o) || this;
    if (o.level && node.isStatement()) {
      return node.compileClosure(o);
    }
    code = (node.tab = o.indent, node).compileNode(o);
    if (that = node.temps) {
      for (__i = 0, __len = that.length; __i < __len; ++__i) {
        tmp = that[__i];
        o.scope.free(tmp);
      }
    }
    return code;
  },
  compileClosure: function(o){
    var that, fun, call, hasArgs, hasThis;
    if (that = this.getJump()) {
      that.carp('inconvertible statement');
    }
    fun = Fun([], Block(this));
    call = Call();
    hasThis = hasArgs = false;
    this.traverseChildren(function(it){
      switch (it.value) {
      case 'this':
        hasThis = true;
        break;
      case 'arguments':
        hasArgs = it.value = '__args';
      }
    });
    if (hasThis) {
      call.args.push(Literal('this'));
      call.method = '.call';
    }
    if (hasArgs) {
      call.args.push(Literal('arguments'));
      fun.params.push(Var('__args'));
    }
    return Parens(Chain((fun.wrapper = true, fun['void'] = this['void'], fun), [call]), true).compile(o);
  },
  compileBlock: function(o, node){
    var that;
    if (that = node != null ? node.compile(o, LEVEL_TOP) : void 8) {
      return "{\n" + that + "\n" + this.tab + "}";
    } else {
      return '{}';
    }
  },
  cache: function(o, once, level){
    var ref, sub, __ref;
    if (!this.isComplex()) {
      return [__ref = level != null ? this.compile(o, level) : this, __ref];
    }
    sub = Assign(ref = Var(o.scope.temporary()), this);
    if (level != null) {
      sub = sub.compile(o, level);
      if (once) {
        o.scope.free(ref.value);
      }
      return [sub, ref.value];
    }
    if (once) {
      return [sub, (ref.temp = true, ref)];
    } else {
      return [sub, ref, [ref.value]];
    }
  },
  compileLoopReference: function(o, name, ret){
    var tmp, asn, __ref;
    if (this instanceof Var && o.scope.check(this.value) || this instanceof Unary && ((__ref = this.op) == '+' || __ref == '-') && (-1 / 0 < (__ref = +this.it.value) && __ref < 1 / 0) || this instanceof Literal && !this.isComplex()) {
      return [__ref = this.compile(o), __ref];
    }
    asn = Assign(Var(tmp = o.scope.temporary(name)), this);
    ret || (asn['void'] = true);
    return [tmp, asn.compile(o, ret ? LEVEL_CALL : LEVEL_PAREN)];
  },
  eachChild: function(fn){
    var name, child, i, node, that, __i, __ref, __len, __len1;
    for (__i = 0, __len = (__ref = this.children).length; __i < __len; ++__i) {
      name = __ref[__i];
      if (child = this[name]) {
        if ('length' in child) {
          for (i = 0, __len1 = child.length; i < __len1; ++i) {
            node = child[i];
            if (that = fn(node, name, i)) {
              return that;
            }
          }
        } else {
          if ((that = fn(child, name)) != null) {
            return that;
          }
        }
      }
    }
  },
  traverseChildren: function(fn, xscope){
    var __this = this;
    return this.eachChild(function(node, name, index){
      var __ref;
      return (__ref = fn(node, __this, name, index)) != null
        ? __ref
        : node.traverseChildren(fn, xscope);
    });
  },
  anaphorize: function(){
    var base, name, __ref;
    this.children = this.aTargets;
    if (this.eachChild(hasThat)) {
      if ((base = this)[name = this.aSource] instanceof Existence) {
        base = base[name];
        name = 'it';
      }
      if (base[name].value !== 'that') {
        base[name] = Assign(Var('that'), base[name]);
      }
    }
    function hasThat(it){
      var that;
      return it.value === 'that' || ((that = it.aSource)
        ? (that = it[that]) ? hasThat(that) : void 8
        : it.eachChild(hasThat));
    }
    delete this.children;
    return __ref = this[this.aSource], __ref.cond = true, __ref;
  },
  carp: function(it){
    throw SyntaxError(it + " on line " + (this.line || this.traverseChildren(function(it){
      return it.line;
    })));
  },
  delegate: function(names, fn){
    var name, __i, __len;
    for (__i = 0, __len = names.length; __i < __len; ++__i) {
      name = names[__i];
      (__fn.call(this, name));
    }
    function __fn(name){
      this[name] = function(it){
        return fn.call(this, name, it);
      };
    }
  },
  children: [],
  terminator: ';',
  isComplex: YES,
  isStatement: NO,
  isAssignable: NO,
  isCallable: NO,
  isEmpty: NO,
  isArray: NO,
  isString: NO,
  isRegex: NO,
  isMatcher: function(){
    return this.isString() || this.isRegex();
  },
  assigns: NO,
  ripName: VOID,
  unfoldSoak: VOID,
  unfoldAssign: VOID,
  unwrap: THIS,
  maybeKey: THIS,
  expandSlice: THIS,
  varName: String,
  getAccessors: VOID,
  getCall: VOID,
  getDefault: VOID,
  getJump: VOID,
  invert: function(){
    return Unary('!', this, true);
  },
  makeReturn: function(arref){
    if (arref) {
      return Call.make(JS(arref + '.push'), [this]);
    } else {
      return Return(this);
    }
  },
  show: String,
  toString: function(idt){
    var tree, that;
    idt || (idt = '');
    tree = '\n' + idt + this.constructor.displayName;
    if (that = this.show()) {
      tree += ' ' + that;
    }
    this.eachChild(function(it){
      tree += it.toString(idt + TAB);
    });
    return tree;
  },
  stringify: function(space){
    return JSON.stringify(this, null, space);
  },
  toJSON: function(){
    return __import({
      type: this.constructor.displayName
    }, this);
  }
};
exports.parse = function(json){
  return exports.fromJSON(JSON.parse(json));
};
exports.fromJSON = (function(){
  function fromJSON(it){
    var that, node, key, val, v;
    if (!(it && typeof it === 'object')) {
      return it;
    }
    if (that = it.type) {
      node = __clone(exports[that].prototype);
      for (key in it) {
        val = it[key];
        node[key] = fromJSON(val);
      }
      return node;
    }
    if (it.length != null) {
      return (function(){
        var __i, __ref, __len, __results = [];
        for (__i = 0, __len = (__ref = it).length; __i < __len; ++__i) {
          v = __ref[__i];
          __results.push(fromJSON(v));
        }
        return __results;
      }());
    } else {
      return it;
    }
  }
  return fromJSON;
}());
Negatable = {
  show: function(){
    return this.negated && '!';
  },
  invert: function(){
    this.negated = !this.negated;
    return this;
  }
};
exports.Block = Block = (function(superclass){
  Block.displayName = 'Block';
  var prototype = __extend(Block, superclass).prototype, constructor = Block;
  function Block(node){
    var __this = this instanceof __ctor ? this : new __ctor;
    if (node instanceof Block) {
      return node;
    }
    __this.lines = [];
    if (node) {
      __this.add(node);
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['lines'];
  prototype.toJSON = function(){
    delete this.back;
    return superclass.prototype.toJSON.call(this);
  };
  prototype.add = function(it){
    var that, __ref;
    switch (false) {
    case !(that = this.back):
      that.add(it);
      break;
    case !(that = it.lines):
      (__ref = this.lines).push.apply(__ref, that);
      break;
    default:
      this.lines.push(it);
      if (that = it.back, delete it.back, that) {
        this.back = that;
      }
    }
    return this;
  };
  prototype.prepend = function(){
    var __ref;
    (__ref = this.lines).splice.apply(__ref, [this.neck(), 0].concat(__slice.call(arguments)));
    return this;
  };
  prototype.pipe = function(target, type){
    switch (type) {
    case '|>':
      this.lines.push(Call.make(target, [this.lines.pop()]));
      break;
    case '<|':
      this.lines.push(Call.make(this.lines.pop(), [target]));
      break;
    case '|>>':
      this.lines.push(Assign(Var('_'), this.lines.pop()), target);
    }
    return this;
  };
  prototype.unwrap = function(){
    if (this.lines.length === 1) {
      return this.lines[0];
    } else {
      return this;
    }
  };
  prototype.chomp = function(){
    var lines, i, that;
    lines = this.lines;
    i = lines.length;
    while (that = lines[--i]) {
      if (!that.comment) {
        break;
      }
    }
    lines.length = i + 1;
    return this;
  };
  prototype.neck = function(){
    var pos, x, __ref, __len;
    for (pos = 0, __len = (__ref = this.lines).length; pos < __len; ++pos) {
      x = __ref[pos];
      if (!(x.comment || x instanceof Literal)) {
        break;
      }
    }
    return pos;
  };
  prototype.isComplex = function(){
    var __ref;
    return this.lines.length > 1 || ((__ref = this.lines[0]) != null ? __ref.isComplex() : void 8);
  };
  prototype.delegate(['isCallable', 'isArray', 'isString', 'isRegex'], function(it){
    var __ref;
    return (__ref = (__ref = this.lines)[__ref.length - 1]) != null ? __ref[it]() : void 8;
  });
  prototype.getJump = function(it){
    var node, that, __i, __ref, __len;
    for (__i = 0, __len = (__ref = this.lines).length; __i < __len; ++__i) {
      node = __ref[__i];
      if (that = node.getJump(it)) {
        return that;
      }
    }
  };
  prototype.makeReturn = function(it){
    var that, __ref, __key, __ref1;
    if (that = (__ref1 = __ref = this.lines)[__key = __ref1.length - 1] != null ? __ref[__key] = __ref[__key].makeReturn(it) : void 8) {
      if (that instanceof Return && !that.it) {
        --this.lines.length;
      }
    }
    return this;
  };
  prototype.compile = function(o, level){
    var tab, node, code, codes, __res, __i, __ref, __len;
    level == null && (level = o.level);
    if (level) {
      return this.compileExpressions(o, level);
    }
    o.block = this;
    tab = o.indent;
    __res = [];
    for (__i = 0, __len = (__ref = this.lines).length; __i < __len; ++__i) {
      node = __ref[__i];
      node = node.unfoldSoak(o) || node;
      code = tab + (node.front = true, node).compile(o, level);
      if (node.isStatement()) {
        __res.push(code);
      } else {
        __res.push(code + node.terminator);
      }
    }
    codes = __res;
    return codes.join('\n');
  };
  prototype.compileRoot = function(options){
    var o, saveTo, bare, prefix, code, __ref;
    o = (__import({
      level: LEVEL_TOP,
      scope: this.scope = Scope.root = new Scope
    }, options));
    if (saveTo = o.saveScope, delete o.saveScope, saveTo) {
      o.scope = saveTo.savedScope || (saveTo.savedScope = o.scope);
    }
    delete o.filename;
    o.indent = (bare = o.bare, delete o.bare, bare) ? '' : TAB;
    if (/^\s*(?:[/#]|javascript:)/.test((__ref = this.lines[0]) != null ? __ref.code : void 8)) {
      prefix = this.lines.shift().code + '\n';
    }
    if ((__ref = o.eval, delete o.eval, __ref) && this.chomp().lines.length) {
      if (bare) {
        this.lines.push(Parens(this.lines.pop()));
      } else {
        this.makeReturn();
      }
    }
    code = this.compileWithDeclarations(o);
    bare || (code = "(function(){\n" + code + "\n}).call(this);\n");
    return [prefix] + code;
  };
  prototype.compileWithDeclarations = function(o){
    var pre, i, rest, post, that;
    o.level = LEVEL_TOP;
    pre = '';
    if (i = this.neck()) {
      rest = this.lines.splice(i, 9e9);
      pre = this.compile(o);
      this.lines = rest;
    }
    if (!(post = this.compile(o))) {
      return pre;
    }
    return (pre && pre + "\n") + ((that = this.scope) ? that.emit(post, o.indent) : post);
  };
  prototype.compileExpressions = function(o, level){
    var lines, i, that, code, last, node, __i, __len;
    lines = this.lines;
    i = -1;
    while (that = lines[++i]) {
      if (that.comment) {
        lines.splice(i--, 1);
      }
    }
    if (!lines.length) {
      lines.push(Literal('void'));
    }
    lines[0].front = this.front;
    lines[lines.length - 1]['void'] = this['void'];
    if (!lines[1]) {
      return lines[0].compile(o, level);
    }
    code = '';
    last = lines.pop();
    for (__i = 0, __len = lines.length; __i < __len; ++__i) {
      node = lines[__i];
      code += (node['void'] = true, node).compile(o, LEVEL_PAREN) + ', ';
    }
    code += last.compile(o, LEVEL_PAREN);
    if (level < LEVEL_LIST) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  return Block;
}(Node));
Atom = (function(superclass){
  Atom.displayName = 'Atom';
  var prototype = __extend(Atom, superclass).prototype, constructor = Atom;
  prototype.show = function(){
    return this.value;
  };
  prototype.isComplex = NO;
  function Atom(){}
  return Atom;
}(Node));
exports.Literal = Literal = (function(superclass){
  Literal.displayName = 'Literal';
  var prototype = __extend(Literal, superclass).prototype, constructor = Literal;
  function Literal(value){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.value = value;
    if (value.js) {
      return JS(value + "", true);
    }
    if (value === 'super') {
      return new Super;
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.isEmpty = function(){
    switch (this.value) {
    case 'void':
    case 'null':
      return true;
    }
  };
  prototype.isCallable = function(){
    switch (this.value) {
    case 'this':
    case 'eval':
      return true;
    }
  };
  prototype.isString = function(){
    return 0 <= '\'"'.indexOf((this.value + "").charAt());
  };
  prototype.isRegex = function(){
    return (this.value + "").charAt() === '/';
  };
  prototype.isComplex = function(){
    return this.isRegex() || this.value === 'debugger';
  };
  prototype.isWhat = function(){
    switch (false) {
    case !this.isEmpty():
      return 'empty';
    case !this.isCallable():
      return 'callable';
    case !this.isString():
      return 'string';
    case !this.isRegex():
      return 'regex';
    case !this.isComplex():
      return 'complex';
    }
  };
  prototype.varName = function(){
    if (/^\w+$/.test(this.value)) {
      return '$' + this.value;
    } else {
      return '';
    }
  };
  prototype.compile = function(o, level){
    var val, __ref;
    level == null && (level = o.level);
    switch (val = this.value + "") {
    case 'this':
      return ((__ref = o.scope.fun) != null ? __ref.bound : void 8) || val;
    case 'undefined':
      val = 'void';
      // fallthrough
    case 'void':
      val += ' 8';
      // fallthrough
    case 'null':
      if (level === LEVEL_CALL) {
        this.carp('invalid use of ' + this.value);
      }
      break;
    case 'on':
    case 'yes':
      val = 'true';
      break;
    case 'off':
    case 'no':
      val = 'false';
      break;
    case '*':
      this.carp('stray star');
      break;
    case 'debugger':
      if (level) {
        return "(function(){\n" + TAB + o.indent + "debugger;\n" + o.indent + "}())";
      }
    }
    return val;
  };
  return Literal;
}(Atom));
exports.Var = Var = (function(superclass){
  Var.displayName = 'Var';
  var prototype = __extend(Var, superclass).prototype, constructor = Var;
  function Var(value){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.value = value;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.isAssignable = prototype.isCallable = YES;
  prototype.assigns = function(it){
    return it === this.value;
  };
  prototype.maybeKey = function(){
    var __ref;
    return __ref = Key(this.value), __ref.line = this.line, __ref;
  };
  prototype.varName = prototype.show;
  prototype.compile = function(o){
    if (this.temp) {
      return o.scope.free(this.value);
    } else {
      return this.value;
    }
  };
  return Var;
}(Atom));
exports.Key = Key = (function(superclass){
  Key.displayName = 'Key';
  var prototype = __extend(Key, superclass).prototype, constructor = Key;
  function Key(name, reserved){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.reserved = reserved || name.reserved;
    __this.name = '' + name;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.isAssignable = function(){
    return !this.reserved;
  };
  prototype.assigns = function(it){
    return it === this.name;
  };
  prototype.varName = function(){
    var name;
    name = this.name;
    if (this.reserved || (name == 'arguments' || name == 'eval')) {
      return "$" + name;
    } else {
      return name;
    }
  };
  prototype.compile = prototype.show = function(){
    if (this.reserved) {
      return "'" + this.name + "'";
    } else {
      return this.name;
    }
  };
  return Key;
}(Atom));
exports.Index = Index = (function(superclass){
  Index.displayName = 'Index';
  var prototype = __extend(Index, superclass).prototype, constructor = Index;
  function Index(key, symbol, init){
    var k, __this = this instanceof __ctor ? this : new __ctor;
    symbol || (symbol = '.');
    if (init && key instanceof Arr) {
      switch (key.items.length) {
      case 0:
        key = Key('__proto__');
        break;
      case 1:
        if (!((k = key.items[0]) instanceof Splat)) {
          key = Parens(k);
        }
      }
    }
    switch (symbol.slice(-1)) {
    case '=':
      __this.assign = symbol.slice(1);
      break;
    case '@':
      __this.vivify = symbol.length > 2 ? Arr : Obj;
    }
    __this.key = key;
    __this.symbol = symbol;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['key'];
  prototype.show = function(){
    return (this.soak || '') + this.symbol;
  };
  prototype.isComplex = function(){
    return this.key.isComplex();
  };
  prototype.varName = function(){
    var __ref;
    return ((__ref = this.key) instanceof Key || __ref instanceof Literal) && this.key.varName();
  };
  prototype.compile = function(o){
    var code;
    code = this.key.compile(o, LEVEL_PAREN);
    if (this.key instanceof Key && '\'' !== code.charAt(0)) {
      return "." + code;
    } else {
      return "[" + code + "]";
    }
  };
  return Index;
}(Node));
exports.Chain = Chain = (function(superclass){
  Chain.displayName = 'Chain';
  var prototype = __extend(Chain, superclass).prototype, constructor = Chain;
  function Chain(head, tails){
    var __this = this instanceof __ctor ? this : new __ctor;
    if (!tails && head instanceof Chain) {
      return head;
    }
    __this.head = head;
    __this.tails = tails || [];
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['head', 'tails'];
  prototype.add = function(it){
    var that, __ref;
    if (this.head instanceof Existence) {
      __ref = Chain(this.head.it), this.head = __ref.head, this.tails = __ref.tails;
      it.soak = true;
    }
    this.tails.push(it);
    if (it instanceof Call && !it.method && this.head instanceof Super) {
      it.method = '.call';
      it.args.unshift(Literal('this'));
    } else if (that = it.vivify, delete it.vivify, that) {
      this.head = Assign(Chain(this.head, this.tails.splice(0, 9e9)), that(), '=', '||');
    }
    return this;
  };
  prototype.unwrap = function(){
    if (this.tails.length) {
      return this;
    } else {
      return this.head;
    }
  };
  prototype.delegate(['getJump', 'assigns', 'isStatement', 'isString'], function(it, arg){
    return !this.tails.length && this.head[it](arg);
  });
  prototype.isComplex = function(){
    return this.tails.length || this.head.isComplex();
  };
  prototype.isCallable = function(){
    var that, __ref;
    if (that = (__ref = this.tails)[__ref.length - 1]) {
      return !((__ref = that.key) != null && __ref.items);
    } else {
      return this.head.isCallable();
    }
  };
  prototype.isArray = function(){
    var that, __ref;
    if (that = (__ref = this.tails)[__ref.length - 1]) {
      return that.key instanceof Arr;
    } else {
      return this.head.isArray();
    }
  };
  prototype.isRegex = function(){
    return this.head.value === 'RegExp' && !this.tails[1] && this.tails[0] instanceof Call;
  };
  prototype.isAssignable = function(){
    var tail, __ref, __i, __len;
    if (!(tail = (__ref = this.tails)[__ref.length - 1])) {
      return this.head.isAssignable();
    }
    if (!(tail instanceof Index) || tail.key instanceof List) {
      return false;
    }
    for (__i = 0, __len = (__ref = this.tails).length; __i < __len; ++__i) {
      tail = __ref[__i];
      if (tail.assign) {
        return false;
      }
    }
    return true;
  };
  prototype.isSimpleAccess = function(){
    return this.tails.length === 1 && !this.head.isComplex() && !this.tails[0].isComplex();
  };
  prototype.makeReturn = function(it){
    if (this.tails.length) {
      return superclass.prototype.makeReturn.apply(this, arguments);
    } else {
      return this.head.makeReturn(it);
    }
  };
  prototype.getCall = function(){
    var tail, __ref;
    return (tail = (__ref = this.tails)[__ref.length - 1]) instanceof Call && tail;
  };
  prototype.varName = function(){
    var __ref;
    return (__ref = (__ref = this.tails)[__ref.length - 1]) != null ? __ref.varName() : void 8;
  };
  prototype.cacheReference = function(o){
    var name, base, ref, bref, nref, __ref;
    name = (__ref = this.tails)[__ref.length - 1];
    if (name instanceof Call) {
      return this.cache(o, true);
    }
    if (this.tails.length < 2 && !this.head.isComplex() && !(name != null && name.isComplex())) {
      return [this, this];
    }
    base = Chain(this.head, this.tails.slice(0, -1));
    if (base.isComplex()) {
      ref = o.scope.temporary();
      base = Chain(Assign(Var(ref), base));
      bref = (__ref = Var(ref), __ref.temp = true, __ref);
    }
    if (!name) {
      return [base, bref];
    }
    if (name.isComplex()) {
      ref = o.scope.temporary('key');
      name = Index(Assign(Var(ref), name.key));
      nref = Index((__ref = Var(ref), __ref.temp = true, __ref));
    }
    return [base.add(name), Chain(bref || base.head, [nref || name])];
  };
  prototype.compileNode = function(o){
    var head, tails, that, base, rest, news, t, __i, __ref, __len;
    head = this.head, tails = this.tails;
    head.front = this.front;
    head.newed = this.newed;
    if (!tails.length) {
      return head.compile(o);
    }
    if (that = this.unfoldAssign(o)) {
      return that.compile(o);
    }
    if (tails[0] instanceof Call && !head.isCallable()) {
      this.carp('invalid callee');
    }
    this.expandSlice(o);
    this.expandBind(o);
    this.expandSplat(o);
    this.expandStar(o);
    if (!this.tails.length) {
      return this.head.compile(o);
    }
    base = this.head.compile(o, LEVEL_CALL);
    news = rest = '';
    for (__i = 0, __len = (__ref = this.tails).length; __i < __len; ++__i) {
      t = __ref[__i];
      if (t['new']) {
        news += 'new ';
      }
      rest += t.compile(o);
    }
    if ('.' === rest.charAt(0) && SIMPLENUM.test(base)) {
      base += ' ';
    }
    return news + base + rest;
  };
  prototype.unfoldSoak = function(o){
    var that, i, node, bust, test, __ref, __len, __ref1;
    if (that = this.head.unfoldSoak(o)) {
      (__ref = that.then.tails).push.apply(__ref, this.tails);
      return that;
    }
    for (i = 0, __len = (__ref = this.tails).length; i < __len; ++i) {
      node = __ref[i];
      if (__ref1 = node.soak, delete node.soak, __ref1) {
        bust = Chain(this.head, this.tails.splice(0, i));
        test = node instanceof Call
          ? (__ref1 = bust.cacheReference(o), test = __ref1[0], this.head = __ref1[1], JS("typeof " + test.compile(o, LEVEL_OP) + " === 'function'"))
          : (i && node.assign
            ? (__ref1 = bust.cacheReference(o), test = __ref1[0], bust = __ref1[1], this.head = bust.head, (__ref1 = this.tails).unshift.apply(__ref1, bust.tails))
            : (__ref1 = bust.unwrap().cache(o, true), test = __ref1[0], this.head = __ref1[1]), Existence(test));
        return __ref1 = If(test, this), __ref1.soak = true, __ref1.cond = this.cond, __ref1['void'] = this['void'], __ref1;
      }
    }
  };
  prototype.unfoldAssign = function(o){
    var that, i, index, op, left, lefts, rites, node, __ref, __len, __len1, __ref1;
    if (that = this.head.unfoldAssign(o)) {
      (__ref = that.right.tails).push.apply(__ref, this.tails);
      return that;
    }
    for (i = 0, __len = (__ref = this.tails).length; i < __len; ++i) {
      index = __ref[i];
      if (op = index.assign) {
        index.assign = '';
        left = Chain(this.head, this.tails.splice(0, i)).expandSlice(o).unwrap();
        if (left instanceof Arr) {
          lefts = left.items;
          rites = (this.head = Arr()).items;
          for (i = 0, __len1 = lefts.length; i < __len1; ++i) {
            node = lefts[i];
            __ref1 = Chain(node).cacheReference(o), rites[i] = __ref1[0], lefts[i] = __ref1[1];
          }
        } else {
          __ref1 = Chain(left).cacheReference(o), left = __ref1[0], this.head = __ref1[1];
        }
        return __ref1 = Assign(left, this, op), __ref1.access = true, __ref1;
      }
    }
  };
  prototype.expandSplat = function(o){
    var tails, i, call, args, ctx, __ref;
    tails = this.tails;
    i = -1;
    while (call = tails[++i]) {
      if (!(args = call.args)) {
        continue;
      }
      ctx = call.method === '.call' && (args = args.concat()).shift();
      if (!(args = Splat.compileArray(o, args, true))) {
        continue;
      }
      if (call['new']) {
        this.carp('splatting "new"');
      }
      if (!ctx && tails[i - 1] instanceof Index) {
        __ref = Chain(this.head, tails.splice(0, i - 1)).cache(o, true), this.head = __ref[0], ctx = __ref[1];
        i = 0;
      }
      call.method = '.apply';
      call.args = [ctx || Literal('null'), JS(args)];
    }
  };
  prototype.expandBind = function(o){
    var tails, i, that, obj, key, call;
    tails = this.tails;
    i = -1;
    while (that = tails[++i]) {
      if (that.symbol !== '.~') {
        continue;
      }
      that.symbol = '';
      obj = Chain(this.head, tails.splice(0, i)).unwrap();
      key = tails.shift().key;
      call = Call.make(Util('bind'), [obj, (key.reserved = true, key)]);
      this.head = this.newed ? Parens(call, true) : call;
      i = -1;
    }
  };
  prototype.expandStar = function(o){
    var tails, i, that, stars, sub, ref, temps, value, star, __ref, __i, __len;
    tails = this.tails;
    i = -1;
    while (that = tails[++i]) {
      if (that.args || that.stars || that.key instanceof Key) {
        continue;
      }
      stars = that.stars = [];
      that.eachChild(seek);
      if (!stars.length) {
        continue;
      }
      __ref = Chain(this.head, tails.splice(0, i)).unwrap().cache(o), sub = __ref[0], ref = __ref[1], temps = __ref[2];
      value = Chain(ref, [Index(Key('length'))]).compile(o);
      for (__i = 0, __len = stars.length; __i < __len; ++__i) {
        star = stars[__i];
        star.value = value;
        star.isAssignable = YES;
      }
      this.head = JS(sub.compile(o, LEVEL_CALL) + tails.shift().compile(o));
      if (temps) {
        o.scope.free(temps[0]);
      }
      i = -1;
    }
    function seek(it){
      if (it.value === '*') {
        stars.push(it);
      } else if (!(it instanceof Index)) {
        it.eachChild(seek);
      }
    }
  };
  prototype.expandSlice = function(o, assign){
    var tails, i, tail, __ref, _;
    tails = this.tails;
    i = -1;
    while (tail = tails[++i]) {
      if ((__ref = tail.key) != null && __ref.items) {
        if (tails[i + 1] instanceof Call) {
          tail.carp('calling a slice');
        }
        _ = tails.splice(0, i + 1);
        _ = _.pop().key.toSlice(o, Chain(this.head, _).unwrap(), assign);
        this.head = (_.front = this.front, _);
        i = -1;
      }
    }
    return this;
  };
  return Chain;
}(Node));
exports.Call = Call = (function(superclass){
  Call.displayName = 'Call';
  var prototype = __extend(Call, superclass).prototype, constructor = Call;
  function Call(args){
    var splat, __this = this instanceof __ctor ? this : new __ctor;
    args || (args = []);
    if (args.length === 1 && (splat = args[0]) instanceof Splat) {
      if (splat.filler) {
        __this.method = '.call';
        args[0] = Literal('this');
        args[1] = Splat(Literal('arguments'));
      } else if (splat.it instanceof Arr) {
        args = splat.it.items;
      }
    }
    __this.args = args;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['args'];
  prototype.show = function(){
    return [this['new']] + [this.method] + [this.soak ? '?' : void 8];
  };
  prototype.compile = function(o){
    var code, i, a, __ref, __len;
    code = (this.method || '') + '(';
    for (i = 0, __len = (__ref = this.args).length; i < __len; ++i) {
      a = __ref[i];
      code += (i ? ', ' : '') + a.compile(o, LEVEL_LIST);
    }
    return code + ')';
  };
  Call.make = function(callee, args){
    return Chain(callee).add(Call(args));
  };
  Call.block = function(fun, args, method){
    var __ref, __ref1;
    return __ref = Parens(Chain(fun, [(__ref1 = Call(args), __ref1.method = method, __ref1)]), true), __ref.calling = true, __ref;
  };
  Call.back = function(params, node, bound){
    var fun, args, index, a, __len;
    fun = Fun(params, void 8, bound);
    if (fun['void'] = node.op === '!') {
      node = node.it;
    }
    if (node instanceof Label) {
      fun.name = node.label;
      fun.labeled = true;
      node = node.it;
    }
    if (!fun['void'] && (fun['void'] = node.op === '!')) {
      node = node.it;
    }
    args = (node.getCall() || (node = Chain(node).add(Call())).getCall()).args;
    for (index = 0, __len = args.length; index < __len; ++index) {
      a = args[index];
      if (a.filler) {
        break;
      }
    }
    return node.back = (args[index] = fun).body, node;
  };
  Call['let'] = function(args, body){
    var i, a, params, __res, __len;
    __res = [];
    for (i = 0, __len = args.length; i < __len; ++i) {
      a = args[i];
      if (a.op === '=' && !a.logic) {
        args[i] = a.right;
        __res.push(a.left);
      } else {
        __res.push(Var(a.varName() || a.carp('invalid "let" argument')));
      }
    }
    params = __res;
    args.unshift(Literal('this'));
    return this.block(Fun(params, body), args, '.call');
  };
  return Call;
}(Node));
List = (function(superclass){
  List.displayName = 'List';
  var prototype = __extend(List, superclass).prototype, constructor = List;
  prototype.children = ['items'];
  prototype.show = function(){
    return this.name;
  };
  prototype.named = function(name){
    this.name = name;
    return this;
  };
  prototype.isEmpty = function(){
    return !this.items.length;
  };
  prototype.assigns = function(it){
    var node, __i, __ref, __len;
    for (__i = 0, __len = (__ref = this.items).length; __i < __len; ++__i) {
      node = __ref[__i];
      if (node.assigns(it)) {
        return true;
      }
    }
  };
  List.compile = function(o, items){
    var indent, level, i, code, that;
    switch (items.length) {
    case 0:
      return '';
    case 1:
      return items[0].compile(o, LEVEL_LIST);
    }
    indent = o.indent, level = o.level;
    o.indent = indent + TAB;
    o.level = LEVEL_LIST;
    code = items[i = 0].compile(o);
    while (that = items[++i]) {
      code += ', ' + that.compile(o);
    }
    if (~code.indexOf('\n')) {
      code = "\n" + o.indent + code + "\n" + indent;
    }
    o.indent = indent;
    o.level = level;
    return code;
  };
  function List(){}
  return List;
}(Node));
exports.Obj = Obj = (function(superclass){
  Obj.displayName = 'Obj';
  var prototype = __extend(Obj, superclass).prototype, constructor = Obj;
  function Obj(items){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.items = items || [];
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.asObj = THIS;
  prototype.toSlice = function(o, base, assign){
    var items, ref, temps, i, node, name, chain, logic, key, val, __ref, __len;
    items = this.items;
    if (items.length > 1) {
      __ref = base.cache(o), base = __ref[0], ref = __ref[1], temps = __ref[2];
    } else {
      ref = base;
    }
    for (i = 0, __len = items.length; i < __len; ++i) {
      node = items[i];
      if (node.comment) {
        continue;
      }
      if (node instanceof Prop || node instanceof Splat) {
        node[name = (__ref = node.children)[__ref.length - 1]] = chain = Chain(base, [Index(node[name].maybeKey())]);
      } else {
        if (logic = node.getDefault()) {
          node = node.first;
        }
        if (node instanceof Parens) {
          __ref = node.cache(o, true), key = __ref[0], node = __ref[1];
          if (assign) {
            __ref = [node, key], key = __ref[0], node = __ref[1];
          }
          key = Parens(key);
        } else {
          key = node;
        }
        val = chain = Chain(base, [Index(node.maybeKey())]);
        if (logic) {
          val = (logic.first = val, logic);
        }
        items[i] = Prop(key, val);
      }
      base = ref;
    }
    chain || this.carp('empty slice');
    if (temps) {
      (chain.head = Var(temps[0])).temp = true;
    }
    return this;
  };
  prototype.compileNode = function(o){
    var items, code, idt, dic, i, node, logic, rest, multi, key, val, __len;
    items = this.items;
    if (!items.length) {
      return this.front ? '({})' : '{}';
    }
    code = '';
    idt = '\n' + (o.indent += TAB);
    dic = {};
    for (i = 0, __len = items.length; i < __len; ++i) {
      node = items[i];
      if (node.comment) {
        code += idt + node.compile(o);
        continue;
      }
      if (logic = node.getDefault()) {
        node = node.first;
      }
      if (node instanceof Splat || (node.key || node) instanceof Parens) {
        rest = items.slice(i);
        break;
      }
      if (logic) {
        if (node instanceof Prop) {
          node.val = (logic.first = node.val, logic);
        } else {
          node = Prop(node, (logic.first = node, logic));
        }
      }
      if (multi) {
        code += ',';
      } else {
        multi = true;
      }
      code += idt + (node instanceof Prop
        ? (key = node.key, val = node.val, node.accessor
          ? node.compileAccessor(o, key = key.compile(o))
          : (val.ripName(key), (key = key.compile(o)) + ": " + val.compile(o, LEVEL_LIST)))
        : (key = node.compile(o)) + ": " + key);
      ID.test(key) || (key = Function("return " + key)());
      if (!(dic[key + "."] = dic[key + "."] ^ 1)) {
        node.carp("duplicate property \"" + key + "\"");
      }
    }
    code = "{" + (code && code + '\n' + this.tab) + "}";
    rest && (code = Import(JS(code), Obj(rest)).compile((o.indent = this.tab, o)));
    if (this.front && '{' === code.charAt()) {
      return "(" + code + ")";
    } else {
      return code;
    }
  };
  return Obj;
}(List));
exports.Prop = Prop = (function(superclass){
  Prop.displayName = 'Prop';
  var prototype = __extend(Prop, superclass).prototype, constructor = Prop;
  function Prop(key, val){
    var that, fun, __i, __len, __this = this instanceof __ctor ? this : new __ctor;
    __this.key = key;
    __this.val = val;
    if (that = val.getAccessors()) {
      __this.val = that;
      for (__i = 0, __len = that.length; __i < __len; ++__i) {
        fun = that[__i];
        fun.x = (fun['void'] = fun.params.length) ? 's' : 'g';
      }
      __this['accessor'] = 'accessor';
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['key', 'val'];
  prototype.show = function(){
    return this.accessor;
  };
  prototype.assigns = function(it){
    var __ref;
    return typeof (__ref = this.val).assigns === 'function' ? __ref.assigns(it) : void 8;
  };
  prototype.compileAccessor = function(o, key){
    var funs, fun;
    funs = this.val;
    if (funs[1] && funs[0].params.length + funs[1].params.length !== 1) {
      funs[0].carp('invalid accessor parameter');
    }
    return (function(){
      var __i, __ref, __len, __results = [];
      for (__i = 0, __len = (__ref = funs).length; __i < __len; ++__i) {
        fun = __ref[__i];
        fun.accessor = true;
        __results.push(fun.x + "et " + key + fun.compile(o, LEVEL_LIST).slice(8));
      }
      return __results;
    }()).join(',\n' + o.indent);
  };
  prototype.compileDescriptor = function(o){
    var obj, fun, __i, __ref, __len;
    obj = Obj();
    for (__i = 0, __len = (__ref = this.val).length; __i < __len; ++__i) {
      fun = __ref[__i];
      obj.items.push(Prop(Key(fun.x + 'et'), fun));
    }
    obj.items.push(Prop(Key('configurable'), Literal(true)));
    obj.items.push(Prop(Key('enumerable'), Literal(true)));
    return obj.compile(o);
  };
  return Prop;
}(Node));
exports.Arr = Arr = (function(superclass){
  Arr.displayName = 'Arr';
  var prototype = __extend(Arr, superclass).prototype, constructor = Arr;
  function Arr(items){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.items = items || [];
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.isArray = YES;
  prototype.asObj = function(){
    var i, item;
    return Obj((function(){
      var __ref, __len, __results = [];
      for (i = 0, __len = (__ref = this.items).length; i < __len; ++i) {
        item = __ref[i];
        __results.push(Prop(Literal(i), item));
      }
      return __results;
    }.call(this)));
  };
  prototype.toSlice = function(o, base){
    var items, ref, i, item, splat, chain, __ref, __len;
    items = this.items;
    if (items.length > 1) {
      __ref = base.cache(o), base = __ref[0], ref = __ref[1];
    } else {
      ref = base;
    }
    for (i = 0, __len = items.length; i < __len; ++i) {
      item = items[i];
      if (splat = item instanceof Splat) {
        item = item.it;
      }
      if (item.isEmpty()) {
        continue;
      }
      chain = Chain(base, [Index(item)]);
      items[i] = splat ? Splat(chain) : chain;
      base = ref;
    }
    chain || this.carp('empty slice');
    return this;
  };
  prototype.compile = function(o){
    var items, code;
    items = this.items;
    if (!items.length) {
      return '[]';
    }
    if (code = Splat.compileArray(o, items)) {
      return this.newed ? "(" + code + ")" : code;
    }
    return "[" + List.compile(o, items) + "]";
  };
  Arr.maybe = function(nodes){
    if (nodes.length === 1 && !(nodes[0] instanceof Splat)) {
      return nodes[0];
    }
    return constructor(nodes);
  };
  Arr.wrap = function(it){
    return constructor([Splat((it.isArray = YES, it))]);
  };
  return Arr;
}(List));
exports.Unary = Unary = (function(superclass){
  Unary.displayName = 'Unary';
  var prototype = __extend(Unary, superclass).prototype, constructor = Unary;
  function Unary(op, it, flag){
    var that, node, __i, __ref, __len, __this = this instanceof __ctor ? this : new __ctor;
    if (it != null) {
      if (that = !flag && it.unaries) {
        that.push(op);
        return it;
      }
      switch (op) {
      case '!':
        if (flag) {
          break;
        }
        if (it instanceof Fun && !it['void']) {
          return it['void'] = true, it;
        }
        return it.invert();
      case '++':
      case '--':
        if (flag) {
          __this.post = true;
        }
        break;
      case 'new':
        if (it instanceof Existence && !it.negated) {
          it = Chain(it).add(Call());
        }
        it.newed = true;
        for (__i = 0, __len = (__ref = it.tails || '').length; __i < __len; ++__i) {
          node = __ref[__i];
          if (node instanceof Call && !node['new']) {
            if (node.method === '.call') {
              node.args.shift();
            }
            node['new'] = 'new';
            node.method = '';
            return it;
          }
        }
        break;
      case '~':
        if (it instanceof Fun && it.statement && !it.bound) {
          return it.bound = '__this', it;
        }
      }
    }
    __this.op = op;
    __this.it = it;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['it'];
  prototype.show = function(){
    return [this.post ? '@' : void 8] + this.op;
  };
  prototype.isCallable = function(){
    var __ref;
    return ((__ref = this.op) == 'do' || __ref == 'new' || __ref == 'delete') || this.it == null;
  };
  prototype.isArray = function(){
    return this.it instanceof Arr && this.it.items.length || this.it instanceof Chain && this.it.isArray();
  };
  prototype.isString = function(){
    var __ref;
    return (__ref = this.op) == 'typeof' || __ref == 'classof';
  };
  prototype.invert = function(){
    var __ref;
    if (this.op === '!' && ((__ref = this.it.op) == '!' || __ref == '<' || __ref == '>' || __ref == '<=' || __ref == '>=' || __ref == 'of' || __ref == 'instanceof')) {
      return this.it;
    }
    return constructor('!', this, true);
  };
  prototype.unfoldSoak = function(o){
    var __ref;
    return ((__ref = this.op) == '++' || __ref == '--' || __ref == 'delete') && this.it != null && If.unfoldSoak(o, this, 'it');
  };
  prototype.getAccessors = function(){
    var items;
    if (this.op !== '~') {
      return;
    }
    if (this.it instanceof Fun) {
      return [this.it];
    }
    if (this.it instanceof Arr) {
      items = this.it.items;
      if (!items[2] && items[0] instanceof Fun && items[1] instanceof Fun) {
        return items;
      }
    }
  };
  function crement(it){
    return {
      '++': 'in',
      '--': 'de'
    }[it] + 'crement';
  }
  prototype.compileNode = function(o){
    var that, op, it, code, _;
    if (this.it == null) {
      return this.compileAsFunc(o);
    }
    if (that = this.compileSpread(o)) {
      return that;
    }
    op = this.op, it = this.it;
    switch (op) {
    case '!':
      it.cond = true;
      break;
    case 'new':
      it.isCallable() || it.carp('invalid constructor');
      break;
    case 'do':
      _ = Parens(it instanceof Existence && !it.negated
        ? Chain(it).add(Call())
        : Call.make(it));
      return (_.front = this.front, _.newed = this.newed, _).compile(o);
    case 'delete':
      if (it instanceof Var || !it.isAssignable()) {
        this.carp('invalid delete');
      }
      if (o.level && !this['void']) {
        return this.compilePluck(o);
      }
      break;
    case '++':
    case '--':
      it.isAssignable() || this.carp('invalid ' + crement(op));
      if (it instanceof Var && !o.scope.check(it.value, true)) {
        this.carp(crement(op) + " of undeclared variable \"" + it.value + "\"");
      }
      if (this.post) {
        it.front = this.front;
      }
      break;
    case '^^':
      return util('clone') + "(" + it.compile(o, LEVEL_LIST) + ")";
    case 'classof':
      return util('toString') + ".call(" + it.compile(o, LEVEL_LIST) + ").slice(8, -1)";
    }
    code = it.compile(o, LEVEL_OP + PREC.unary);
    if (this.post) {
      code += op;
    } else {
      if ((op == 'new' || op == 'typeof' || op == 'delete') || (op == '+' || op == '-') && op === code.charAt()) {
        op += ' ';
      }
      code = op + code;
    }
    if (o.level < LEVEL_CALL) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.compileSpread = function(o){
    var it, ops, them, i, node, sp, op, lat, __len, __i, __ref;
    it = this.it;
    ops = [this];
    for (; it instanceof constructor; it = it.it) {
      ops.push(it);
    }
    if (!((it = it.expandSlice(o).unwrap()) instanceof Arr && (them = it.items).length)) {
      return '';
    }
    for (i = 0, __len = them.length; i < __len; ++i) {
      node = them[i];
      if (sp = node instanceof Splat) {
        node = node.it;
      }
      for (__i = ops.length - 1; __i >= 0; --__i) {
        op = ops[__i];
        node = constructor(op.op, node, op.post);
      }
      them[i] = sp ? lat = Splat(node) : node;
    }
    if (!lat && (this['void'] || !o.level)) {
      it = (__ref = __clone(Block.prototype), __ref.lines = them, __ref.front = this.front, __ref['void'] = true, __ref);
    }
    return it.compile(o, LEVEL_PAREN);
  };
  prototype.compilePluck = function(o){
    var get, del, ref, code, __ref;
    __ref = Chain(this.it).cacheReference(o), get = __ref[0], del = __ref[1];
    code = this.assigned
      ? ''
      : (ref = o.scope.temporary()) + " = ";
    code += get.compile(o, LEVEL_LIST) + ", delete " + del.compile(o, LEVEL_LIST);
    if (this.assigned) {
      return code;
    }
    code += ", " + o.scope.free(ref);
    if (o.level < LEVEL_LIST) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.compileAsFunc = function(o){
    return Fun([], Block(Unary(this.op, Chain(Var('it'))))).compile(o);
  };
  return Unary;
}(Node));
exports.Binary = Binary = (function(superclass){
  Binary.displayName = 'Binary';
  var EQUALITY, COMPARER, prototype = __extend(Binary, superclass).prototype, constructor = Binary;
  function Binary(op, first, second){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.partial = first == null || second == null;
    if (!__this.partial) {
      switch (op) {
      case 'in':
        return new In(first, second);
      case '+':
        if (first instanceof Arr) {
          first.items.push(Splat(second));
          return first;
        }
        if (second instanceof Arr || second instanceof While && (second = Arr([Splat(second)]))) {
          second.items.unshift(Splat(first));
          return second;
        }
      }
    }
    __this.op = op;
    __this.first = first;
    __this.second = second;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['first', 'second'];
  prototype.show = function(){
    return this.op;
  };
  prototype.isCallable = function(){
    var __ref;
    return this.partial || ((__ref = this.op) == '&&' || __ref == '||' || __ref == '?' || __ref == '!?') && this.first.isCallable() && this.second.isCallable();
  };
  prototype.isArray = function(){
    switch (this.op) {
    case '*':
      return this.first instanceof Arr;
    case '/':
      return this.second.isMatcher();
    }
  };
  prototype.isString = function(){
    switch (this.op) {
    case '+':
    case '*':
      return this.first.isString() || this.second.isString();
    case '-':
      return this.second.isMatcher();
    }
  };
  EQUALITY = /^[!=]==?$/;
  COMPARER = /^(?:[!=]=|[<>])=?$/;
  prototype.invert = function(){
    var op;
    if (EQUALITY.test(op = this.op) && !COMPARER.test(this.second.op)) {
      this.op = '!='.charAt(op.indexOf('=')) + op.slice(1);
      return this;
    }
    return Unary('!', Parens(this), true);
  };
  prototype.getDefault = function(){
    switch (this.op) {
    case '?':
    case '||':
    case '&&':
    case '!?':
      return this;
    }
  };
  prototype.compileNode = function(o){
    var top, rite, items, level, code;
    if (this.partial) {
      return this.compilePartial(o);
    }
    switch (this.op) {
    case '?':
    case '!?':
      return this.compileExistence(o);
    case '*':
      if (this.second.isString()) {
        return this.compileJoin(o);
      }
      if (this.first.isString() || this.first instanceof Arr) {
        return this.compileRepeat(o);
      }
      break;
    case '-':
      if (this.second.isMatcher()) {
        return this.compileRemove(o);
      }
      break;
    case '/':
      if (this.second.isMatcher()) {
        return this.compileSplit(o);
      }
      break;
    case '**':
    case '^':
      return this.compilePow(o);
    case '<?':
    case '>?':
      return this.compileMinMax(o);
    case '<<':
    case '>>':
      return this.compileCompose(o, this.op === '>>');
    case '+++':
      return this.compileConcat(o);
    case '&':
      return this.compileConcat(o, true);
    case '%%':
      return this.compileMod(o);
    case '&&':
    case '||':
      if (top = this['void'] || !o.level) {
        this.second['void'] = true;
      }
      if (top || this.cond) {
        this.first.cond = true;
        this.second.cond = true;
      }
      break;
    case 'instanceof':
      rite = this.second.expandSlice(o).unwrap(), items = rite.items;
      if (rite instanceof Arr) {
        if (items[1]) {
          return this.compileAnyInstanceOf(o, items);
        }
        this.second = items[0] || rite;
      }
      this.second.isCallable() || this.second.carp('invalid instanceof operand');
      break;
    case '===':
      if ((this.first instanceof Literal && this.second instanceof Literal) && this.first.isWhat() !== this.second.isWhat()) {
        if (typeof console != 'undefined' && console !== null) {
          console.warn("WARNING: strict comparison of two different types will always be false: " + this.first.value + " == " + this.second.value);
        }
      }
      // fallthrough
    default:
      if (COMPARER.test(this.op) && COMPARER.test(this.second.op)) {
        return this.compileChain(o);
      }
    }
    this.first.front = this.front;
    code = this.first.compile(o, level = LEVEL_OP + PREC[this.op]) + " " + this.mapOp(this.op) + " " + this.second.compile(o, level);
    if (o.level <= level) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.mapOp = function(op){
    switch (op) {
    case 'of':
      return 'in';
    case '&&&':
    case '|||':
    case '^^^':
      return op[0];
    case '<<<<<':
      return '<<';
    case '>>>>':
    case '>>>>>':
      return op.slice(2);
    default:
      return op;
    }
  };
  prototype.compileChain = function(o){
    var level, code, sub, __ref;
    code = this.first.compile(o, level = LEVEL_OP + PREC[this.op]);
    __ref = this.second.first.cache(o, true), sub = __ref[0], this.second.first = __ref[1];
    code += " " + this.op + " " + sub.compile(o, level) + " && " + this.second.compile(o, LEVEL_OP);
    if (o.level <= LEVEL_OP) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.compileExistence = function(o){
    var __ref, _;
    if (this.op === '!?') {
      _ = (__ref = If(Existence(this.first), this.second), __ref.cond = this.cond, __ref['void'] = this['void'] || !o.level, __ref);
      return _.compileExpression(o);
    }
    if (this['void'] || !o.level) {
      _ = Binary('&&', Existence(this.first, true), this.second);
      return (_['void'] = true, _).compileNode(o);
    }
    _ = this.first.cache(o, true);
    return If(Existence(_[0]), _[1]).addElse(this.second).compileExpression(o);
  };
  prototype.compileAnyInstanceOf = function(o, items){
    var sub, ref, test, item, __ref, __i, __len;
    __ref = this.first.cache(o), sub = __ref[0], ref = __ref[1], this.temps = __ref[2];
    test = Binary('instanceof', sub, items.shift());
    for (__i = 0, __len = items.length; __i < __len; ++__i) {
      item = items[__i];
      test = Binary('||', test, Binary('instanceof', ref, item));
    }
    return Parens(test).compile(o);
  };
  prototype.compileMinMax = function(o){
    var lefts, rites, _;
    lefts = this.first.cache(o, true);
    rites = this.second.cache(o, true);
    _ = Binary(this.op.charAt(), lefts[0], rites[0]);
    return If(_, lefts[1]).addElse(rites[1]).compileExpression(o);
  };
  prototype.compileMethod = function(o, klass, method, arg){
    var args;
    args = [(this.second)].concat(arg || []);
    if (this.first["is" + klass]()) {
      return Chain(this.first, [Index(Key(method)), Call(args)]).compile(o);
    } else {
      args.unshift(this.first);
      return Call.make(JS(util(method) + '.call'), args).compile(o);
    }
  };
  prototype.compileJoin = function(it){
    return this.compileMethod(it, 'Array', 'join');
  };
  prototype.compileRemove = function(it){
    return this.compileMethod(it, 'String', 'replace', JS("''"));
  };
  prototype.compileSplit = function(it){
    return this.compileMethod(it, 'String', 'split');
  };
  prototype.compileRepeat = function(o){
    var x, n, items, that, refs, i, item, q, __ref, __len;
    x = this.first, n = this.second;
    items = x.items;
    if (((that = items && Splat.compileArray(o, items)) && (x = JS(that))) || !(n instanceof Literal && n.value < 0x20)) {
      x = Call.make(Util('repeat' + (items ? 'Array' : 'String')), [x, n]);
      return x.compile(o);
    }
    n = +n.value;
    if (1 <= n && n < 2) {
      return x.compile(o);
    }
    if (items) {
      if (n < 1) {
        return (__ref = __clone(Block.prototype), __ref.lines = items, __ref).add(JS('[]')).compile(o);
      }
      refs = [];
      for (i = 0, __len = items.length; i < __len; ++i) {
        item = items[i];
        __ref = item.cache(o, 1), items[i] = __ref[0], refs[refs.length] = __ref[1];
      }
      items.push((__ref = JS(), __ref.compile = function(){
        return (__repeatString(", " + List.compile(o, refs), n - 1)).slice(2);
      }, __ref));
      return x.compile(o);
    } else if (x instanceof Literal) {
      return (q = (x = x.compile(o)).charAt()) + __repeatString(x.slice(1, -1) + "", n) + q;
    } else {
      if (n < 1) {
        return Block(x.it).add(JS("''")).compile(o);
      }
      x = (refs = x.cache(o, 1, LEVEL_OP))[0] + __repeatString(" + " + refs[1], n - 1);
      if (o.level < LEVEL_OP + PREC['+']) {
        return x;
      } else {
        return "(" + x + ")";
      }
    }
  };
  prototype.compilePow = function(o){
    return Call.make(JS('Math.pow'), [this.first, this.second]).compile(o);
  };
  prototype.compileConcat = function(o, cons){
    var firstPart;
    cons == null && (cons = false);
    firstPart = "(" + this.first.compile(o) + ")";
    if (cons) {
      firstPart = "[" + firstPart + "]";
    }
    return firstPart + ".concat(" + this.second.compile(o) + ")";
  };
  prototype.compileCompose = function(o, forward){
    var first, second, __ref;
    __ref = (function(){
      switch (false) {
      case !forward:
        return [this.second, this.first];
      default:
        return [this.first, this.second];
      }
    }.call(this)), first = __ref[0], second = __ref[1];
    return util('compose') + "((" + first.compile(o) + "),(" + second.compile(o) + "))";
  };
  prototype.compileMod = function(o){
    var ref, code;
    ref = o.scope.temporary();
    code = "((" + this.first.compile(o) + ") % (" + ref + " = " + this.second.compile(o) + ") + " + ref + ") % " + ref;
    o.scope.free(ref);
    return code;
  };
  prototype.compilePartial = function(o){
    var mapOp, func, __ref;
    mapOp = {
      '+': ['add'],
      '-': ['minus', 'subtract'],
      '==': ['fuzzyEquals'],
      '!=': ['fuzzyNotEquals'],
      '===': ['equals'],
      '!==': ['notEquals'],
      '>': ['gt', 'lt'],
      '>=': ['gte', 'lte'],
      '<': ['lt', 'gt'],
      '<=': ['lte', 'gte'],
      '&&': ['andTest'],
      '||': ['orTest'],
      '*': ['multiply'],
      '/': ['divide', 'divideBy'],
      '%': ['rem', 'remTo'],
      '%%': ['mod', 'modTo'],
      '^': ['pow', 'powTo'],
      '**': ['pow', 'powTo'],
      '&': ['cons', 'consTo'],
      '+++': ['append', 'appendTo'],
      '>?': ['max'],
      '<?': ['min']
    };
    func = mapOp[this.op];
    if (func == null) {
      this.carp('unsupported operator for parital application');
    }
    util('curry');
    switch (false) {
    case !(this.first == null && this.second == null):
      return util(func[0]);
    case this.first == null:
      return util(func[0]) + "(" + this.first.compile(o) + ")";
    default:
      return util((__ref = func[1]) != null
        ? __ref
        : func[0]) + "(" + this.second.compile(o) + ")";
    }
  };
  return Binary;
}(Node));
exports.Assign = Assign = (function(superclass){
  Assign.displayName = 'Assign';
  var prototype = __extend(Assign, superclass).prototype, constructor = Assign;
  function Assign(left, rite, op, logic){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.left = left;
    __this.op = op || '=';
    __this.logic = logic || __this.op.logic;
    __this.op += '';
    __this[rite instanceof Node ? 'right' : 'unaries'] = rite;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['left', 'right'];
  prototype.show = function(){
    return (this.logic || '') + this.op;
  };
  prototype.assigns = function(it){
    return this.left.assigns(it);
  };
  prototype.delegate(['isCallable', 'isRegex'], function(it){
    var __ref;
    return ((__ref = this.op) == '=' || __ref == ':=') && this.right[it]();
  });
  prototype.isArray = function(){
    switch (this.op) {
    case '=':
    case ':=':
    case '+=':
      return this.right.isArray();
    case '/=':
      return this.right.isMatcher();
    }
  };
  prototype.isString = function(){
    switch (this.op) {
    case '=':
    case ':=':
    case '+=':
    case '*=':
      return this.right.isString();
    case '-=':
      return this.right.isMatcher();
    }
  };
  prototype.unfoldSoak = function(o){
    var that, rite, temps, __ref;
    if (this.left instanceof Existence) {
      if (that = (__ref = this.left = this.left.it).name, delete __ref.name, that) {
        rite = this.right;
        rite = Assign(this.right = Var(that), rite);
      } else {
        __ref = this.right.cache(o), rite = __ref[0], this.right = __ref[1], temps = __ref[2];
      }
      return __ref = If(Existence(rite), this), __ref.temps = temps, __ref.cond = this.cond, __ref['void'] = this['void'], __ref;
    }
    return If.unfoldSoak(o, this, 'left');
  };
  prototype.unfoldAssign = function(){
    return this.access && this;
  };
  prototype.compileNode = function(o){
    var left, op, right, reft, lvar, sign, name, res, code, del, that, __ref, __i, __len;
    left = this.left.expandSlice(o, true).unwrap();
    if (!this.right) {
      left.isAssignable() || left.carp('invalid unary assign');
      __ref = Chain(left).cacheReference(o), left = __ref[0], this.right = __ref[1];
      for (__i = 0, __len = (__ref = this.unaries).length; __i < __len; ++__i) {
        op = __ref[__i];
        this.right = Unary(op, this.right);
      }
    }
    if (left.isEmpty()) {
      return (__ref = Parens(this.right), __ref.front = this.front, __ref.newed = this.newed, __ref).compile(o);
    }
    if (left.getDefault()) {
      this.right = Binary(left.op, this.right, left.second);
      left = left.first;
    }
    if (left.items) {
      return this.compileDestructuring(o, left);
    }
    if (this.logic) {
      return this.compileConditional(o, left);
    }
    left.isAssignable() || left.carp('invalid assign');
    op = this.op, right = this.right;
    if (op == '<?=' || op == '>?=') {
      return this.compileMinMax(o, left, right);
    }
    if ((op == '**=' || op == '^=' || op == '%%=') || op === '+=' && (right instanceof Arr || right instanceof While) || op === '*=' && right.isString() || (op == '-=' || op == '/=') && right.isMatcher()) {
      __ref = Chain(left).cacheReference(o), left = __ref[0], reft = __ref[1];
      right = Binary(op.slice(0, -1), reft, right);
      op = ':=';
    }
    while (right instanceof Parens && !right.keep) {
      right = right.it;
    }
    right.ripName(left = left.unwrap());
    lvar = left instanceof Var;
    sign = op.replace(':', '');
    name = (left.front = true, left).compile(o, LEVEL_LIST);
    code = !o.level && right instanceof While && !right['else'] && (lvar || left.isSimpleAccess())
      ? (res = o.scope.temporary('res')) + " = [];\n" + this.tab + right.makeReturn(res).compile(o) + "\n" + this.tab + name + " " + sign + " " + o.scope.free(res)
      : (name + " " + sign + " ") + (right.assigned = true, right).compile(o, LEVEL_LIST);
    if (lvar) {
      del = right.op === 'delete';
      if (op === '=') {
        o.scope.declare(name);
      } else if (!o.scope.check(name, true)) {
        left.carp("assignment to undeclared variable \"" + name + "\"");
      }
    }
    if (that = o.level) {
      if (del) {
        code += ", " + name;
      }
      if (that > (del ? LEVEL_PAREN : LEVEL_LIST)) {
        code = "(" + code + ")";
      }
    }
    return code;
  };
  prototype.compileConditional = function(o, left){
    var lefts, morph, __ref;
    if (left instanceof Var && ((__ref = this.logic) == '?' || __ref == '!?') && this.op === '=') {
      o.scope.declare(left.value);
    }
    lefts = Chain(left).cacheReference(o);
    morph = Binary(this.logic, lefts[0], (this.logic = false, this.left = lefts[1], this));
    return (morph['void'] = this['void'], morph).compileNode(o);
  };
  prototype.compileMinMax = function(o, left, right){
    var lefts, rites, test, put, __ref;
    lefts = Chain(left).cacheReference(o);
    rites = right.cache(o, true);
    test = Binary(this.op.replace('?', ''), lefts[0], rites[0]);
    put = Assign(lefts[1], rites[1], ':=');
    if (this['void'] || !o.level) {
      return Parens(Binary('||', test, put)).compile(o);
    }
    __ref = test.second.cache(o, true), test.second = __ref[0], left = __ref[1];
    return If(test, left).addElse(put).compileExpression(o);
  };
  prototype.compileDestructuring = function(o, left){
    var items, len, ret, rite, that, cache, rref, list, code;
    items = left.items;
    len = items.length;
    ret = o.level && !this['void'];
    rite = this.right.compile(o, len === 1 ? LEVEL_CALL : LEVEL_LIST);
    if (that = left.name) {
      cache = that + " = " + rite;
      o.scope.declare(rite = that);
    } else if ((ret || len > 1) && (!ID.test(rite) || left.assigns(rite))) {
      cache = (rref = o.scope.temporary()) + " = " + rite;
      rite = rref;
    }
    list = this["rend" + left.constructor.displayName](o, items, rite);
    if (rref) {
      o.scope.free(rref);
    }
    if (cache) {
      list.unshift(cache);
    }
    if (ret || !list.length) {
      list.push(rite);
    }
    code = list.join(', ');
    if (list.length < 2 || o.level < LEVEL_LIST) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  prototype.rendArr = function(o, nodes, rite){
    var i, node, skip, len, val, ivar, start, inc, rcache, __len, __ref, __results = [];
    for (i = 0, __len = nodes.length; i < __len; ++i) {
      node = nodes[i];
      if (node.isEmpty()) {
        continue;
      }
      if (node instanceof Splat) {
        len && node.carp('multiple splat in an assignment');
        skip = (node = node.it).isEmpty();
        if (i + 1 === (len = nodes.length)) {
          if (skip) {
            break;
          }
          val = Arr.wrap(JS(util('slice') + '.call(' + rite + (i ? ", " + i + ")" : ')')));
        } else {
          val = ivar = rite + ".length - " + (len - i - 1);
          if (skip && i + 2 === len) {
            continue;
          }
          start = i + 1;
          this.temps = [ivar = o.scope.temporary('i')];
          val = skip
            ? (node = Var(ivar), Var(val))
            : Arr.wrap(JS(i + " < (" + ivar + " = " + val + ")\ ? " + util('slice') + ".call(" + rite + ", " + i + ", " + ivar + ")\ : (" + ivar + " = " + i + ", [])"));
        }
      } else {
        (inc = ivar) && start < i && (inc += " + " + (i - start));
        val = Chain(rcache || (rcache = Literal(rite)), [Index(JS(inc || i))]);
      }
      __results.push((__ref = __clone(this), __ref.left = node, __ref.right = val, __ref['void'] = true, __ref).compile(o, LEVEL_PAREN));
    }
    return __results;
  };
  prototype.rendObj = function(o, nodes, rite){
    var node, splat, logic, key, rcache, val, __i, __len, __ref, __results = [];
    for (__i = 0, __len = nodes.length; __i < __len; ++__i) {
      node = nodes[__i];
      if (splat = node instanceof Splat) {
        node = node.it;
      }
      if (logic = node.getDefault()) {
        node = node.first;
      }
      if (node instanceof Parens) {
        __ref = Chain(node.it).cacheReference(o), node = __ref[0], key = __ref[1];
      } else if (node instanceof Prop) {
        node = (key = node.key, node).val;
      } else {
        key = node;
      }
      if (node instanceof Key) {
        node = Var(node.name);
      }
      if (logic) {
        node = (logic.first = node, logic);
      }
      val = Chain(rcache || (rcache = Var(rite)), [Index(key.maybeKey())]);
      if (splat) {
        val = Import(Obj(), val);
      }
      __results.push((__ref = __clone(this), __ref.left = node, __ref.right = val, __ref['void'] = true, __ref).compile(o, LEVEL_PAREN));
    }
    return __results;
  };
  return Assign;
}(Node));
exports.Import = Import = (function(superclass){
  Import.displayName = 'Import';
  var prototype = __extend(Import, superclass).prototype, constructor = Import;
  function Import(left, right, all){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.left = left;
    __this.right = right;
    __this.all = all && 'All';
    if (!all && left instanceof Obj && right.items) {
      return Obj((left.items).concat(right.asObj().items));
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['left', 'right'];
  prototype.show = function(){
    return this.all;
  };
  prototype.delegate(['isCallable', 'isArray'], function(it){
    return this.left[it]();
  });
  prototype.unfoldSoak = function(o){
    var left, value, temps, __ref;
    left = this.left;
    if (left instanceof Existence && !left.negated) {
      if ((left = left.it) instanceof Var) {
        value = (this.left = left).value;
        if (!o.scope.check(value, true)) {
          left = JS("typeof " + value + " != 'undefined' && " + value);
        }
      } else {
        __ref = left.cache(o), left = __ref[0], this.left = __ref[1], temps = __ref[2];
      }
      return __ref = If(left, this), __ref.temps = temps, __ref.soak = true, __ref.cond = this.cond, __ref['void'] = this['void'], __ref;
    }
    return If.unfoldSoak(o, this, 'left') || (this['void'] || !o.level) && If.unfoldSoak(o, this, 'right');
  };
  prototype.compileNode = function(o){
    var right;
    right = this.right;
    if (!this.all) {
      if (right instanceof Chain) {
        right = right.unfoldSoak(o) || right.unfoldAssign(o) || right.expandSlice(o).unwrap();
      }
      if (right instanceof List) {
        return this.compileAssign(o, right.asObj().items);
      }
    }
    return Call.make(Util("import" + (this.all || '')), [this.left, right]).compileNode(o);
  };
  prototype.compileAssign = function(o, items){
    var top, reft, left, delim, space, code, i, node, com, logic, dyna, key, val, __ref, __len;
    if (!items.length) {
      return this.left.compile(o);
    }
    top = !o.level;
    if (items.length < 2 && (top || this['void'] || items[0] instanceof Splat)) {
      reft = this.left;
      if (reft.isComplex()) {
        reft = Parens(reft);
      }
    } else {
      __ref = this.left.cache(o), left = __ref[0], reft = __ref[1], this.temps = __ref[2];
    }
    __ref = top
      ? [';', '\n' + this.tab]
      : [',', ' '], delim = __ref[0], space = __ref[1];
    delim += space;
    code = this.temps ? left.compile(o, LEVEL_PAREN) + delim : '';
    for (i = 0, __len = items.length; i < __len; ++i) {
      node = items[i];
      i && (code += com ? space : delim);
      if (com = node.comment) {
        code += node.compile(o);
        continue;
      }
      if (node instanceof Splat) {
        code += Import(reft, node.it).compile(o);
        continue;
      }
      if (logic = node.getDefault()) {
        node = node.first;
      }
      if (dyna = node instanceof Parens) {
        __ref = node.it.cache(o, true), key = __ref[0], val = __ref[1];
      } else if (node instanceof Prop) {
        key = node.key, val = node.val;
        if (node.accessor) {
          if (key instanceof Key) {
            key = JS("'" + key.name + "'");
          }
          code += "Object.defineProperty(" + reft.compile(o, LEVEL_LIST) + ", " + key.compile(o, LEVEL_LIST) + ", " + node.compileDescriptor(o) + ")";
          continue;
        }
      } else {
        key = val = node;
      }
      dyna || (key = key.maybeKey());
      logic && (val = (logic.first = val, logic));
      code += Assign(Chain(reft, [Index(key)]), val).compile(o, LEVEL_PAREN);
    }
    if (top) {
      return code;
    }
    this['void'] || node instanceof Splat || (code += (com ? ' ' : ', ') + reft.compile(o, LEVEL_PAREN));
    if (o.level < LEVEL_LIST) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  return Import;
}(Node));
exports.In = In = (function(superclass){
  In.displayName = 'In';
  var prototype = __extend(In, superclass).prototype, constructor = In;
  function In(item, array){
    this.item = item;
    this.array = array;
  }
  prototype.children = ['item', 'array'];
  __import(prototype, Negatable);
  prototype.compileNode = function(o){
    var array, items, code, sub, ref, cmp, cnj, i, test, __ref, __len;
    items = (array = this.array.expandSlice(o).unwrap()).items;
    if (!(array instanceof Arr) || items.length < 2) {
      return (this.negated ? '!' : '') + "" + util('in') + "(" + this.item.compile(o, LEVEL_LIST) + ", " + array.compile(o, LEVEL_LIST) + ")";
    }
    code = '';
    __ref = this.item.cache(o, false, LEVEL_PAREN), sub = __ref[0], ref = __ref[1];
    __ref = this.negated
      ? [' != ', ' && ']
      : [' == ', ' || '], cmp = __ref[0], cnj = __ref[1];
    for (i = 0, __len = items.length; i < __len; ++i) {
      test = items[i];
      code && (code += cnj);
      if (test instanceof Splat) {
        code += (__ref = new In(Var(ref), test.it), __ref.negated = this.negated, __ref).compile(o, LEVEL_TOP);
        if (!(i || sub === ref)) {
          code = "(" + sub + ", " + code + ")";
        }
      } else {
        code += (i || sub === ref
          ? ref
          : "(" + sub + ")") + cmp + test.compile(o, LEVEL_OP + PREC['==']);
      }
    }
    sub === ref || o.scope.free(ref);
    if (o.level < LEVEL_OP + PREC['||']) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  return In;
}(Node));
exports.Existence = Existence = (function(superclass){
  Existence.displayName = 'Existence';
  var prototype = __extend(Existence, superclass).prototype, constructor = Existence;
  function Existence(it, negated){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.it = it;
    __this.negated = negated;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['it'];
  __import(prototype, Negatable);
  prototype.compileNode = function(o){
    var node, code, op, eq, __ref;
    node = (__ref = this.it.unwrap(), __ref.front = this.front, __ref);
    code = node.compile(o, LEVEL_OP + PREC['==']);
    if (node instanceof Var && !o.scope.check(code, true)) {
      __ref = this.negated
        ? ['||', '=']
        : ['&&', '!'], op = __ref[0], eq = __ref[1];
      code = "typeof " + code + " " + eq + "= 'undefined' " + op + " " + code + " " + eq + "== null";
    } else {
      code += " " + (op = this.negated ? '==' : '!=') + " null";
    }
    if (o.level < LEVEL_OP + PREC[op]) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  return Existence;
}(Node));
exports.Fun = Fun = (function(superclass){
  Fun.displayName = 'Fun';
  var prototype = __extend(Fun, superclass).prototype, constructor = Fun;
  function Fun(params, body, bound, curried){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.params = params || [];
    __this.body = body || Block();
    __this.bound = bound && '__this';
    __this.curried = curried || false;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['params', 'body'];
  prototype.show = function(){
    return this.bound;
  };
  prototype.named = function(it){
    return this.name = it, this.statement = true, this;
  };
  prototype.isCallable = YES;
  prototype.isStatement = function(){
    return !!this.statement;
  };
  prototype.traverseChildren = function(__arg, xscope){
    if (xscope) {
      return superclass.prototype.traverseChildren.apply(this, arguments);
    }
  };
  prototype.makeReturn = function(){
    if (this.statement) {
      return this.returns = true, this;
    } else {
      return superclass.prototype.makeReturn.apply(this, arguments);
    }
  };
  prototype.ripName = function(it){
    var __ref;
    this.name || (this.name = it.varName());
    this.declared = it instanceof Var;
    if (((__ref = it.head) != null ? __ref.value : void 8) === 'prototype' && it.tails.length === 1 && !it.tails[0].isComplex()) {
      this.meth = it.tails[0];
    }
  };
  prototype.compileNode = function(o){
    var pscope, sscope, scope, that, inLoop, body, name, tab, code, __ref;
    pscope = o.scope;
    sscope = pscope.shared || pscope;
    scope = o.scope = this.body.scope = new Scope(this.wrapper ? pscope : sscope, this.wrapper && sscope);
    scope.fun = this;
    if (that = this.proto) {
      scope.assign('prototype', that.compile(o) + ".prototype");
    }
    if (that = this.cname) {
      scope.assign('constructor', that);
    }
    if (inLoop = o.loop, delete o.loop, inLoop) {
      o.indent = this.tab = '';
    }
    o.indent += TAB;
    body = this.body, name = this.name, tab = this.tab;
    code = 'function';
    if (this.bound === '__this') {
      if (this.ctor) {
        scope.assign('__this', 'this instanceof __ctor ? this : new __ctor');
        body.add(Return(Literal('__this')));
      } else if (that = (__ref = sscope.fun) != null ? __ref.bound : void 8) {
        this.bound = that;
      } else {
        sscope.assign('__this', 'this');
      }
    }
    if (this.statement) {
      name || this.carp('nameless function declaration');
      pscope === o.block.scope || this.carp('misplaced function declaration');
      this.accessor && this.carp('named accessor');
      pscope.add(name, 'function');
    }
    if (this.statement || name && this.labeled) {
      code += ' ' + scope.add(name, 'function');
    }
    this['void'] || this.ctor || this.newed || body.makeReturn();
    code += "(" + this.compileParams(scope) + "){";
    if (that = body.compileWithDeclarations(o)) {
      code += "\n" + that + "\n" + tab;
    }
    code += '}';
    if (inLoop) {
      return pscope.assign(pscope.temporary('fn'), code);
    }
    if (this.returns) {
      code += "\n" + tab + "return " + name + ";";
    } else if (this.bound && this.ctor) {
      code += ' function __ctor(){} __ctor.prototype = prototype;';
    }
    if (this.curried) {
      code = util('curry') + "(" + code + ")";
    }
    if (this.front && !this.statement) {
      return "(" + code + ")";
    } else {
      return code;
    }
  };
  prototype.compileParams = function(scope){
    var params, body, names, assigns, i, p, splace, rest, that, dic, vr, df, v, name, __len, __i, __ref, __ref1;
    params = this.params, body = this.body;
    names = [];
    assigns = [];
    for (i = 0, __len = params.length; i < __len; ++i) {
      p = params[i];
      if (p instanceof Splat) {
        splace = i;
      } else if (p.op === '=' && !p.logic) {
        params[i] = Binary('?', p.left, p.right);
      }
    }
    if (splace != null) {
      rest = params.splice(splace, 9e9);
      if (!rest[1] && rest[0].it.isEmpty()) {
        rest = 0;
      }
    } else if (this.accessor) {
      if (that = params[1]) {
        that.carp('excess accessor parameter');
      }
    } else if (!(params.length || this.wrapper)) {
      if (body.traverseChildren(function(it){
        return it.value === 'it' || null;
      })) {
        params[0] = Var('it');
      }
    }
    if (params.length) {
      dic = {};
      for (__i = 0, __len = params.length; __i < __len; ++__i) {
        p = params[__i];
        vr = p;
        if (df = vr.getDefault()) {
          vr = vr.first;
        }
        if (vr.isEmpty()) {
          vr = Var(scope.temporary('arg'));
        } else if (!(vr instanceof Var)) {
          v = Var((__ref1 = (__ref = vr.it || vr).name, delete __ref.name, __ref1) || vr.varName() || scope.temporary('arg'));
          assigns.push(Assign(vr, df ? Binary(p.op, v, p.second) : v));
          vr = v;
        } else if (df) {
          assigns.push(Assign(vr, p.second, '=', p.op));
        }
        names.push(name = scope.add(vr.value, 'arg'));
        if (!(dic[name + "."] = dic[name + "."] ^ 1)) {
          p.carp("duplicate parameter \"" + name + "\"");
        }
      }
    }
    if (rest) {
      while (splace--) {
        rest.unshift(Arr());
      }
      assigns.push(Assign(Arr(rest), Literal('arguments')));
    }
    if (assigns.length) {
      (__ref = this.body).prepend.apply(__ref, assigns);
    }
    return names.join(', ');
  };
  return Fun;
}(Node));
exports.Class = Class = (function(superclass){
  Class.displayName = 'Class';
  var prototype = __extend(Class, superclass).prototype, constructor = Class;
  function Class(title, sup, body){
    this.title = title;
    this.sup = sup;
    this.fun = Fun([], body);
  }
  prototype.children = ['title', 'sup', 'fun'];
  prototype.isCallable = YES;
  prototype.ripName = function(it){
    this.name = it.varName();
  };
  prototype.compile = function(o, level){
    var fun, title, decl, name, lines, i, node, proto, ctor, vname, that, args, clas, __len, __ref;
    fun = this.fun, title = this.title;
    decl = title != null ? title.varName() : void 8;
    name = decl || this.name;
    if (ID.test(name || '')) {
      fun.cname = name;
    } else {
      name = 'constructor';
    }
    lines = fun.body.lines;
    for (i = 0, __len = lines.length; i < __len; ++i) {
      node = lines[i];
      if (node instanceof Obj) {
        lines[i] = Import(proto || (proto = Var('prototype')), node);
      } else if (node instanceof Fun && !node.statement) {
        ctor && node.carp('redundant constructor');
        ctor = node;
      }
    }
    ctor || (ctor = lines[lines.length] = Fun());
    ctor.name = name;
    ctor.ctor = true;
    ctor.statement = true;
    lines.push(vname = fun.proto = Var(fun.bound = name));
    if (that = this.sup) {
      args = [that];
      fun.proto = Util.Extends(vname, (__ref = fun.params)[__ref.length] = Var('superclass'));
    }
    fun.cname && fun.body.prepend(Literal(name + ".displayName = '" + name + "'"));
    clas = Parens(Call.make(fun, args), true);
    if (decl && title.isComplex()) {
      clas = Assign(vname, clas);
    }
    if (title) {
      clas = Assign(title, clas);
    }
    return clas.compile(o, level);
  };
  return Class;
}(Node));
exports.Super = Super = (function(superclass){
  Super.displayName = 'Super';
  var simple, prototype = __extend(Super, superclass).prototype, constructor = Super;
  prototype.isCallable = YES;
  simple = /^(?:\.|\[[\'\"\d.])/;
  prototype.compile = function(o){
    var scope, that, key, __ref;
    scope = o.scope;
    for (; that = scope.fun; scope = scope.parent) {
      if (simple.test(key = (__ref = that.meth) != null ? __ref.compile(o) : void 8)) {
        return "superclass.prototype" + key;
      }
    }
    return 'superclass';
  };
  function Super(){}
  return Super;
}(Node));
exports.Parens = Parens = (function(superclass){
  Parens.displayName = 'Parens';
  var prototype = __extend(Parens, superclass).prototype, constructor = Parens;
  function Parens(it, keep, string){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.it = it;
    __this.keep = keep;
    __this.string = string;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['it'];
  prototype.show = function(){
    return this.string && '""';
  };
  prototype.delegate(['isComplex', 'isCallable', 'isArray', 'isRegex'], function(it){
    return this.it[it]();
  });
  prototype.isString = function(){
    return this.string || this.it.isString();
  };
  prototype.compile = function(o, level){
    var it;
    level == null && (level = o.level);
    it = this.it;
    it.cond || (it.cond = this.cond), it['void'] || (it['void'] = this['void']);
    if (this.calling && (!level || this['void'])) {
      it.head['void'] = true;
    }
    if (!(this.keep || this.newed || level >= LEVEL_OP + PREC[it.op])) {
      return (it.front = this.front, it).compile(o, level || LEVEL_PAREN);
    }
    if (it.isStatement()) {
      return it.compileClosure(o);
    } else {
      return "(" + it.compile(o, LEVEL_PAREN) + ")";
    }
  };
  return Parens;
}(Node));
exports.Splat = Splat = (function(superclass){
  Splat.displayName = 'Splat';
  var __ref, prototype = __extend(Splat, superclass).prototype, constructor = Splat;
  function Splat(it, filler){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.it = it;
    __this.filler = filler;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  __ref = Parens.prototype, prototype.children = __ref.children, prototype.isComplex = __ref.isComplex;
  prototype.isAssignable = YES;
  prototype.assigns = function(it){
    return this.it.assigns(it);
  };
  prototype.compile = function(){
    return this.carp('invalid splat');
  };
  Splat.compileArray = function(o, list, apply){
    var index, node, args, atoms, __len, __i, __ref;
    expand(list);
    for (index = 0, __len = list.length; index < __len; ++index) {
      node = list[index];
      if (node instanceof Splat) {
        break;
      }
    }
    if (index >= list.length) {
      return '';
    }
    if (!list[1]) {
      return (apply ? Object : ensureArray)(list[0].it).compile(o, LEVEL_LIST);
    }
    args = [];
    atoms = [];
    for (__i = 0, __len = (__ref = list.splice(index, 9e9)).length; __i < __len; ++__i) {
      node = __ref[__i];
      if (node instanceof Splat) {
        if (atoms.length) {
          args.push(Arr(atoms.splice(0, 9e9)));
        }
        args.push(ensureArray(node.it));
      } else {
        atoms.push(node);
      }
    }
    if (atoms.length) {
      args.push(Arr(atoms));
    }
    return (index
      ? Arr(list)
      : args.shift()).compile(o, LEVEL_CALL) + (".concat(" + List.compile(o, args) + ")");
  };
  function expand(nodes){
    var index, node, it;
    index = -1;
    while (node = nodes[++index]) {
      if (node instanceof Splat) {
        it = node.it;
        if (it.isEmpty()) {
          nodes.splice(index--, 1);
        } else if (it instanceof Arr) {
          nodes.splice.apply(nodes, [index, 1].concat(__slice.call(expand(it.items))));
          index += it.items.length - 1;
        }
      }
    }
    return nodes;
  }
  function ensureArray(node){
    if (node.isArray()) {
      return node;
    }
    return Call.make(JS(util('slice') + '.call'), [node]);
  }
  return Splat;
}(Node));
exports.Jump = Jump = (function(superclass){
  Jump.displayName = 'Jump';
  var prototype = __extend(Jump, superclass).prototype, constructor = Jump;
  function Jump(verb, label){
    this.verb = verb;
    this.label = label;
  }
  prototype.show = function(){
    var that;
    return (this.verb || '') + ((that = this.label) ? ' ' + that : '');
  };
  prototype.isStatement = YES;
  prototype.makeReturn = THIS;
  prototype.getJump = function(ctx){
    var that;
    ctx || (ctx = {});
    if (!ctx[this.verb]) {
      return this;
    }
    if (that = this.label) {
      return !__in(that, ctx.labels || []) && this;
    }
  };
  prototype.compileNode = function(o){
    var that;
    if (that = this.label) {
      __in(that, o.labels || []) || this.carp("undefined label \"" + that + "\"");
    } else {
      o[this.verb] || this.carp("stray " + this.verb);
    }
    return this.show() + ';';
  };
  Jump.extended = function(sub){
    sub.prototype.children = ['it'];
    this[sub.displayName.toLowerCase()] = sub;
  };
  return Jump;
}(Node));
exports.Throw = Throw = (function(superclass){
  Throw.displayName = 'Throw';
  var prototype = __extend(Throw, superclass).prototype, constructor = Throw;
  function Throw(it){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.it = it;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.getJump = VOID;
  prototype.compileNode = function(o){
    var __ref;
    return "throw " + (((__ref = this.it) != null ? __ref.compile(o, LEVEL_PAREN) : void 8) || 'null') + ";";
  };
  return Throw;
}(Jump));
exports.Return = Return = (function(superclass){
  Return.displayName = 'Return';
  var prototype = __extend(Return, superclass).prototype, constructor = Return;
  function Return(it){
    var __this = this instanceof __ctor ? this : new __ctor;
    if (it && it.value !== 'void') {
      __this.it = it;
    }
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.getJump = THIS;
  prototype.compileNode = function(o){
    var that;
    return "return" + ((that = this.it) ? ' ' + that.compile(o, LEVEL_PAREN) : '') + ";";
  };
  return Return;
}(Jump));
exports.While = While = (function(superclass){
  While.displayName = 'While';
  var prototype = __extend(While, superclass).prototype, constructor = While;
  function While(test, un, mode){
    this.un = un;
    mode && (mode instanceof Node
      ? this.update = mode
      : this.post = true);
    if (this.post || test.value !== '' + !un) {
      this.test = test;
    }
  }
  prototype.children = ['test', 'body', 'update', 'else'];
  prototype.aSource = 'test';
  prototype.aTargets = ['body', 'update'];
  prototype.show = function(){
    return [this.un ? '!' : void 8, this.post ? 'do' : void 8].join('');
  };
  prototype.isStatement = prototype.isArray = YES;
  prototype.makeComprehension = function(toAdd, loops){
    while (loops.length) {
      toAdd = loops.pop().addBody(Block(toAdd));
    }
    return this.addBody(Block(toAdd));
  };
  prototype.getJump = function(ctx){
    var node, __i, __ref, __ref1, __len;
    ctx || (ctx = {});
    ctx['continue'] = true;
    ctx['break'] = true;
    for (__i = 0, __len = (__ref = ((__ref1 = this.body) != null ? __ref1.lines : void 8) || []).length; __i < __len; ++__i) {
      node = __ref[__i];
      if (node.getJump(ctx)) {
        return node;
      }
    }
  };
  prototype.addBody = function(body){
    var top;
    this.body = body;
    if (this.guard) {
      this.body = Block(If(this.guard, body));
    }
    top = this.body.lines[0];
    if ((top != null ? top.verb : void 8) === 'continue' && !top.label) {
      this.body.lines.length = 0;
    }
    return this;
  };
  prototype.addElse = function($else){
    this['else'] = $else;
    return this;
  };
  prototype.addGuard = function(guard){
    this.guard = guard;
    return this;
  };
  prototype.makeReturn = function(it){
    if (it) {
      this.body.makeReturn(it);
    } else {
      this.getJump() || (this.returns = true);
    }
    return this;
  };
  prototype.compileNode = function(o){
    var test, that, head, __ref;
    o.loop = true;
    this.test && (this.un
      ? this.test = this.test.invert()
      : this.anaphorize());
    if (this.post) {
      return 'do {' + this.compileBody((o.indent += TAB, o), this.test);
    }
    test = ((__ref = this.test) != null ? __ref.compile(o, LEVEL_PAREN) : void 8) || '';
    head = (that = this.update)
      ? "for (;" + (test && ' ' + test) + "; " + that.compile(o, LEVEL_PAREN)
      : test ? "while (" + test : 'for (;;';
    return head + ') {' + this.compileBody((o.indent += TAB, o));
  };
  prototype.compileBody = function(o, potest){
    var lines, ret, code, res, run, that, __key;
    o['break'] = true;
    o['continue'] = true;
    lines = this.body.lines;
    code = ret = '';
    if (this.returns) {
      if (lines[__key = lines.length - 1] != null) {
        lines[__key] = lines[__key].makeReturn(res = o.scope.assign('__results', '[]'));
      }
      ret = "\n" + this.tab + "return " + (res || '[]') + ";";
    }
    if (this['else']) {
      lines.unshift(JS((run = o.scope.temporary('run')) + " = true;"));
    }
    if (that = this.body.compile(o, LEVEL_TOP)) {
      code += "\n" + that + "\n" + this.tab;
    }
    code += '}';
    if (potest) {
      code += " while (" + potest.compile((o.tab = this.tab, o), LEVEL_PAREN) + ");";
    }
    if (run) {
      if (this.returns) {
        this['else'].makeReturn();
      }
      code += " if (!" + run + ") " + this.compileBlock(o, this['else']);
    }
    return code + ret;
  };
  return While;
}(Node));
exports.For = For = (function(superclass){
  For.displayName = 'For';
  var prototype = __extend(For, superclass).prototype, constructor = For;
  function For(it){
    __importAll(this, it);
    if (this.item instanceof Var && !this.item.value) {
      this.item = null;
    }
  }
  prototype.children = ['item', 'source', 'from', 'to', 'step', 'body'];
  prototype.aSource = null;
  prototype.show = function(){
    return this.index || 'implicit index';
  };
  prototype.compileNode = function(o){
    var temps, idx, pvar, step, tvar, tail, vars, eq, cond, svar, srcPart, lvar, head, body, __ref;
    o.loop = true;
    temps = this.temps = [];
    if (idx = this.index) {
      o.scope.declare(idx);
    } else {
      temps.push(idx = o.scope.temporary('i'));
    }
    if (!this.body) {
      this.addBody(Block(Var(idx)));
    }
    if (!this.object) {
      __ref = (this.step || Literal(1)).compileLoopReference(o, 'step'), pvar = __ref[0], step = __ref[1];
      pvar === step || temps.push(pvar);
    }
    if (this.from) {
      __ref = this.to.compileLoopReference(o, 'to'), tvar = __ref[0], tail = __ref[1];
      vars = idx + " = " + this.from.compile(o, LEVEL_LIST);
      if (tail !== tvar) {
        vars += ", " + tail;
        temps.push(tvar);
      }
      eq = this.op === 'til' ? '' : '=';
      cond = +pvar
        ? idx + " " + (pvar < 0 ? '>' : '<') + eq + " " + tvar
        : pvar + " < 0 ? " + idx + " >" + eq + " " + tvar + " : " + idx + " <" + eq + " " + tvar;
    } else {
      if (this.item || this.object && this.own) {
        __ref = this.source.compileLoopReference(o, 'ref', !this.object), svar = __ref[0], srcPart = __ref[1];
        svar === srcPart || temps.push(svar);
      } else {
        svar = srcPart = this.source.compile(o, LEVEL_PAREN);
      }
      if (!this.object) {
        if (0 > pvar && ~~pvar === +pvar) {
          vars = idx + " = " + srcPart + ".length - 1";
          cond = idx + " >= 0";
        } else {
          temps.push(lvar = o.scope.temporary('len'));
          vars = idx + " = 0, " + lvar + " = " + srcPart + ".length";
          cond = idx + " < " + lvar;
        }
      }
    }
    head = 'for (' + (this.object
      ? idx + " in " + srcPart
      : (step === pvar || (vars += ', ' + step), (vars + "; " + cond + "; ") + (1 == Math.abs(pvar)
        ? (pvar < 0 ? '--' : '++') + idx
        : idx + (pvar < 0
          ? ' -= ' + pvar.slice(1)
          : ' += ' + pvar))));
    this.own && (head += ") if (" + o.scope.assign('__own', '{}.hasOwnProperty') + ".call(" + svar + ", " + idx + ")");
    head += ') {';
    this.infuseIIFE();
    o.indent += TAB;
    if (this.item && !this.item.isEmpty()) {
      head += '\n' + o.indent + Assign(this.item, JS(svar + "[" + idx + "]")).compile(o, LEVEL_TOP) + ';';
    }
    body = this.compileBody(o);
    if (this.item && '}' === body.charAt(0)) {
      head += '\n' + this.tab;
    }
    return head + body;
  };
  prototype.infuseIIFE = function(){
    var __this = this;
    function dup(params, name){
      var p, __i, __len;
      if (name) {
        for (__i = 0, __len = params.length; __i < __len; ++__i) {
          p = params[__i];
          if (name === p.value) {
            return true;
          }
        }
      }
    }
    this.body.traverseChildren(function(it){
      var fun, params, call, index, item;
      if (!(it.calling || it.op === 'new' && (fun = it.it).params)) {
        return;
      }
      if (fun) {
        it.it = Call.make((fun['void'] = true, fun));
      } else {
        fun = it.it.head;
      }
      params = fun.params;
      call = it.it.tails[0];
      if (params.length ^ call.args.length - !!call.method) {
        return;
      }
      index = __this.index, item = __this.item;
      if (index && !dup(params, index)) {
        call.args.push(params[params.length] = Var(index));
      }
      if (item instanceof Var && !dup(params, item.value)) {
        call.args.push(params[params.length] = item);
      }
    });
  };
  return For;
}(While));
exports.Try = Try = (function(superclass){
  Try.displayName = 'Try';
  var prototype = __extend(Try, superclass).prototype, constructor = Try;
  function Try(attempt, thrown, recovery, ensure){
    this.attempt = attempt;
    this.thrown = thrown != null ? thrown : '__e';
    this.recovery = recovery;
    this.ensure = ensure;
  }
  prototype.children = ['attempt', 'recovery', 'ensure'];
  prototype.show = function(){
    return this.thrown;
  };
  prototype.isStatement = YES;
  prototype.isCallable = function(){
    var __ref;
    return ((__ref = this.recovery) != null ? __ref.isCallable() : void 8) && this.attempt.isCallable();
  };
  prototype.getJump = function(it){
    var __ref;
    return this.attempt.getJump(it) || ((__ref = this.recovery) != null ? __ref.getJump(it) : void 8);
  };
  prototype.makeReturn = function(it){
    this.attempt = this.attempt.makeReturn(it);
    if (this.recovery != null) {
      this.recovery = this.recovery.makeReturn(it);
    }
    return this;
  };
  prototype.compileNode = function(o){
    var code, v;
    o.indent += TAB;
    code = "try " + this.compileBlock(o, this.attempt);
    if (this.recovery || !this.ensure) {
      o.scope.check(v = this.thrown || 'e') || o.scope.add(v, 'catch');
      code += " catch (" + v + ") " + this.compileBlock(o, this.recovery);
    }
    if (this.ensure) {
      code += " finally " + this.compileBlock(o, this.ensure);
    }
    return code;
  };
  return Try;
}(Node));
exports.Switch = Switch = (function(superclass){
  Switch.displayName = 'Switch';
  var prototype = __extend(Switch, superclass).prototype, constructor = Switch;
  function Switch(topic, cases, $default){
    this.topic = topic;
    this.cases = cases;
    this['default'] = $default;
  }
  prototype.children = ['topic', 'cases', 'default'];
  prototype.aSource = 'topic';
  prototype.aTargets = ['cases'];
  prototype.isStatement = YES;
  prototype.isCallable = function(){
    var c, __i, __ref, __len;
    for (__i = 0, __len = (__ref = this.cases).length; __i < __len; ++__i) {
      c = __ref[__i];
      if (!c.isCallable()) {
        return false;
      }
    }
    return (__ref = this['default']) != null ? __ref.isCallable() : void 8;
  };
  prototype.getJump = function(ctx){
    var c, that, __i, __ref, __len;
    ctx || (ctx = {});
    ctx['break'] = true;
    for (__i = 0, __len = (__ref = this.cases).length; __i < __len; ++__i) {
      c = __ref[__i];
      if (that = c.body.getJump(ctx)) {
        return that;
      }
    }
    return (__ref = this['default']) != null ? __ref.getJump(ctx) : void 8;
  };
  prototype.makeReturn = function(it){
    var c, __i, __ref, __len;
    for (__i = 0, __len = (__ref = this.cases).length; __i < __len; ++__i) {
      c = __ref[__i];
      c.makeReturn(it);
    }
    if ((__ref = this['default']) != null) {
      __ref.makeReturn(it);
    }
    return this;
  };
  prototype.compileNode = function(o){
    var tab, topic, code, stop, i, c, that, __ref, __len;
    tab = this.tab;
    topic = !!this.topic && this.anaphorize().compile(o, LEVEL_PAREN);
    code = "switch (" + topic + ") {\n";
    stop = this['default'] || this.cases.length - 1;
    o['break'] = true;
    for (i = 0, __len = (__ref = this.cases).length; i < __len; ++i) {
      c = __ref[i];
      code += c.compileCase(o, tab, i === stop, !topic);
    }
    if (this['default']) {
      o.indent = tab + TAB;
      if (that = this['default'].compile(o, LEVEL_TOP)) {
        code += tab + ("default:\n" + that + "\n");
      }
    }
    return code + tab + '}';
  };
  return Switch;
}(Node));
exports.Case = Case = (function(superclass){
  Case.displayName = 'Case';
  var prototype = __extend(Case, superclass).prototype, constructor = Case;
  function Case(tests, body){
    this.tests = tests;
    this.body = body;
  }
  prototype.children = ['tests', 'body'];
  prototype.isCallable = function(){
    return this.body.isCallable();
  };
  prototype.makeReturn = function(it){
    var __ref;
    if (((__ref = (__ref = this.body.lines)[__ref.length - 1]) != null ? __ref.value : void 8) !== 'fallthrough') {
      this.body.makeReturn(it);
    }
    return this;
  };
  prototype.compileCase = function(o, tab, nobr, bool){
    var test, t, tests, i, that, code, lines, last, ft, __res, __i, __ref, __len, __j, __ref1, __len1;
    __res = [];
    for (__i = 0, __len = (__ref = this.tests).length; __i < __len; ++__i) {
      test = __ref[__i];
      test = test.expandSlice(o).unwrap();
      if (test instanceof Arr) {
        for (__j = 0, __len1 = (__ref1 = test.items).length; __j < __len1; ++__j) {
          t = __ref1[__j];
          __res.push(t);
        }
      } else {
        __res.push(test);
      }
    }
    tests = __res;
    tests.length || tests.push(Literal('void'));
    if (bool) {
      t = tests[0];
      i = 0;
      while (that = tests[++i]) {
        t = Binary('||', t, that);
      }
      tests = [(this.t = t, this.aSource = 't', this.aTargets = ['body'], this).anaphorize().invert()];
    }
    code = '';
    for (__i = 0, __len = tests.length; __i < __len; ++__i) {
      t = tests[__i];
      code += tab + ("case " + t.compile(o, LEVEL_PAREN) + ":\n");
    }
    lines = this.body.lines;
    last = lines[lines.length - 1];
    if (ft = (last != null ? last.value : void 8) === 'fallthrough') {
      lines[lines.length - 1] = JS('// fallthrough');
    }
    o.indent = tab += TAB;
    if (that = this.body.compile(o, LEVEL_TOP)) {
      code += that + '\n';
    }
    if (!(nobr || ft || last instanceof Jump)) {
      code += tab + 'break;\n';
    }
    return code;
  };
  return Case;
}(Node));
exports.If = If = (function(superclass){
  If.displayName = 'If';
  var prototype = __extend(If, superclass).prototype, constructor = If;
  function If($if, then, un){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this['if'] = $if;
    __this.then = then;
    __this.un = un;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.children = ['if', 'then', 'else'];
  prototype.aSource = 'if';
  prototype.aTargets = ['then'];
  prototype.show = function(){
    return this.un && '!';
  };
  prototype.terminator = '';
  prototype.addElse = function(it){
    if (this['else'] instanceof constructor) {
      this['else'].addElse(it);
    } else {
      this['else'] = it;
    }
    return this;
  };
  prototype.delegate(['isCallable', 'isArray', 'isString', 'isRegex'], function(it){
    var __ref;
    return ((__ref = this['else']) != null ? __ref[it]() : void 8) && this.then[it]();
  });
  prototype.getJump = function(it){
    var __ref;
    return this.then.getJump(it) || ((__ref = this['else']) != null ? __ref.getJump(it) : void 8);
  };
  prototype.makeReturn = function(it){
    this.then = this.then.makeReturn(it);
    if (this['else'] != null) {
      this['else'] = this['else'].makeReturn(it);
    }
    return this;
  };
  prototype.compileNode = function(o){
    if (this.un) {
      this['if'] = this['if'].invert();
    } else {
      this.soak || this.anaphorize();
    }
    if (o.level) {
      return this.compileExpression(o);
    } else {
      return this.compileStatement(o);
    }
  };
  prototype.compileStatement = function(o){
    var code, els;
    code = "if (" + this['if'].compile(o, LEVEL_PAREN) + ") ";
    o.indent += TAB;
    code += this.compileBlock(o, Block(this.then));
    if (!(els = this['else'])) {
      return code;
    }
    return code + ' else ' + (els instanceof constructor
      ? els.compile((o.indent = this.tab, o), LEVEL_TOP)
      : this.compileBlock(o, els));
  };
  prototype.compileExpression = function(o){
    var thn, els, code, pad;
    thn = this.then, els = this['else'];
    this['void'] && (thn['void'] = (els || 0)['void'] = true);
    if (!els && (this.cond || this['void'])) {
      return Parens(Binary('&&', this['if'], thn)).compile(o);
    }
    code = this['if'].compile(o, LEVEL_COND);
    pad = els != null && els.isComplex() ? '\n' + (o.indent += TAB) : ' ';
    code += pad + "? " + thn.compile(o, LEVEL_LIST) + "" + pad + ": " + ((els != null ? els.compile(o, LEVEL_LIST) : void 8) || 'void 8');
    if (o.level < LEVEL_COND) {
      return code;
    } else {
      return "(" + code + ")";
    }
  };
  If.unfoldSoak = function(o, parent, name){
    var that;
    if (that = parent[name].unfoldSoak(o)) {
      parent[name] = that.then;
      return that.cond = parent.cond, that['void'] = parent['void'], that.then = Chain(parent), that;
    }
  };
  return If;
}(Node));
exports.Label = Label = (function(superclass){
  Label.displayName = 'Label';
  var __ref, prototype = __extend(Label, superclass).prototype, constructor = Label;
  function Label(label, it){
    var fun;
    this.label = label || '_';
    this.it = it;
    if (fun = (it instanceof Fun || it instanceof Class) && it || it.calling && it.it.head) {
      fun.name || (fun.name = this.label, fun.labeled = true);
      return it;
    }
  }
  __ref = Parens.prototype, prototype.children = __ref.children, prototype.isCallable = __ref.isCallable, prototype.isArray = __ref.isArray;
  prototype.show = function(){
    return this.label;
  };
  prototype.isStatement = YES;
  prototype.getJump = function(ctx){
    ctx || (ctx = {});
    (ctx.labels || (ctx.labels = [])).push(this.label);
    return this.it.getJump((ctx['break'] = true, ctx));
  };
  prototype.makeReturn = function(it){
    this.it = this.it.makeReturn(it);
    return this;
  };
  prototype.compileNode = function(o){
    var label, it, labels;
    label = this.label, it = this.it;
    labels = o.labels = __slice.call(o.labels || []);
    if (__in(label, labels)) {
      this.carp("duplicate label \"" + label + "\"");
    }
    labels.push(label);
    it.isStatement() || (it = Block(it));
    return (label + ": ") + (it instanceof Block
      ? (o.indent += TAB, this.compileBlock(o, it))
      : it.compile(o));
  };
  return Label;
}(Node));
exports.JS = JS = (function(superclass){
  JS.displayName = 'JS';
  var prototype = __extend(JS, superclass).prototype, constructor = JS;
  function JS(code, literal, comment){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.code = code;
    __this.literal = literal;
    __this.comment = comment;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.show = function(){
    if (this.comment) {
      return this.code;
    } else {
      return "`" + this.code + "`";
    }
  };
  prototype.terminator = '';
  prototype.isAssignable = prototype.isCallable = function(){
    return !this.comment;
  };
  prototype.compile = function(it){
    if (this.literal) {
      return entab(this.code, it.indent);
    } else {
      return this.code;
    }
  };
  return JS;
}(Node));
exports.Util = Util = (function(superclass){
  Util.displayName = 'Util';
  var prototype = __extend(Util, superclass).prototype, constructor = Util;
  function Util(verb){
    var __this = this instanceof __ctor ? this : new __ctor;
    __this.verb = verb;
    return __this;
  } function __ctor(){} __ctor.prototype = prototype;
  prototype.show = Jump.prototype.show;
  prototype.isCallable = YES;
  prototype.compile = function(){
    return util(this.verb);
  };
  Util.Extends = function(){
    return Call.make(Util('extend'), [arguments[0], arguments[1]]);
  };
  return Util;
}(Node));
exports.L = function(yylineno, node){
  return node.line = yylineno + 1, node;
};
exports.Export = function(lines){
  var i, out, node, that, __ref;
  i = -1;
  out = Util('out');
  while (node = lines[++i]) {
    if (that = node instanceof Fun && node.name) {
      lines.splice(i++, 0, Assign(Chain(out, [Index(Key(that))]), Var(that)));
      continue;
    }
    lines[i] = (that = node.varName() || node instanceof Assign && node.left.varName() || node instanceof Class && ((__ref = node.title) != null ? __ref.varName() : void 8))
      ? Assign(Chain(out, [Index(Key(that))]), node)
      : Import(out, node);
  }
  return __ref = __clone(Block.prototype), __ref.lines = lines, __ref;
};
function Scope(parent, shared){
  this.parent = parent;
  this.shared = shared;
  this.variables = {};
}
__ref = Scope.prototype;
__ref.add = function(name, type){
  this.variables[name + "."] = type;
  return name;
};
__ref.declare = function(name){
  var that, scope, type;
  if (that = this.shared) {
    if (this.check(name)) {
      return;
    }
    scope = that;
  } else {
    scope = this;
  }
  if (!((type = this.variables[name + "."]) && ((type == 'var' || type == 'arg') || type.value))) {
    return scope.add(name, 'var');
  }
};
__ref.assign = function(name, value){
  return this.add(name, {
    value: value
  });
};
__ref.temporary = function(name){
  var i, temp, __ref;
  name || (name = 'ref');
  i = 0;
  do {
    temp = '__' + (name.length > 1
      ? name + (i++ || '')
      : (i++ + parseInt(name, 36)).toString(36));
  } while ((__ref = this.variables[temp + "."]) != 'reuse' && __ref != void 8);
  return this.add(temp, 'var');
};
__ref.free = function(it){
  return this.add(it, 'reuse');
};
__ref.check = function(name, above){
  var found, __ref;
  if ((found = name + "." in this.variables) || !above) {
    return found;
  }
  return (__ref = this.parent) != null ? __ref.check(name, above) : void 8;
};
__ref.emit = function(code, tab){
  var usr, tmp, asn, fun, name, type, that, val, __ref;
  usr = [];
  tmp = [];
  asn = [];
  fun = [];
  for (name in __ref = this.variables) {
    type = __ref[name];
    name = name.slice(0, -1);
    if (type == 'var' || type == 'reuse') {
      ('_' === name.charAt(0) ? tmp : usr).push(name);
    } else if (that = type.value) {
      if (~(val = entab(that, tab)).lastIndexOf('function(', 0)) {
        fun.push("function " + name + val.slice(8));
      } else {
        asn.push(name + " = " + val);
      }
    }
  }
  if (that = usr.concat(tmp, asn).join(', ')) {
    code = tab + "var " + that + ";\n" + code;
  }
  if (that = fun.join("\n" + tab)) {
    return code + "\n" + tab + that;
  } else {
    return code;
  }
};
function YES(){
  return true;
}
function NO(){
  return false;
}
function THIS(){
  return this;
}
function VOID(){}
UTILS = {
  clone: 'function(it){\n  function fun(){} fun.prototype = it;\n  return new fun;\n}',
  extend: 'function(sub, sup){\n  function fun(){} fun.prototype = (sub.superclass = sup).prototype;\n  (sub.prototype = new fun).constructor = sub;\n  if (typeof sup.extended == \'function\') sup.extended(sub);\n  return sub;\n}',
  bind: 'function(obj, key){\n  return function(){ return obj[key].apply(obj, arguments) };\n}',
  'import': 'function(obj, src){\n  var own = {}.hasOwnProperty;\n  for (var key in src) if (own.call(src, key)) obj[key] = src[key];\n  return obj;\n}',
  importAll: 'function(obj, src){\n  for (var key in src) obj[key] = src[key];\n  return obj;\n}',
  repeatString: 'function(str, n){\n  for (var r = \'\'; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;\n  return r;\n}',
  repeatArray: 'function(arr, n){\n  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))\n    if (n & 1) r.push.apply(r, arr);\n  return r;\n}',
  'in': 'function(x, arr){\n  var i = 0, l = arr.length >>> 0;\n  while (i < l) if (x === arr[i++]) return true;\n  return false;\n}',
  out: 'typeof exports != \'undefined\' && exports || this',
  curry: 'function(f, args){\n  return f.length ? function(){\n    var params = args ? args.concat() : [];\n    return params.push.apply(params, arguments) < f.length ?\n      __curry.call(this, f, params) : f.apply(this, params);\n  } : f;\n}',
  compose: 'function(f, g){\n  return function(){\n    return f(g.apply(this, arguments)); \n  }\n}',
  equals: '__curry(function(x, y){ return x === y; })',
  notEquals: '__curry(function(x, y){ return x !== y; })',
  fuzzyEquals: '__curry(function(x, y){ return x == y; })',
  fuzzyNotEquals: '__curry(function(x, y){ return x != y; })',
  lt: '__curry(function(x, y){ return x < y; })',
  lte: '__curry(function(x, y){ return x <= y; })',
  gt: '__curry(function(x, y){ return x > y; })',
  gte: '__curry(function(x, y){ return x >= y; })',
  add: '__curry(function(x, y){ return x + y; })',
  minus: '__curry(function(x, y){ return x - y; })',
  subtract: '__curry(function(x, y){ return y - x; })',
  multiply: '__curry(function(x, y){ return x * y; })',
  divide: '__curry(function(x, y){ return x / y; })',
  divideBy: '__curry(function(x, y){ return y / x; })',
  andTest: '__curry(function(x, y){ return x && y; })',
  orTest: '__curry(function(x, y){ return x || y; })',
  rem: '__curry(function(x, y){ return x % y; })',
  remTo: '__curry(function(x, y){ return y % x; })',
  mod: '__curry(function(x, y){ return (x % y + y) % y; })',
  modTo: '__curry(function(y, x){ return (x % y + y) % y; })',
  pow: '__curry(function(x, y){ return Math.pow(x, y); })',
  powTo: '__curry(function(x, y){ return Math.pow(y, x); })',
  cons: '__curry(function(x, y){ return [x].concat(y); })',
  consTo: '__curry(function(x, y){ return [y].concat(x); })',
  append: '__curry(function(x, y){ return x.concat(y); })',
  appendTo: '__curry(function(x, y){ return y.concat(x); })',
  min: '__curry(function(x, y){ return x > y ? y : x; })',
  max: '__curry(function(x, y){ return x > y ? x : y; })',
  split: "''.split",
  replace: "''.replace",
  toString: '{}.toString',
  join: '[].join',
  slice: '[].slice'
};
LEVEL_TOP = 0;
LEVEL_PAREN = 1;
LEVEL_LIST = 2;
LEVEL_COND = 3;
LEVEL_OP = 4;
LEVEL_CALL = 5;
(function(){
  this['&&'] = this['||'] = 0.2;
  this['&&&'] = this['^^^'] = this['|||'] = 0.3;
  this['=='] = this['!='] = this['==='] = this['!=='] = 0.4;
  this['<'] = this['>'] = this['<='] = this['>='] = this.of = this['instanceof'] = this['+++'] = 0.5;
  this['<<<<<'] = this['>>>>'] = this['>>>>>'] = 0.6;
  this['+'] = this['-'] = 0.7;
  this['*'] = this['/'] = this['%'] = 0.8;
}.call(PREC = {
  unary: 0.9
}));
TAB = '  ';
ID = /^(?!\d)[$\w\x7f-\uffff]+$/;
SIMPLENUM = /^\d+$/;
function util(it){
  return Scope.root.assign('__' + it, UTILS[it]);
}
function entab(code, tab){
  return code.replace(/\n/g, '\n' + tab);
}
function __import(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function __clone(it){
  function fun(){} fun.prototype = it;
  return new fun;
}
function __extend(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function __repeatString(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
function __in(x, arr){
  var i = 0, l = arr.length >>> 0;
  while (i < l) if (x === arr[i++]) return true;
  return false;
}
function __importAll(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}

/***/ },
/* 3 */
/***/ function(module, exports) {

var string, TABS, unlines, enlines, enslash, reslash, character, KEYWORDS_SHARED, KEYWORDS_UNUSED, KEYWORDS, ID, SYMBOL, SPACE, MULTIDENT, SIMPLESTR, BSTOKEN, NUMBER, NUMBER_OMIT, REGEX, HEREGEX_OMIT, LASTDENT, INLINEDENT, OPENERS, CLOSERS, INVERSES, CHAIN, ARG, __slice = [].slice;
exports.lex = function(code, options){
  return __clone(exports).tokenize(code || '', options || {});
};
exports.rewrite = function(it){
  var __ref;
  it || (it = this.tokens);
  addImplicitIndentation(it);
  tagPostfixConditionals(it);
  addImplicitParentheses(it);
  addImplicitBraces(it);
  expandLiterals(it);
  if (((__ref = it[0]) != null ? __ref[0] : void 8) === 'NEWLINE') {
    it.shift();
  }
  return it;
};
exports.tokenize = function(code, o){
  var i, c, that;
  this.inter || (code = code.replace(/[\r\u2028\u2029\uFEFF]/g, ''));
  code = '\n' + code;
  this.tokens = [this.last = ['NEWLINE', '\n', 0]];
  this.line = ~-o.line;
  this.dents = [];
  this.closes = [];
  this.parens = [];
  i = 0;
  while (c = code.charAt(i)) {
    switch (c) {
    case ' ':
      i += this.doSpace(code, i);
      break;
    case '\n':
      i += this.doLine(code, i);
      break;
    case '\\':
      i += this.doBackslash(code, i);
      break;
    case '\'':
    case '"':
      i += this.doString(code, i, c);
      break;
    case "0":
    case "1":
    case "2":
    case "3":
    case "4":
    case "5":
    case "6":
    case "7":
    case "8":
    case "9":
      i += this.doNumber(code, i);
      break;
    case '/':
      switch (code.charAt(i + 1)) {
      case '*':
        i += this.doComment(code, i);
        break;
      case '/':
        i += this.doHeregex(code, i);
        break;
      default:
        i += this.doRegex(code, i) || this.doLiteral(code, i);
      }
      break;
    default:
      i += this.doID(code, i) || this.doLiteral(code, i) || this.doSpace(code, i);
    }
  }
  this.dedent(this.dent);
  if (that = this.closes.pop()) {
    this.carp("missing `" + that + "`");
  }
  if (this.inter) {
    this.rest == null && this.carp('unterminated interpolation');
  } else {
    this.last.spaced = true;
    this.newline();
  }
  o.raw || this.rewrite();
  return this.tokens;
};
exports.dent = 0;
exports.doID = function(code, index){
  var match, input, id, last, tag, __ref;
  input = (match = (ID.lastIndex = index, ID).exec(code))[0];
  if (!input) {
    return 0;
  }
  id = match[1];
  last = this.last;
  if (match[2] || last[0] === 'DOT' || this.adi()) {
    this.token('ID', __in(id, KEYWORDS) ? (__ref = Object(id), __ref.reserved = true, __ref) : id);
    if (match[2]) {
      this.token(':', ':');
    }
    return input.length;
  }
  switch (id) {
  case 'this':
  case 'eval':
  case 'super':
    return this.token('LITERAL', id, true).length;
  case 'true':
  case 'false':
  case 'on':
  case 'off':
  case 'yes':
  case 'no':
  case 'null':
  case 'void':
  case 'undefined':
  case 'arguments':
  case 'debugger':
    tag = 'LITERAL';
    break;
  case 'new':
  case 'do':
  case 'typeof':
  case 'delete':
    tag = 'UNARY';
    break;
  case 'return':
  case 'throw':
    tag = 'HURL';
    break;
  case 'break':
  case 'continue':
    tag = 'JUMP';
    break;
  case 'for':
    this.seenFor = true;
    // fallthrough
  case 'then':
    this.wantBy = false;
    break;
  case 'catch':
  case 'function':
    id = '';
    break;
  case 'in':
  case 'of':
    if (this.seenFor) {
      this.seenFor = false;
      if (id === 'in') {
        id = '';
        this.wantBy = true;
        if (last[0] === 'ID' && (__ref = this.tokens)[__ref.length - 2][0] !== 'FOR') {
          id = this.tokens.pop()[1];
          if ((__ref = this.tokens)[__ref.length - 1][0] === ',') {
            this.tokens.pop();
          }
        }
      }
      break;
    }
    // fallthrough
  case 'instanceof':
    if (last[1] === '!') {
      id = this.tokens.pop()[1] + id;
    }
    tag = 'RELATION';
    break;
  case 'not':
    if (last.alias && last[1] === '===') {
      return last[1] = '!==', 3;
    }
    tag = 'UNARY';
    id = '!';
    break;
  case 'and':
  case 'or':
  case 'is':
  case 'isnt':
    this.unline();
    tag = id == 'is' || id == 'isnt' ? 'COMPARE' : 'LOGIC';
    if (this.last[0] === '(') {
      tag = 'BIOP';
    }
    this.token(tag, (function(){
      switch (id) {
      case 'is':
        return '===';
      case 'isnt':
        return '!==';
      case 'or':
        return '||';
      case 'and':
        return '&&';
      }
    }()));
    this.last.alias = true;
    return id.length;
  case 'unless':
    tag = 'IF';
    break;
  case 'until':
    tag = 'WHILE';
    break;
  case 'import':
    id = '<<<';
    able(this.tokens) || this.token('LITERAL', 'this');
    break;
  case 'when':
    tag = 'CASE';
    // fallthrough
  case 'case':
    if (this.doCase()) {
      return input.length;
    }
    break;
  case 'loop':
    this.token('WHILE', id);
    this.token('LITERAL', 'true');
    return input.length;
  default:
    if (__in(id, KEYWORDS_SHARED)) {
      break;
    }
    if (__in(id, KEYWORDS_UNUSED)) {
      this.carp("reserved word \"" + id + "\"");
    }
    if (!last[1] && ((__ref = last[0]) == 'CATCH' || __ref == 'FUNCTION' || __ref == 'LABEL')) {
      last[1] = id;
      last.spaced = false;
      return id.length;
    }
    tag = 'ID';
    switch (id) {
    case 'own':
      if (last[0] === 'FOR') {
        tag = 'OWN';
      }
      break;
    case 'otherwise':
      if ((__ref = last[0]) == 'CASE' || __ref == '|') {
        last[0] = 'DEFAULT';
        return 9;
      }
      break;
    case 'all':
      if (last[1] === '<<<') {
        last[1] += '<';
        return 4;
      }
      break;
    case 'from':
      this.forange() && (tag = 'FROM');
      break;
    case 'to':
    case 'til':
      this.forange() && this.tokens.push(['FROM', '', this.line], ['STRNUM', '0', this.line]);
      if (this.seenFrom) {
        this.seenFrom = false;
        this.wantBy = true;
        tag = 'TO';
      } else if (!last.callable && last[0] === 'STRNUM' && (__ref = this.tokens)[__ref.length - 2][0] === '[') {
        last[0] = 'RANGE';
        last.op = id;
        return id.length;
      } else if (__in(']', this.closes)) {
        this.token('TO', id);
        return id.length;
      }
      break;
    case 'by':
      if (last[0] === 'STRNUM' && (__ref = this.tokens)[__ref.length - 2][0] === 'RANGE' && (__ref = this.tokens)[__ref.length - 3][0] === '[') {
        tag = 'RANGE_BY';
      } else if (__in(']', this.closes)) {
        tag = 'BY';
      } else {
        this.wantBy && (this.wantBy = !(tag = 'BY'));
      }
      break;
    case 'ever':
      if (last[0] === 'FOR') {
        this.seenFor = false;
        last[0] = 'WHILE';
        tag = 'LITERAL';
        id = 'true';
      }
    }
  }
  tag || (tag = match[1].toUpperCase());
  if (tag == 'RELATION' || tag == 'THEN' || tag == 'ELSE' || tag == 'CASE' || tag == 'DEFAULT' || tag == 'CATCH' || tag == 'FINALLY' || tag == 'IN' || tag == 'OF' || tag == 'FROM' || tag == 'TO' || tag == 'BY' || tag == 'EXTENDS') {
    this.unline();
  }
  this.token(tag, id);
  return input.length;
};
exports.doNumber = function(code, lastIndex){
  var match, input, last, radix, rnum, num, __ref;
  NUMBER.lastIndex = lastIndex;
  if (!(input = (match = NUMBER.exec(code))[0])) {
    return 0;
  }
  last = this.last;
  if (match[5] && (last[0] === 'DOT' || this.adi())) {
    this.token('STRNUM', match[4].replace(NUMBER_OMIT, ''));
    return match[4].length;
  }
  if (radix = match[1]) {
    num = parseInt(rnum = match[2].replace(NUMBER_OMIT, ''), radix);
    if (radix > 36 || radix < 2) {
      this.carp("invalid number base " + radix + " (with number " + rnum + "), base must be from 2 to 36");
    }
    if (isNaN(num) || num === parseInt(rnum.slice(0, -1), radix)) {
      this.carp("invalid number " + rnum + " in base " + radix);
    }
    num += '';
  } else {
    num = (match[3] || input).replace(NUMBER_OMIT, '');
    if (match[3] && num.charAt() === '0' && ((__ref = num.charAt(1)) != '' && __ref != '.')) {
      this.carp("deprecated octal literal " + match[4]);
    }
  }
  if (!last.spaced && last[0] === '+-') {
    last[0] = 'STRNUM';
    last[1] += num;
    return input.length;
  }
  this.strnum(num);
  return input.length;
};
exports.doString = function(code, index, q){
  var parts, str;
  if (q === code.charAt(index + 1)) {
    return q === code.charAt(index + 2)
      ? this.doHeredoc(code, index, q)
      : (this.strnum(q + q), 2);
  }
  if (q === '"') {
    parts = this.interpolate(code, index, q);
    this.addInterpolated(parts, unlines);
    return 1 + parts.size;
  }
  str = (SIMPLESTR.lastIndex = index, SIMPLESTR).exec(code)[0] || this.carp('unterminated string');
  this.strnum(unlines(string(q, str.slice(1, -1))));
  return this.countLines(str).length;
};
exports.doHeredoc = function(code, index, q){
  var end, raw, doc, parts, tabs, i, t, __len;
  if (q === '\'') {
    ~(end = code.indexOf(q + q + q, index + 3)) || this.carp('unterminated heredoc');
    raw = code.slice(index + 3, end);
    doc = raw.replace(LASTDENT, '');
    this.strnum(enlines(string(q, lchomp(detab(doc, heretabs(doc))))));
    return this.countLines(raw).length + 6;
  }
  parts = this.interpolate(code, index, q + q + q);
  tabs = heretabs(code.slice(index + 3, index + parts.size).replace(LASTDENT, ''));
  for (i = 0, __len = parts.length; i < __len; ++i) {
    t = parts[i];
    if (t[0] === 'S') {
      if (i + 1 === parts.length) {
        t[1] = t[1].replace(LASTDENT, '');
      }
      t[1] = detab(t[1], tabs);
      if (i === 0) {
        t[1] = lchomp(t[1]);
      }
    }
  }
  this.addInterpolated(parts, enlines);
  return 3 + parts.size;
};
exports.doComment = function(code, index){
  var end, comment, __ref;
  comment = ~(end = code.indexOf('*/', index + 2))
    ? code.slice(index, end + 2)
    : code.slice(index) + '*/';
  if ((__ref = this.last[0]) == 'NEWLINE' || __ref == 'INDENT' || __ref == 'THEN' || __ref == '=>') {
    this.token('COMMENT', detab(comment, this.dent));
    this.token('NEWLINE', '\n');
  } else {
    this.last.spaced = true;
  }
  return this.countLines(comment).length;
};
exports.doRegex = function(code, index){
  var divisable, input, body, flag, __ref;
  if (divisable = able(this.tokens)) {
    if (!this.last.spaced || ((__ref = code.charAt(index + 1)) == ' ' || __ref == '=')) {
      return 0;
    }
  }
  __ref = (REGEX.lastIndex = index, REGEX).exec(code), input = __ref[0], body = __ref[1], flag = __ref[2];
  if (input) {
    this.regex(body, flag);
  } else if (!divisable && this.last[0] !== '(') {
    this.carp('unterminated regex');
  }
  return input.length;
};
exports.doHeregex = function(code, index){
  var tokens, last, parts, rest, flag, i, t, dynaflag, val, one, __len;
  tokens = this.tokens, last = this.last;
  parts = this.interpolate(code, index, '//');
  rest = code.slice(index + 2 + parts.size);
  flag = this.validate(/^(?:[gimy]{1,4}|[?$]?)/.exec(rest)[0]);
  if (parts[1]) {
    if (flag === '$') {
      this.adi();
      this.token('(', '"');
    } else {
      tokens.push(['ID', 'RegExp', last[2]], ['CALL(', '', last[2]]);
      if (flag === '?') {
        for (i = parts.length - 1; i >= 0; --i) {
          t = parts[i];
          if (t[0] === 'TOKENS') {
            dynaflag = parts.splice(i, 1)[0][1];
            break;
          }
        }
      }
    }
    for (i = 0, __len = parts.length; i < __len; ++i) {
      t = parts[i];
      if (t[0] === 'TOKENS') {
        tokens.push.apply(tokens, t[1]);
      } else {
        val = t[1].replace(HEREGEX_OMIT, '');
        if (one && !val) {
          continue;
        }
        one = tokens.push((t[0] = 'STRNUM', t[1] = string('\'', enslash(val)), t));
      }
      tokens.push(['+-', '+', tokens[tokens.length - 1][2]]);
    }
    --tokens.length;
    if (dynaflag || flag >= 'g') {
      this.token(',', ',');
      if (dynaflag) {
        tokens.push.apply(tokens, dynaflag);
      } else {
        this.token('STRNUM', "'" + flag + "'");
      }
    }
    this.token(flag === '$' ? ')' : ')CALL', '');
  } else {
    this.regex(reslash(parts[0][1].replace(HEREGEX_OMIT, '')), flag);
  }
  return 2 + parts.size + flag.length;
};
exports.doBackslash = function(code, lastIndex){
  var input, word, __ref;
  BSTOKEN.lastIndex = lastIndex;
  __ref = BSTOKEN.exec(code), input = __ref[0], word = __ref[1];
  if (word) {
    this.strnum(string('\'', word));
  } else {
    this.countLines(input);
  }
  return input.length;
};
exports.doLine = function(code, index){
  var input, tabs, length, last, delta, that, tag, __ref;
  __ref = (MULTIDENT.lastIndex = index, MULTIDENT).exec(code), input = __ref[0], tabs = __ref[1];
  length = this.countLines(input).length;
  last = this.last;
  last.eol = true;
  last.spaced = true;
  if (index + length >= code.length) {
    return length;
  }
  if (0 > (delta = tabs.length - this.dent)) {
    this.dedent(-delta);
    this.newline();
  } else {
    if (that = tabs && (this.emender || (this.emender = RegExp('[^' + tabs.charAt(0) + ']'))).exec(tabs)) {
      this.carp("contaminated indent " + escape(that));
    }
    if ((tag = last[0]) === 'ASSIGN' && ((__ref = '' + last[1]) != '=' && __ref != ':=' && __ref != '+=') || (tag == '+-' || tag == 'PIPE' || tag == 'BACKPIPE' || tag == 'DOT' || tag == 'LOGIC' || tag == 'MATH' || tag == 'COMPARE' || tag == 'RELATION' || tag == 'SHIFT' || tag == 'BITWISE' || tag == 'IN' || tag == 'OF' || tag == 'TO' || tag == 'BY' || tag == 'FROM' || tag == 'EXTENDS')) {
      return length;
    }
    if (delta) {
      this.indent(delta);
    } else {
      this.newline();
    }
  }
  this.wantBy = false;
  return length;
};
exports.doSpace = function(code, lastIndex){
  var input;
  SPACE.lastIndex = lastIndex;
  if (input = SPACE.exec(code)[0]) {
    this.last.spaced = true;
  }
  return input.length;
};
exports.doCase = function(){
  var __ref, __ref1;
  if (((__ref = this.last[0]) == 'ASSIGN' || __ref == '->' || __ref == ':') || (this.last[0] === 'INDENT' && ((__ref = (__ref1 = this.tokens)[__ref1.length - 2][0]) == 'ASSIGN' || __ref == '->' || __ref == ':'))) {
    this.token('SWITCH', 'switch');
    this.line++;
    return this.token('CASE', 'case');
  }
};
exports.doLiteral = function(code, index){
  var sym, val, tag, arrow, i, t, that, up, __ref, __ref1;
  if (!(sym = (SYMBOL.lastIndex = index, SYMBOL).exec(code)[0])) {
    return 0;
  }
  switch (tag = val = sym) {
  case '=>':
    tag = 'THEN';
    this.unline();
    break;
  case '|':
    tag = 'CASE';
    if (this.doCase()) {
      return sym.length;
    }
    break;
  case '|>':
  case '|>>':
    tag = 'PIPE';
    break;
  case '`':
    tag = 'BACKTICK';
    break;
  case '<<':
  case '>>':
    tag = 'COMPOSE';
    break;
  case '<|':
    tag = 'BACKPIPE';
    break;
  case '+':
  case '-':
    tag = '+-';
    break;
  case '&':
    tag = 'CONCAT';
    break;
  case '&&':
  case '||':
    tag = 'LOGIC';
    break;
  case '&&&':
  case '|||':
  case '^^^':
    tag = 'BITWISE';
    break;
  case '^^':
    tag = 'CLONE';
    break;
  case '**':
  case '^':
    tag = 'POWER';
    break;
  case '?':
  case '!?':
    if (this.last.spaced) {
      tag = 'LOGIC';
    }
    break;
  case '/':
  case '%':
  case '%%':
    tag = 'MATH';
    break;
  case '+++':
    tag = 'CONCAT';
    break;
  case '++':
  case '--':
    tag = 'CREMENT';
    break;
  case '<<<':
  case '<<<<':
    tag = 'IMPORT';
    break;
  case ';':
    tag = 'NEWLINE';
    this.wantBy = false;
    break;
  case '.':
    if (this.last[1] === '?') {
      this.last[0] = '?';
    }
    tag = 'DOT';
    break;
  case ',':
    switch (this.last[0]) {
    case ',':
    case '[':
    case '(':
    case 'CALL(':
      this.token('LITERAL', 'void');
      break;
    case 'FOR':
    case 'OWN':
      this.token('ID', '');
    }
    break;
  case '!=':
    if (!able(this.tokens) && this.last[0] !== '(') {
      this.tokens.push(['UNARY', '!', this.line], ['ASSIGN', '=', this.line]);
      return 2;
    }
    // fallthrough
  case '===':
  case '!==':
  case '==':
    val = (function(){
      switch (val) {
      case '===':
        return '==';
      case '!==':
        return '!=';
      case '==':
        return '===';
      case '!=':
        return '!==';
      }
    }());
    tag = 'COMPARE';
    break;
  case '<':
  case '>':
  case '<=':
  case '>=':
    tag = 'COMPARE';
    break;
  case '<<<<<':
  case '>>>>':
  case '>>>>>':
  case '<?':
  case '>?':
    tag = 'SHIFT';
    break;
  case '(':
    if (!(((__ref = this.last[0]) == 'FUNCTION' || __ref == 'LET') || this.able(true) || this.last[1] === '.@')) {
      this.token('(', '(');
      this.closes.push(')');
      this.parens.push(this.last);
      return 1;
    }
    tag = 'CALL(';
    this.closes.push(')CALL');
    break;
  case '[':
  case '{':
    this.adi();
    this.closes.push(']}'.charAt(val === '{'));
    break;
  case '}':
    if (this.inter && val !== (__ref = this.closes)[__ref.length - 1]) {
      this.rest = code.slice(index + 1);
      return 9e9;
    }
    // fallthrough
  case ']':
  case ')':
    if (tag === ')' && ((__ref = this.last[0]) == '+-' || __ref == 'COMPARE' || __ref == 'SHIFT' || __ref == 'LOGIC' || __ref == 'MATH' || __ref == 'POWER' || __ref == 'CONCAT')) {
      (__ref = this.tokens)[__ref.length - 1][0] = 'BIOP';
    }
    if (')' === (tag = val = this.pair(val))) {
      this.lpar = this.parens.pop();
    }
    break;
  case '=':
  case ':':
    if (this.last[0] === 'UNARY' && this.last[1] === '!' && ((__ref = (__ref1 = this.tokens)[__ref1.length - 2][1]) == '.@' || __ref == 'this')) {
      this.tokens.pop();
      this.token('CALL(', '(');
      this.token(')CALL', ')');
    }
    if (this.last[0] === ')CALL') {
      if (val === '=') {
        tag = 'ASSIGN';
      }
      arrow = '->';
      this.tokens.pop();
      this.token(')PARAM', ')');
      for (i = (__ref = this.tokens).length - 1; i >= 0; --i) {
        t = __ref[i];
        if (t[0] === 'CALL(') {
          break;
        }
      }
      this.tokens.splice(i, 1, [tag, val, this.line], ['PARAM(', '(', this.line]);
      if ((__ref = this.tokens[i - 1][1]) == '.@' || __ref == 'this') {
        this.tokens.splice(i - 1, 1);
        arrow = '~>';
        i--;
      }
      if (this.tokens[i - 2][1] === '!') {
        this.tokens.splice(i - 2, 1);
        this.tokens.splice(i, 0, ['UNARY', '!', this.line]);
      } else if (this.tokens[i - 2][1] === '.' && this.tokens[i - 3][1] === ')' && this.tokens[i - 4][1] === '!' && this.tokens[i - 5][1] === 'this') {
        this.tokens.splice(i - 4, 2);
        this.tokens.splice(i - 1, 0, ['UNARY', '!', this.line]);
      }
      this.token('->', arrow.charAt(0) + arrow);
      return sym.length;
    }
    if (val === ':') {
      if ((__ref = this.last[0]) != 'ID' && __ref != 'STRNUM' && __ref != ')') {
        tag = 'LABEL';
        val = '';
      }
      this.token(tag, val);
      return sym.length;
    }
    // fallthrough
  case ':=':
  case '+=':
  case '-=':
  case '*=':
  case '/=':
  case '%=':
  case '%%=':
  case '<?=':
  case '>?=':
  case '**=':
  case '^=':
    if (this.last[1] === '.' || this.last[0] === '?' && this.adi()) {
      this.last[1] += val;
      return val.length;
    }
    if (this.last[0] === 'LOGIC') {
      (val = Object(val)).logic = this.tokens.pop()[1];
    } else if ((val == '+=' || val == '-=') && !able(this.tokens) && ((__ref = this.last[0]) != '+-' && __ref != 'UNARY' && __ref != 'LABEL')) {
      this.token('UNARY', val.charAt());
      val = '=';
    }
    tag = 'ASSIGN';
    break;
  case '::=':
    this.token('DOT', '.');
    this.token('ID', 'prototype');
    this.token('IMPORT', '<<');
    return sym.length;
  case '*':
    if (that = ((__ref = this.last[0]) == 'NEWLINE' || __ref == 'INDENT' || __ref == 'THEN' || __ref == '=>') && (INLINEDENT.lastIndex = index + 1, INLINEDENT).exec(code)[0].length) {
      this.tokens.push(['LITERAL', 'void', this.line], ['ASSIGN', '=', this.line]);
      this.indent(index + that - 1 - this.dent - code.lastIndexOf('\n', index - 1));
      return that;
    }
    tag = able(this.tokens) || this.last[0] === '(' ? 'MATH' : 'STRNUM';
    break;
  case '@':
  case '@@':
    this.dotcat(val) || (val === '@'
      ? this.token('LITERAL', 'this', true)
      : this.token('LITERAL', 'arguments'));
    return val.length;
  case '!':
    switch (false) {
    default:
      if (!this.last.spaced) {
        if (able(this.tokens, null, true)) {
          this.token('CALL(', '!');
          this.token(')CALL', ')');
        } else if (this.last[1] === 'typeof') {
          this.last[1] = 'classof';
        } else {
          break;
        }
        return 1;
      }
    }
    tag = 'UNARY';
    break;
  case '~':
    if (this.dotcat(val)) {
      return 1;
    }
    tag = 'UNARY';
    break;
  case '->':
  case '~>':
  case '-->':
  case '~~>':
    up = '->';
    // fallthrough
  case '<-':
  case '<~':
    this.parameters(tag = up || '<-');
    break;
  case '::':
    up = 'prototype';
    // fallthrough
  case '..':
    this.adi();
    tag = 'ID';
    val = up || 'constructor';
    break;
  default:
    switch (val.charAt(0)) {
    case '(':
      this.token('CALL(', '(');
      tag = ')CALL';
      val = ')';
      break;
    case '<':
      if (val.length < 4) {
        this.carp('unterminated words');
      }
      this.adi();
      tag = 'WORDS';
      val = val.slice(2, -2);
    }
  }
  if ((tag == '+-' || tag == 'COMPARE' || tag == 'SHIFT' || tag == 'LOGIC' || tag == 'MATH' || tag == 'POWER' || tag == 'CONCAT') && this.last[0] === '(') {
    tag = 'BIOP';
  }
  if (tag == ',' || tag == 'CASE' || tag == 'PIPE' || tag == 'BACKPIPE' || tag == 'DOT' || tag == 'LOGIC' || tag == 'COMPARE' || tag == 'MATH' || tag == 'POWER' || tag == 'IMPORT' || tag == 'SHIFT' || tag == 'BITWISE') {
    this.unline();
  }
  this.token(tag, val);
  return sym.length;
};
exports.token = function(tag, value, callable){
  this.tokens.push(this.last = [tag, value, this.line]);
  if (callable) {
    this.last.callable = true;
  }
  return value;
};
exports.indent = function(delta){
  this.dent += delta;
  this.dents.push(this.token('INDENT', delta));
  this.closes.push('DEDENT');
};
exports.dedent = function(debt){
  var dent;
  this.dent -= debt;
  while (debt > 0 && (dent = this.dents.pop())) {
    if (debt < dent && !this.inter) {
      this.carp("unmatched dedent (" + debt + " for " + dent + ")");
    }
    this.pair('DEDENT');
    debt -= typeof dent === 'number' ? this.token('DEDENT', dent) : dent;
  }
};
exports.newline = function(){
  var __ref;
  this.last[1] === '\n' || this.tokens.push(this.last = (__ref = ['NEWLINE', '\n', this.line], __ref.spaced = true, __ref));
};
exports.unline = function(){
  var __ref;
  if (!this.tokens[1]) {
    return;
  }
  switch (this.last[0]) {
  case 'INDENT':
    (__ref = this.dents)[__ref.length - 1] += '';
    // fallthrough
  case 'NEWLINE':
    this.tokens.length--;
  }
};
exports.parameters = function(arrow){
  var i, t, __ref, __ref1;
  if (this.last[0] === ')' && ')' === this.last[1]) {
    this.lpar[0] = 'PARAM(';
    this.last[0] = ')PARAM';
    return;
  }
  if (arrow === '->') {
    this.token('PARAM(', '');
  } else {
    for (i = (__ref = this.tokens).length - 1; i >= 0; --i) {
      t = __ref[i];
      if ((__ref1 = t[0]) == 'NEWLINE' || __ref1 == 'INDENT' || __ref1 == 'THEN' || __ref1 == '=>' || __ref1 == '(') {
        break;
      }
    }
    this.tokens.splice(i + 1, 0, ['PARAM(', '', t[2]]);
  }
  this.token(')PARAM', '');
};
exports.interpolate = function(str, idx, end){
  var parts, end0, pos, i, ch, id, stringified, delta, nested, clone, __ref;
  parts = [];
  end0 = end.charAt(0);
  pos = 0;
  i = -1;
  str = str.slice(idx + end.length);
  while (ch = str.charAt(++i)) {
    switch (ch) {
    case end0:
      if (end !== str.slice(i, i + end.length)) {
        continue;
      }
      parts.push(['S', this.countLines(str.slice(0, i)), this.line]);
      return parts.size = pos + i + end.length, parts;
    case '#':
      if (id = (ID.lastIndex = i + 1, ID).exec(str)[1]) {
        if (id === 'this' || !__in(id, KEYWORDS)) {
          break;
        }
        i += id.length;
        continue;
      }
      if ('{' !== str.charAt(i + 1)) {
        continue;
      }
      break;
    case '\\':
      ++i;
      // fallthrough
    default:
      continue;
    }
    if (i || nested && !stringified) {
      stringified = parts.push(['S', this.countLines(str.slice(0, i)), this.line]);
    }
    if (id) {
      str = str.slice(delta = i + 1 + id.length);
      parts.push(['TOKENS', nested = [['ID', id, this.line]]]);
    } else {
      clone = (__ref = __clone(exports), __ref.inter = true, __ref.emender = this.emender, __ref);
      nested = clone.tokenize(str.slice(i + 2), {
        line: this.line,
        raw: true
      });
      delta = str.length - clone.rest.length;
      str = clone.rest, this.line = clone.line;
      while (((__ref = nested[0]) != null ? __ref[0] : void 8) === 'NEWLINE') {
        nested.shift();
      }
      if (nested.length) {
        nested.unshift(['(', '(', nested[0][2]]);
        nested.push([')', ')', this.line]);
        parts.push(['TOKENS', nested]);
      }
    }
    pos += delta;
    i = -1;
  }
  this.carp("missing `" + end + "`");
};
exports.addInterpolated = function(parts, nlines){
  var tokens, last, left, right, joint, callable, i, t, __ref, __len;
  if (!parts[1]) {
    return this.strnum(nlines(string('"', parts[0][1])));
  }
  tokens = this.tokens, last = this.last;
  __ref = !last.spaced && last[1] === '%'
    ? (--tokens.length, this.last = last = tokens[tokens.length - 1], ['[', ']', [',', ',']])
    : ['(', ')', ['+-', '+']], left = __ref[0], right = __ref[1], joint = __ref[2];
  callable = this.adi();
  tokens.push([left, '"', last[2]]);
  for (i = 0, __len = parts.length; i < __len; ++i) {
    t = parts[i];
    if (t[0] === 'TOKENS') {
      tokens.push.apply(tokens, t[1]);
    } else {
      if (i > 1 && !t[1]) {
        continue;
      }
      tokens.push(['STRNUM', nlines(string('"', t[1])), t[2]]);
    }
    tokens.push((joint).concat(tokens[tokens.length - 1][2]));
  }
  --tokens.length;
  this.token(right, '', callable);
};
exports.strnum = function(it){
  this.token('STRNUM', it, this.adi() || this.last[0] === 'DOT');
};
exports.regex = function(body, flag){
  try {
    RegExp(body);
  } catch (e) {
    this.carp(e.message);
  }
  if (flag === '$') {
    return this.strnum(string('\'', enslash(body)));
  }
  return this.token('LITERAL', "/" + (body || '(?:)') + "/" + this.validate(flag));
};
exports.adi = function(){
  if (this.last.spaced) {
    return;
  }
  if (this.last[0] === '!?') {
    this.last[0] = 'CALL(';
    this.tokens.push([')CALL', '', this.line], ['?', '?', this.line]);
  }
  if (able(this.tokens)) {
    return this.token('DOT', '.');
  }
};
exports.dotcat = function(it){
  if (this.last[1] === '.' || this.adi()) {
    return this.last[1] += it;
  }
};
exports.pair = function(it){
  var wanted, __ref;
  if (!(it === (wanted = (__ref = this.closes)[__ref.length - 1]) || ')CALL' === wanted && it === ')')) {
    if ('DEDENT' !== wanted) {
      this.carp("unmatched `" + it + "`");
    }
    this.dedent((__ref = this.dents)[__ref.length - 1]);
    return this.pair(it);
  }
  this.unline();
  return this.closes.pop();
};
exports.able = function(call){
  return !this.last.spaced && able(this.tokens, null, call);
};
exports.countLines = function(it){
  var pos;
  (function(){
    var __results = [];
    while (pos = 1 + it.indexOf('\n', pos)) {
      __results.push(++this.line);
    }
    return __results;
  }.call(this));
  return it;
};
exports.forange = function(){
  var __ref;
  return ((__ref = (__ref = this.tokens)[__ref.length - 2]) != null ? __ref[0] : void 8) === 'FOR' && (this.seenFor = false, this.seenFrom = true, this);
};
exports.validate = function(flag){
  var that;
  if (that = flag && /(.).*\1/.exec(flag)) {
    this.carp("duplicate regex flag `" + that[1] + "`");
  }
  return flag;
};
exports.carp = function(it){
  carp(it, this.line);
};
function carp(msg, lno){
  throw SyntaxError(msg + " on line " + (-~lno));
}
function able(tokens, i, call){
  var token, tag;
  i == null && (i = tokens.length);
  tag = (token = tokens[i - 1])[0];
  return (tag == 'ID' || tag == ']' || tag == '?') || (call
    ? token.callable || (tag == ')' || tag == ')CALL') && token[1]
    : tag == '}' || tag == ')' || tag == ')CALL' || tag == 'STRNUM' || tag == 'LITERAL' || tag == 'WORDS');
}
string = (function(escaped, descape, qs){
  return function(q, body){
    return q + body.replace(escaped, descape).replace(qs[q], '\\$&') + q;
  };
}.call(this, /\\(?:([0-3]?[0-7]{2}|[1-7]|0(?=[89]))|[\\0bfnrtuvx]|[^\n\S]|([\w\W]))?/g, function(it, oct, rest){
  if (oct) {
    return '\\x' + (0x100 + parseInt(oct, 8)).toString(16).slice(1);
  }
  return rest || (it === '\\' ? '\\\\' : it);
}, {
  "'": /'/g,
  '"': /"/g
}));
function heretabs(doc){
  var dent, that, __ref;
  dent = 0 / 0;
  while (that = TABS.exec(doc)) {
    dent <= (__ref = that[0].length - 1) || (dent = __ref);
  }
  return dent;
}
TABS = /\n[^\n\S]*(?!$)/mg;
function detab(str, len){
  if (len) {
    return str.replace(detab[len] || (detab[len] = RegExp('\\n[^\\n\\S]{1,' + len + '}', 'g')), '\n');
  } else {
    return str;
  }
}
function replacer(re, to){
  return function(it){
    return it.replace(re, to);
  };
}
unlines = replacer(/\n[^\n\S]*/g, '');
enlines = replacer(/\n/g, '\\n');
enslash = replacer(/\\/g, '\\\\');
reslash = replacer(/(\\.)|\//g, function(){
  return arguments[1] || '\\/';
});
function lchomp(it){
  return it.slice(1 + it.lastIndexOf('\n', 0));
}
function decode(val, lno){
  if (!isNaN(val)) {
    return [+val];
  }
  val = val.length > 8
    ? 'ng'
    : Function('return' + val)();
  val.length === 1 || carp('bad string in range', lno);
  return [val.charCodeAt(), true];
}
function uxxxx(it){
  return '"\\u' + ('000' + it.toString(16)).slice(-4) + '"';
}
character = typeof JSON == 'undefined' || JSON === null
  ? uxxxx
  : function(it){
    switch (it) {
    case 0x2028:
    case 0x2029:
      return uxxxx(it);
    default:
      return JSON.stringify(String.fromCharCode(it));
    }
  };
function tagPostfixConditionals(tokens){
  var i, token, __len;
  for (i = 0, __len = tokens.length; i < __len; ++i) {
    token = tokens[i];
    if (token[0] === 'IF') {
      detectEnd(tokens, i + 1, ok, go);
    }
  }
  function ok(it){
    var __ref;
    return (__ref = it[0]) == 'NEWLINE' || __ref == 'INDENT';
  }
  function go(it){
    it[0] === 'INDENT' && (it[1] || it.then) || (token[0] = 'POST_IF');
  }
}
function addImplicitIndentation(tokens){
  var i, token, tag, next, indent, dedent, idx, seenSwitch, __ref;
  i = 0;
  while (token = tokens[++i]) {
    tag = token[0];
    if (tag != 'THEN' && tag != '->' && tag != 'ELSE' && tag != 'DEFAULT' && tag != 'TRY' && tag != 'CATCH' && tag != 'FINALLY') {
      continue;
    }
    switch (next = tokens[i + 1][0]) {
    case 'IF':
      if (tag === 'ELSE') {
        continue;
      }
      break;
    case 'INDENT':
    case 'THEN':
      if (tag === 'THEN') {
        tokens.splice(i--, 1);
      }
      continue;
    }
    indent = ['INDENT', 0, token[2]];
    dedent = ['DEDENT', 0];
    if (tag === 'THEN') {
      (tokens[i] = indent).then = true;
    } else {
      tokens.splice(++i, 0, indent);
    }
    switch (false) {
    case next != 'DOT' && next != '?' && next != ',' && next != 'PIPE' && next != 'BACKPIPE':
      --i;
      // fallthrough
    case !((next == 'ID' || next == 'STRNUM' || next == 'LITERAL') && ',' === ((__ref = tokens[i + 2]) != null ? __ref[0] : void 8)):
      go(0, i += 2);
      ++i;
      break;
    case !((next == '(' || next == '[' || next == '{') && ',' === ((__ref = tokens[idx = 1 + indexOfPair(tokens, i + 1)]) != null ? __ref[0] : void 8)):
      go(0, idx);
      ++i;
      break;
    default:
      seenSwitch = false;
      detectEnd(tokens, i + 1, ok, go);
    }
  }
  function ok(token, i){
    switch (token[0]) {
    case 'NEWLINE':
      return token[1] !== ';';
    case 'DOT':
    case '?':
    case ',':
    case 'PIPE':
    case 'BACKPIPE':
      return tokens[i - 1].eol;
    case 'ELSE':
      return tag === 'THEN';
    case 'CATCH':
      return tag === 'TRY';
    case 'FINALLY':
      return tag == 'TRY' || tag == 'CATCH' || tag == 'THEN';
    case 'SWITCH':
      return !(seenSwitch = true);
    case 'CASE':
    case 'DEFAULT':
      return !seenSwitch;
    }
  }
  function go(__arg, i){
    var prev;
    prev = tokens[i - 1];
    tokens.splice(prev[0] === ',' ? i - 1 : i, 0, (dedent[2] = prev[2], dedent));
  }
}
function addImplicitParentheses(tokens){
  var i, brackets, token, endi, tpair, tag, prev, seenSwitch, skipBlock, __ref;
  i = 0;
  brackets = [];
  while (token = tokens[++i]) {
    if (token[1] === 'do' && ((__ref = tokens[i + 1]) != null ? __ref[0] : void 8) === 'INDENT') {
      endi = indexOfPair(tokens, i + 1);
      if (tokens[endi + 1][0] === 'NEWLINE' && ((__ref = tokens[endi + 2]) != null ? __ref[0] : void 8) === 'WHILE') {
        token[0] = 'DO';
        tokens[endi + 2].done = true;
        tokens.splice(endi + 1, 1);
      } else {
        (token = tokens[1 + i])[0] = '(';
        (tpair = tokens[endi])[0] = ')';
        token.doblock = true;
        tokens.splice(i, 1);
      }
    }
    tag = token[0];
    prev = tokens[i - 1];
    if (tag === '[') {
      brackets.push(prev[0] === 'DOT');
    }
    if (prev[0] === ']') {
      if (brackets.pop()) {
        prev.index = true;
      } else {
        continue;
      }
    }
    if (!(((__ref = prev[0]) == 'FUNCTION' || __ref == 'LET') || prev.spaced && able(tokens, i, true))) {
      continue;
    }
    if (token.doblock) {
      token[0] = 'CALL(';
      tpair[0] = ')CALL';
      continue;
    }
    if (!(__in(tag, ARG) || !token.spaced && (tag == '+-' || tag == 'CLONE'))) {
      continue;
    }
    if (tag === 'CREMENT') {
      if (token.spaced || !__in((__ref = tokens[i + 1]) != null ? __ref[0] : void 8, CHAIN)) {
        continue;
      }
    }
    skipBlock = seenSwitch = false;
    tokens.splice(i++, 0, ['CALL(', '', token[2]]);
    detectEnd(tokens, i, ok, go);
  }
  function ok(token, i){
    var pre, __ref;
    if (!skipBlock && token.alias && ((__ref = token[1]) == '&&' || __ref == '||') || ((__ref = token[0]) == 'PIPE' || __ref == 'BACKPIPE')) {
      return true;
    }
    pre = tokens[i - 1];
    switch (token[0]) {
    case 'DOT':
    case '?':
      return !skipBlock && (pre.spaced || pre[0] === 'DEDENT');
    case 'SWITCH':
      seenSwitch = true;
      // fallthrough
    case 'IF':
    case 'CLASS':
    case 'FUNCTION':
    case 'LET':
    case 'WITH':
      skipBlock = true;
      break;
    case 'CASE':
      if (seenSwitch) {
        skipBlock = true;
      } else {
        return true;
      }
      break;
    case 'INDENT':
      if (skipBlock) {
        return skipBlock = false;
      }
      return (__ref = pre[0]) != '{' && __ref != '[' && __ref != ',' && __ref != '->' && __ref != ':' && __ref != 'ELSE' && __ref != 'ASSIGN' && __ref != 'IMPORT' && __ref != 'UNARY' && __ref != 'DEFAULT' && __ref != 'TRY' && __ref != 'CATCH' && __ref != 'FINALLY' && __ref != 'HURL' && __ref != 'DO';
    case 'WHILE':
      if (token.done) {
        return false;
      }
      // fallthrough
    case 'NEWLINE':
    case 'POST_IF':
    case 'FOR':
    case 'BY':
    case 'TO':
      return pre[0] !== ',';
    }
    return false;
  }
  function go(token, i){
    tokens.splice(i, 0, [')CALL', '', tokens[i - 1][2]]);
  }
}
function addImplicitBraces(tokens){
  var stack, i, token, tag, start, paren, index, pre, inline, __ref;
  stack = [];
  i = 0;
  while (token = tokens[++i]) {
    if (':' !== (tag = token[0])) {
      switch (false) {
      case !__in(tag, CLOSERS):
        start = stack.pop();
        break;
      case !__in(tag, OPENERS):
        if (tag === 'INDENT' && tokens[i - 1][0] === '{') {
          tag = '{';
        }
        stack.push([tag, i]);
      }
      continue;
    }
    paren = tokens[i - 1][0] === ')';
    index = paren
      ? start[1]
      : i - 1;
    pre = tokens[index - 1];
    if (!(((__ref = pre[0]) == ':' || __ref == 'ASSIGN' || __ref == 'IMPORT') || ((__ref = stack[stack.length - 1]) != null ? __ref[0] : void 8) !== '{')) {
      continue;
    }
    stack.push(['{']);
    inline = !pre.doblock && ((__ref = pre[0]) != 'NEWLINE' && __ref != 'INDENT');
    while (((__ref = tokens[index - 2]) != null ? __ref[0] : void 8) === 'COMMENT') {
      index -= 2;
    }
    tokens.splice(index, 0, ['{', '{', tokens[index][2]]);
    detectEnd(tokens, ++i + 1, ok, go);
  }
  function ok(token, i){
    var tag, t1, __ref;
    switch (tag = token[0]) {
    case ',':
      break;
    case 'NEWLINE':
      if (inline) {
        return true;
      }
      break;
    case 'DEDENT':
      return true;
    case 'POST_IF':
    case 'FOR':
    case 'WHILE':
      return inline;
    default:
      return false;
    }
    t1 = (__ref = tokens[i + 1]) != null ? __ref[0] : void 8;
    return t1 !== (tag === ',' ? 'NEWLINE' : 'COMMENT') && ':' !== ((__ref = tokens[t1 === '('
      ? 1 + indexOfPair(tokens, i + 1)
      : i + 2]) != null ? __ref[0] : void 8);
  }
  function go(token, i){
    tokens.splice(i, 0, ['}', '', token[2]]);
  }
}
function expandLiterals(tokens){
  var i, token, sig, lno, fromNum, char, toNum, tochar, byNum, ts, n, word, that, __ref, __step, __i, __len;
  i = 0;
  while (token = tokens[++i]) {
    switch (token[0]) {
    case 'STRNUM':
      if (~'-+'.indexOf(sig = token[1].charAt(0))) {
        token[1] = token[1].slice(1);
        tokens.splice(i++, 0, ['+-', sig, token[2]]);
      }
      if (token.callable) {
        continue;
      }
      break;
    case 'RANGE':
      lno = token[2];
      if (tokens[i - 1][0] === '[' && tokens[i + 1][0] === 'STRNUM' && (tokens[i + 2][0] === ']' || (tokens[i + 2][0] === 'RANGE_BY' && ((__ref = tokens[i + 3]) != null ? __ref[0] : void 8) === 'STRNUM' && ((__ref = tokens[i + 4]) != null ? __ref[0] : void 8) === ']'))) {
        __ref = decode(token[1], lno), fromNum = __ref[0], char = __ref[1];
        __ref = decode(tokens[i + 1][1], lno), toNum = __ref[0], tochar = __ref[1];
        if (char ^ tochar) {
          carp('bad "to" in range');
        }
        if (byNum = ((__ref = tokens[i + 2]) != null ? __ref[0] : void 8) === 'RANGE_BY') {
          if (isNaN(byNum = (__ref = tokens[i + 3]) != null ? __ref[1] : void 8)) {
            carp('bad "by" in range');
          }
        }
        ts = [];
        toNum -= token.op === 'til' && 1e-15;
        for (n = fromNum, __step = +byNum || 1; __step < 0 ? n >= toNum : n <= toNum; n += __step) {
          if (0x10000 < ts.push([
            'STRNUM', char
              ? character(n)
              : n + "", lno
          ], [',', ',', lno])) {
            carp('range limit exceeded', lno);
          }
        }
        ts.pop() || carp('empty range', lno);
        tokens.splice.apply(tokens, [i, byNum ? 4 : 2].concat(__slice.call(ts)));
        i += ts.length - 1;
      } else {
        token[0] = 'STRNUM';
        if (((__ref = tokens[i + 2]) != null ? __ref[0] : void 8) === 'RANGE_BY') {
          tokens.splice(i + 2, 1, ['BY', 'by', lno]);
        }
        tokens.splice(i + 1, 0, ['TO', token.op, lno]);
      }
      break;
    case 'WORDS':
      ts = [['[', '[', lno = token[2]]];
      for (__i = 0, __len = (__ref = token[1].match(/\S+/g) || '').length; __i < __len; ++__i) {
        word = __ref[__i];
        ts.push(['STRNUM', string('\'', word), lno], [',', ',', lno]);
      }
      tokens.splice.apply(tokens, [i, 1].concat(__slice.call(ts), [[']', ']', lno]]));
      i += ts.length;
      break;
    case 'INDENT':
      if (that = tokens[i - 1]) {
        if (that[1] === 'new') {
          tokens.splice(i++, 0, ['PARAM(', '', token[2]], [')PARAM', '', token[2]], ['->', '', token[2]]);
        } else if ((__ref = that[0]) == 'FUNCTION' || __ref == 'LET') {
          tokens.splice(i, 0, ['CALL(', '', token[2]], [')CALL', '', token[2]]);
          i += 2;
        }
      }
      continue;
    case 'LITERAL':
    case '}':
    case '!?':
      break;
    case ')':
    case ')CALL':
      if (token[1]) {
        continue;
      }
      break;
    case ']':
      if (token.index) {
        continue;
      }
      break;
    case 'CREMENT':
      if (!able(tokens, i)) {
        continue;
      }
      break;
    case 'BIOP':
      if (!token.spaced && ((__ref = token[1]) == '+' || __ref == '-') && tokens[i + 1][0] !== ')') {
        tokens[i][0] = '+-';
      }
      continue;
    default:
      continue;
    }
    if (token.spaced && __in(tokens[i + 1][0], ARG)) {
      tokens.splice(++i, 0, [',', ',', token[2]]);
    }
  }
}
function detectEnd(tokens, i, ok, go){
  var levels, token, tag;
  levels = 0;
  for (; token = tokens[i]; ++i) {
    if (!levels && ok(token, i)) {
      return go(token, i);
    }
    tag = token[0];
    if (0 > (levels += __in(tag, OPENERS) || -__in(tag, CLOSERS))) {
      return go(token, i);
    }
  }
}
function indexOfPair(tokens, i){
  var level, start, end, that;
  level = 1;
  end = INVERSES[start = tokens[i][0]];
  while (that = tokens[++i]) {
    switch (that[0]) {
    case start:
      ++level;
      break;
    case end:
      if (!--level) {
        return i;
      }
    }
  }
  return -1;
}
KEYWORDS_SHARED = ['true', 'false', 'null', 'this', 'void', 'super', 'return', 'throw', 'break', 'continue', 'if', 'else', 'for', 'while', 'switch', 'case', 'default', 'try', 'catch', 'finally', 'class', 'extends', 'new', 'do', 'delete', 'typeof', 'in', 'instanceof', 'import', 'function', 'let', 'with', 'debugger', 'export'];
KEYWORDS_UNUSED = ['var', 'const', 'enum', 'implements', 'interface', 'package', 'private', 'protected', 'public', 'static', 'yield'];
KEYWORDS = (KEYWORDS_SHARED).concat(KEYWORDS_UNUSED);
ID = (function(){
  var start, part;
  start = '$_A-Za-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uFF21-\\uFF3A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u2094\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3D\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8B\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF';
  part = '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065E\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0900-\\u0902\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0955\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F90-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFD-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC\\x5F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F\\u200c\\u200d';
  return RegExp('([' + start + '][' + start + part + ']*)([^\\n\\S]*:(?![:=]))?|', 'g');
}.call(this));
SYMBOL = /[-+*\/^]=|%%?=|::?=|\.{1,3}|&&&|\|\|\||\^\^\^|\^\^|\+\+\+|-->|~~>|([-+&|:])\1|%%|&|\([^\n\S]*\)|[-~]>|<[-~]|[!=]==?|@@|<\[(?:[\s\S]*?\]>)?|<<<<<|>>>>>?|<<<<?|<\||<<|>>|[<>]\??=?|!\?|\|>>?|\||=>|\*\*=?|\^|`|[^\s#]?/g;
SPACE = /(?=.)[^\n\S]*(?:#.*)?|/g;
MULTIDENT = /(?:\s*#.*)*(?:\n([^\n\S]*))+/g;
SIMPLESTR = /'[^\\']*(?:\\[\s\S][^\\']*)*'|/g;
BSTOKEN = /\\(?:(\S[^\s,;)}\]]*)|\s*)/g;
NUMBER = /0x[\dA-Fa-f][\dA-Fa-f_]*|(\d*)~([\dA-Za-z]\w*)|((\d[\d_]*)(\.\d[\d_]*)?(?:e[+-]?\d[\d_]*)?)[$\w]*|/g;
NUMBER_OMIT = /_+/g;
REGEX = /\/([^[\/\n\\]*(?:(?:\\.|\[[^\]\n\\]*(?:\\.[^\]\n\\]*)*\])[^[\/\n\\]*)*)\/([gimy]{1,4}|\$?)|/g;
HEREGEX_OMIT = /\s+(?:#.*)?/g;
LASTDENT = /\n[^\n\S]*$/;
INLINEDENT = /[^\n\S]*[^#\s]?/g;
OPENERS = ['(', '[', '{', 'CALL(', 'PARAM(', 'INDENT'];
CLOSERS = [')', ']', '}', ')CALL', ')PARAM', 'DEDENT'];
INVERSES = new function(){
  var i, o, c, __ref, __len;
  for (i = 0, __len = (__ref = OPENERS).length; i < __len; ++i) {
    o = __ref[i];
    this[c = CLOSERS[i]] = o;
    this[o] = c;
  }
};
CHAIN = ['(', '{', '[', 'ID', 'STRNUM', 'LITERAL', 'LET', 'WITH', 'WORDS'];
ARG = (CHAIN).concat(['...', 'UNARY', 'CREMENT', 'PARAM(', 'FUNCTION', 'IF', 'SWITCH', 'TRY', 'CLASS', 'RANGE', 'LABEL', 'DO']);
function __clone(it){
  function fun(){} fun.prototype = it;
  return new fun;
}
function __in(x, arr){
  var i = 0, l = arr.length >>> 0;
  while (i < l) if (x === arr[i++]) return true;
  return false;
}

/***/ },
/* 4 */
/***/ function(module, exports) {

exports.parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Chain":3,"ID":4,"Parenthetical":5,"List":6,"STRNUM":7,"LITERAL":8,"DOT":9,"Key":10,"CALL(":11,"ArgList":12,"OptComma":13,")CALL":14,"?":15,"LET":16,"Block":17,"WITH":18,"Expression":19,"[":20,"LoopHeads":21,"]":22,"(":23,"BIOP":24,")":25,"UNARY":26,"CREMENT":27,"{":28,"Properties":29,"}":30,"LABEL":31,"KeyBase":32,"Arg":33,",":34,"NEWLINE":35,"INDENT":36,"DEDENT":37,"...":38,"Lines":39,"Line":40,"PARAM(":41,")PARAM":42,"<-":43,"EXPORT":44,"Exprs":45,"COMMENT":46,"BACKTICK":47,"ASSIGN":48,"IMPORT":49,"+-":50,"CLONE":51,"COMPARE":52,"LOGIC":53,"MATH":54,"POWER":55,"SHIFT":56,"BITWISE":57,"CONCAT":58,"COMPOSE":59,"RELATION":60,"PIPE":61,"BACKPIPE":62,"!?":63,"->":64,"FUNCTION":65,"IfBlock":66,"ELSE":67,"POST_IF":68,"LoopHead":69,"DO":70,"WHILE":71,"HURL":72,"JUMP":73,"SWITCH":74,"Cases":75,"DEFAULT":76,"TRY":77,"CATCH":78,"FINALLY":79,"CLASS":80,"EXTENDS":81,"TO":82,"BY":83,"KeyValue":84,"Property":85,":":86,"Body":87,"IF":88,"FOR":89,"IN":90,"CASE":91,"OF":92,"OWN":93,"FROM":94,"Root":95,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ID",7:"STRNUM",8:"LITERAL",9:"DOT",11:"CALL(",14:")CALL",15:"?",16:"LET",18:"WITH",20:"[",22:"]",23:"(",24:"BIOP",25:")",26:"UNARY",27:"CREMENT",28:"{",30:"}",31:"LABEL",34:",",35:"NEWLINE",36:"INDENT",37:"DEDENT",38:"...",41:"PARAM(",42:")PARAM",43:"<-",44:"EXPORT",46:"COMMENT",47:"BACKTICK",48:"ASSIGN",49:"IMPORT",50:"+-",51:"CLONE",52:"COMPARE",53:"LOGIC",54:"MATH",55:"POWER",56:"SHIFT",57:"BITWISE",58:"CONCAT",59:"COMPOSE",60:"RELATION",61:"PIPE",62:"BACKPIPE",63:"!?",64:"->",65:"FUNCTION",67:"ELSE",68:"POST_IF",70:"DO",71:"WHILE",72:"HURL",73:"JUMP",74:"SWITCH",76:"DEFAULT",77:"TRY",78:"CATCH",79:"FINALLY",80:"CLASS",81:"EXTENDS",82:"TO",83:"BY",86:":",88:"IF",89:"FOR",90:"IN",91:"CASE",92:"OF",93:"OWN",94:"FROM"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[3,1],[3,3],[3,3],[3,5],[3,2],[3,6],[3,3],[3,4],[3,3],[3,4],[3,4],[3,3],[3,3],[6,4],[6,4],[6,5],[6,5],[10,1],[10,1],[32,1],[32,1],[12,0],[12,1],[12,3],[12,4],[12,6],[33,1],[33,2],[33,1],[13,0],[13,1],[39,0],[39,1],[39,3],[39,2],[40,1],[40,6],[40,2],[40,5],[40,1],[40,1],[17,3],[19,5],[19,1],[19,3],[19,6],[19,3],[19,6],[19,2],[19,2],[19,3],[19,3],[19,3],[19,2],[19,2],[19,2],[19,5],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,6],[19,6],[19,1],[19,3],[19,3],[19,2],[19,4],[19,4],[19,2],[19,5],[19,1],[19,1],[19,2],[19,3],[19,5],[19,5],[19,2],[19,4],[19,4],[19,2],[19,2],[19,4],[19,6],[19,4],[19,2],[19,4],[19,3],[19,5],[19,3],[19,2],[19,2],[19,5],[19,7],[84,1],[84,1],[84,3],[84,3],[84,5],[84,5],[85,3],[85,6],[85,1],[85,3],[85,2],[85,2],[85,2],[85,1],[29,0],[29,1],[29,3],[29,4],[29,4],[5,3],[87,1],[87,1],[87,3],[66,3],[66,5],[69,4],[69,6],[69,6],[69,8],[69,4],[69,6],[69,6],[69,8],[69,5],[69,7],[69,7],[69,9],[69,6],[69,8],[69,8],[69,10],[69,10],[69,2],[69,4],[69,4],[69,6],[21,1],[21,2],[75,3],[75,4],[45,1],[45,3],[95,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:this.$ = yy.Chain(yy.L(yylineno, yy.Var($$[$0])));
break;
case 2:
case 3:this.$ = yy.Chain($$[$0]);
break;
case 4:
case 5:this.$ = yy.Chain(yy.L(yylineno, yy.Literal($$[$0])));
break;
case 6:
case 7:this.$ = $$[$0-2].add(yy.Index($$[$0], $$[$0-1], true));
break;
case 8:this.$ = $$[$0-4].add(yy.Call($$[$0-2]));
break;
case 9:this.$ = yy.Chain(yy.Existence($$[$0-1].unwrap()));
break;
case 10:this.$ = yy.Chain(yy.Call['let']($$[$0-3], $$[$0]));
break;
case 11:this.$ = yy.Chain(yy.Call.block(yy.Fun([], $$[$0]), [$$[$0-1]], '.call'));
break;
case 12:this.$ = yy.Chain(new yy.Parens($$[$0-1][0].makeComprehension($$[$0-2], $$[$0-1].slice(1))));
break;
case 13:this.$ = yy.Chain(yy.Binary($$[$0-1]));
break;
case 14:this.$ = yy.Chain(yy.Binary($$[$0-2], void 8, $$[$0-1]));
break;
case 15:this.$ = yy.Chain(yy.Binary($$[$0-1], $$[$0-2]));
break;
case 16:
case 17:this.$ = yy.Chain(yy.Unary($$[$0-1]));
break;
case 18:this.$ = yy.L(yylineno, yy.Arr($$[$0-2]));
break;
case 19:this.$ = yy.L(yylineno, yy.Obj($$[$0-2]));
break;
case 20:this.$ = yy.L(yylineno, yy.Arr($$[$0-3])).named($$[$0]);
break;
case 21:this.$ = yy.L(yylineno, yy.Obj($$[$0-3])).named($$[$0]);
break;
case 24:this.$ = yy.L(yylineno, yy.Key($$[$0]));
break;
case 25:this.$ = yy.L(yylineno, yy.Literal($$[$0]));
break;
case 26:this.$ = [];
break;
case 27:this.$ = [$$[$0]];
break;
case 28:this.$ = ($$[$0-2]).concat($$[$0]);
break;
case 29:this.$ = ($$[$0-3]).concat($$[$0]);
break;
case 30:this.$ = ($$[$0-5]).concat($$[$0-2]);
break;
case 32:this.$ = yy.Splat($$[$0]);
break;
case 33:this.$ = yy.Splat(yy.L(yylineno, yy.Arr()), true);
break;
case 36:this.$ = yy.Block();
break;
case 37:this.$ = yy.Block($$[$0]);
break;
case 38:this.$ = $$[$0-2].add($$[$0]);
break;
case 41:this.$ = yy.Call.back($$[$0-4], $$[$0], $$[$0-1] === '<~');
break;
case 42:this.$ = yy.Export($$[$0]);
break;
case 43:this.$ = yy.Export($$[$0-2]);
break;
case 44:this.$ = yy.L(yylineno, yy.JS($$[$0], true, true));
break;
case 45:this.$ = yy.L(yylineno, yy.Throw(yy.JS("Error('unimplemented')")));
break;
case 46:this.$ = $$[$0-1].chomp();
break;
case 47:this.$ = $$[$0-2].add(yy.Call([$$[$0-4], $$[$0]]));
break;
case 48:this.$ = $$[$0].unwrap();
break;
case 49:this.$ = yy.Assign($$[$0-2].unwrap(), $$[$0], $$[$0-1]);
break;
case 50:this.$ = yy.Assign($$[$0-5].unwrap(), yy.Arr.maybe($$[$0-2]), $$[$0-4]);
break;
case 51:this.$ = yy.Import($$[$0-2], $$[$0], $$[$0-1] === '<<<<');
break;
case 52:this.$ = yy.Import($$[$0-5], yy.Arr.maybe($$[$0-2]), $$[$0-4] === '<<<<');
break;
case 53:this.$ = yy.Unary($$[$0-1], $$[$0].unwrap());
break;
case 54:this.$ = yy.Unary($$[$0], $$[$0-1].unwrap(), true);
break;
case 55:
case 56:
case 57:this.$ = yy.Assign($$[$0].unwrap(), [$$[$0-2]], $$[$0-1]);
break;
case 58:
case 59:
case 60:this.$ = yy.Unary($$[$0-1], $$[$0]);
break;
case 61:this.$ = yy.Unary($$[$0-4], yy.Arr.maybe($$[$0-2]));
break;
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:this.$ = yy.Binary($$[$0-1], $$[$0-2], $$[$0]);
break;
case 71:this.$ = '!' === $$[$0-1].charAt(0)
        ? yy.Binary($$[$0-1].slice(1), $$[$0-2], $$[$0]).invert()
        : yy.Binary($$[$0-1], $$[$0-2], $$[$0]);
break;
case 72:
case 73:this.$ = yy.Block($$[$0-2]).pipe($$[$0], $$[$0-1]);
break;
case 74:this.$ = yy.Existence($$[$0-1].unwrap(), true);
break;
case 75:this.$ = yy.L(yylineno, yy.Fun($$[$0-4], $$[$0], $$[$0-1].charAt(0) === '~', $$[$0-1] == '-->' || $$[$0-1] == '~~>'));
break;
case 76:this.$ = yy.L(yylineno, yy.Fun($$[$0-3], $$[$0]).named($$[$0-5]));
break;
case 78:this.$ = $$[$0-2].addElse($$[$0]);
break;
case 79:this.$ = yy.If($$[$0], $$[$0-2], $$[$0-1] === 'unless');
break;
case 80:this.$ = $$[$0-1].addBody($$[$0]);
break;
case 81:this.$ = $$[$0-3].addBody($$[$0-2]).addElse($$[$0]);
break;
case 82:this.$ = new yy.While($$[$0], $$[$0-1] === 'until', true).addBody($$[$0-2]);
break;
case 83:this.$ = yy.Jump[$$[$0-1]]($$[$0]);
break;
case 84:this.$ = yy.Jump[$$[$0-4]](yy.Arr.maybe($$[$0-2]));
break;
case 85:this.$ = yy.L(yylineno, yy.Jump[$$[$0]]());
break;
case 86:this.$ = yy.L(yylineno, new yy.Jump($$[$0]));
break;
case 87:this.$ = yy.L(yylineno, new yy.Jump($$[$0-1], $$[$0]));
break;
case 88:this.$ = new yy.Switch($$[$0-1], $$[$0]);
break;
case 89:
case 90:this.$ = new yy.Switch($$[$0-3], $$[$0-2], $$[$0]);
break;
case 91:this.$ = new yy.Switch(null, $$[$0]);
break;
case 92:
case 93:this.$ = new yy.Switch(null, $$[$0-2], $$[$0]);
break;
case 94:this.$ = new yy.Switch(null, [], $$[$0]);
break;
case 95:this.$ = new yy.Try($$[$0]);
break;
case 96:this.$ = new yy.Try($$[$0-2], $$[$0-1], $$[$0]);
break;
case 97:this.$ = new yy.Try($$[$0-4], $$[$0-3], $$[$0-2], $$[$0]);
break;
case 98:this.$ = new yy.Try($$[$0-2], null, null, $$[$0]);
break;
case 99:this.$ = new yy.Class(null, null, $$[$0]);
break;
case 100:this.$ = new yy.Class(null, $$[$0-1], $$[$0]);
break;
case 101:this.$ = new yy.Class($$[$0-1].unwrap(), null, $$[$0]);
break;
case 102:this.$ = new yy.Class($$[$0-3].unwrap(), $$[$0-1], $$[$0]);
break;
case 103:this.$ = yy.Util.Extends($$[$0-2].unwrap(), $$[$0]);
break;
case 104:
case 105:this.$ = new yy.Label($$[$0-1], $$[$0]);
break;
case 106:this.$ = new yy.Parens(new yy.For({
        from: $$[$0-3],
        op: $$[$0-2],
        to: $$[$0-1]
      }));
break;
case 107:this.$ = new yy.Parens(new yy.For({
        from: $$[$0-5],
        op: $$[$0-4],
        to: $$[$0-3],
        step: $$[$0-1]
      }));
break;
case 109:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0], $$[$0] != 'arguments' && $$[$0] != 'eval')), yy.L(yylineno, yy.Literal($$[$0])));
break;
case 110:this.$ = yy.Prop($$[$0], yy.Chain($$[$0-2], [yy.Index($$[$0], $$[$0-1])]));
break;
case 111:this.$ = yy.Prop($$[$0], yy.Chain(yy.L(yylineno, yy.Literal($$[$0-2])), [yy.Index($$[$0], $$[$0-1])]));
break;
case 112:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0])), yy.L(yylineno, yy.Obj($$[$0-3]).named($$[$0])));
break;
case 113:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0])), yy.L(yylineno, yy.Arr($$[$0-3]).named($$[$0])));
break;
case 114:this.$ = yy.Prop($$[$0-2], $$[$0]);
break;
case 115:this.$ = yy.Prop($$[$0-5], yy.Arr.maybe($$[$0-2]));
break;
case 117:this.$ = yy.Binary($$[$0-1], $$[$0-2], $$[$0]);
break;
case 118:this.$ = yy.Prop($$[$0].maybeKey(), yy.L(yylineno, yy.Literal($$[$0-1] === '+')));
break;
case 119:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0], true)), yy.L(yylineno, yy.Literal($$[$0-1] === '+')));
break;
case 120:this.$ = yy.Splat($$[$0]);
break;
case 121:this.$ = yy.L(yylineno, yy.JS($$[$0], true, true));
break;
case 122:this.$ = [];
break;
case 123:this.$ = [$$[$0]];
break;
case 124:this.$ = ($$[$0-2]).concat($$[$0]);
break;
case 125:this.$ = ($$[$0-3]).concat($$[$0]);
break;
case 126:this.$ = $$[$0-2];
break;
case 127:this.$ = yy.Parens($$[$0-1].chomp().unwrap(), false, $$[$0-2] === '"');
break;
case 130:this.$ = $$[$0-2].add($$[$0]);
break;
case 131:this.$ = yy.If($$[$0-1], $$[$0], $$[$0-2] === 'unless');
break;
case 132:this.$ = $$[$0-4].addElse(yy.If($$[$0-1], $$[$0], $$[$0-2] === 'unless'));
break;
case 133:this.$ = new yy.For({
        item: $$[$0-2].unwrap(),
        index: $$[$0-1],
        source: $$[$0]
      });
break;
case 134:this.$ = new yy.For({
        item: $$[$0-4].unwrap(),
        index: $$[$0-3],
        source: $$[$0-2],
        guard: $$[$0]
      });
break;
case 135:this.$ = new yy.For({
        item: $$[$0-4].unwrap(),
        index: $$[$0-3],
        source: $$[$0-2],
        step: $$[$0]
      });
break;
case 136:this.$ = new yy.For({
        item: $$[$0-6].unwrap(),
        index: $$[$0-5],
        source: $$[$0-4],
        step: $$[$0-2],
        guard: $$[$0]
      });
break;
case 137:this.$ = new yy.For({
        object: true,
        index: $$[$0-2],
        source: $$[$0]
      });
break;
case 138:this.$ = new yy.For({
        object: true,
        index: $$[$0-4],
        source: $$[$0-2],
        guard: $$[$0]
      });
break;
case 139:this.$ = new yy.For({
        object: true,
        index: $$[$0-4],
        item: $$[$0-2].unwrap(),
        source: $$[$0]
      });
break;
case 140:this.$ = new yy.For({
        object: true,
        index: $$[$0-6],
        item: $$[$0-4].unwrap(),
        source: $$[$0-2],
        guard: $$[$0]
      });
break;
case 141:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-2],
        source: $$[$0]
      });
break;
case 142:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-4],
        source: $$[$0-2],
        guard: $$[$01]
      });
break;
case 143:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-4],
        item: $$[$0-2].unwrap(),
        source: $$[$0]
      });
break;
case 144:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-6],
        item: $$[$0-4].unwrap(),
        source: $$[$0-2],
        guard: $$[$0-1]
      });
break;
case 145:this.$ = new yy.For({
        index: $$[$0-4],
        from: $$[$0-2],
        op: $$[$0-1],
        to: $$[$0]
      });
break;
case 146:this.$ = new yy.For({
        index: $$[$0-6],
        from: $$[$0-4],
        op: $$[$0-3],
        to: $$[$0-2],
        guard: $$[$0]
      });
break;
case 147:this.$ = new yy.For({
        index: $$[$0-6],
        from: $$[$0-4],
        op: $$[$0-3],
        to: $$[$0-2],
        step: $$[$0]
      });
break;
case 148:this.$ = new yy.For({
        index: $$[$0-8],
        from: $$[$0-6],
        op: $$[$0-5],
        to: $$[$0-4],
        step: $$[$0-2],
        guard: $$[$0]
      });
break;
case 149:this.$ = new yy.For({
        index: $$[$0-8],
        from: $$[$0-6],
        op: $$[$0-5],
        to: $$[$0-4],
        guard: $$[$0-2],
        step: $$[$0]
      });
break;
case 150:this.$ = new yy.While($$[$0], $$[$0-1] === 'until');
break;
case 151:this.$ = new yy.While($$[$0-2], $$[$0-3] === 'until').addGuard($$[$0]);
break;
case 152:this.$ = new yy.While($$[$0-2], $$[$0-3] === 'until', $$[$0]);
break;
case 153:this.$ = new yy.While($$[$0-4], $$[$0-5] === 'until', $$[$0-2]).addGuard($$[$0]);
break;
case 154:this.$ = [$$[$0]];
break;
case 155:this.$ = ($$[$0-1]).concat($$[$0]);
break;
case 156:this.$ = [new yy.Case($$[$0-1], $$[$0])];
break;
case 157:this.$ = ($$[$0-3]).concat(new yy.Case($$[$0-1], $$[$0]));
break;
case 158:this.$ = [$$[$0]];
break;
case 159:this.$ = ($$[$0-2]).concat($$[$0]);
break;
case 160:return this.$
}
},
table: [{1:[2,36],3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:4,18:[1,34],19:7,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],35:[2,36],36:[1,6],38:[1,11],39:3,40:5,41:[1,8],44:[1,9],46:[1,10],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],87:2,88:[1,36],89:[1,37],95:1},{1:[3]},{1:[2,160]},{1:[2,128],25:[2,128],35:[1,40]},{1:[2,129],25:[2,129],35:[1,41]},{1:[2,37],25:[2,37],35:[2,37],37:[2,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:7,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],35:[2,36],37:[2,36],38:[1,11],39:42,40:5,41:[1,8],44:[1,9],46:[1,10],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,40],25:[2,40],35:[2,40],37:[2,40],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:58,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],38:[1,61],41:[1,62],42:[2,26],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:65,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],36:[1,64],41:[1,62],45:63,50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,44],25:[2,44],35:[2,44],37:[2,44]},{1:[2,45],25:[2,45],35:[2,45],37:[2,45]},{1:[2,48],9:[1,70],11:[1,71],14:[2,48],15:[1,72],22:[2,48],24:[2,48],25:[2,48],27:[1,67],30:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],42:[2,48],47:[2,48],48:[1,66],49:[2,48],50:[2,48],52:[2,48],53:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[1,68],68:[2,48],71:[2,48],81:[1,69],82:[2,48],83:[2,48],89:[2,48],91:[2,48]},{3:73,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,74],23:[1,35],28:[1,39]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:76,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],36:[1,77],41:[1,62],48:[1,75],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:79,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],48:[1,78],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:81,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],48:[1,80],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{11:[1,82]},{1:[2,77],14:[2,77],22:[2,77],24:[2,77],25:[2,77],30:[2,77],34:[2,77],35:[2,77],36:[2,77],37:[2,77],42:[2,77],47:[2,77],49:[2,77],50:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],56:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],67:[1,83],68:[2,77],71:[2,77],82:[2,77],83:[2,77],89:[2,77],91:[2,77]},{17:84,36:[1,6]},{17:85,36:[1,6]},{1:[2,85],3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],14:[2,85],16:[1,33],18:[1,34],19:86,20:[1,27],22:[2,85],23:[1,35],24:[2,85],25:[2,85],26:[1,14],27:[1,13],28:[1,39],30:[2,85],31:[1,26],34:[2,85],35:[2,85],36:[1,87],37:[2,85],41:[1,62],42:[2,85],47:[2,85],49:[2,85],50:[1,15],51:[1,16],52:[2,85],53:[2,85],54:[2,85],55:[2,85],56:[2,85],57:[2,85],58:[2,85],59:[2,85],60:[2,85],61:[2,85],62:[2,85],65:[1,17],66:18,68:[2,85],69:19,70:[1,20],71:[2,85],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],82:[2,85],83:[2,85],88:[1,36],89:[2,85],91:[2,85]},{1:[2,86],4:[1,88],14:[2,86],22:[2,86],24:[2,86],25:[2,86],30:[2,86],34:[2,86],35:[2,86],36:[2,86],37:[2,86],42:[2,86],47:[2,86],49:[2,86],50:[2,86],52:[2,86],53:[2,86],54:[2,86],55:[2,86],56:[2,86],57:[2,86],58:[2,86],59:[2,86],60:[2,86],61:[2,86],62:[2,86],68:[2,86],71:[2,86],82:[2,86],83:[2,86],89:[2,86],91:[2,86]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:91,18:[1,34],19:89,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],36:[1,6],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],75:90,77:[1,24],80:[1,25],88:[1,36],89:[1,37],91:[1,92]},{17:93,36:[1,6]},{3:96,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:94,18:[1,34],20:[1,74],23:[1,35],28:[1,39],36:[1,6],81:[1,95]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:98,18:[1,34],19:97,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],36:[1,6],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:100,16:[1,33],18:[1,34],19:99,20:[1,27],22:[2,26],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,1],9:[2,1],11:[2,1],14:[2,1],15:[2,1],22:[2,1],24:[2,1],25:[2,1],27:[2,1],30:[2,1],34:[2,1],35:[2,1],36:[2,1],37:[2,1],42:[2,1],47:[2,1],48:[2,1],49:[2,1],50:[2,1],52:[2,1],53:[2,1],54:[2,1],55:[2,1],56:[2,1],57:[2,1],58:[2,1],59:[2,1],60:[2,1],61:[2,1],62:[2,1],63:[2,1],68:[2,1],71:[2,1],81:[2,1],82:[2,1],83:[2,1],89:[2,1],91:[2,1],92:[2,1]},{1:[2,2],9:[2,2],11:[2,2],14:[2,2],15:[2,2],22:[2,2],24:[2,2],25:[2,2],27:[2,2],30:[2,2],34:[2,2],35:[2,2],36:[2,2],37:[2,2],42:[2,2],47:[2,2],48:[2,2],49:[2,2],50:[2,2],52:[2,2],53:[2,2],54:[2,2],55:[2,2],56:[2,2],57:[2,2],58:[2,2],59:[2,2],60:[2,2],61:[2,2],62:[2,2],63:[2,2],68:[2,2],71:[2,2],81:[2,2],82:[2,2],83:[2,2],89:[2,2],90:[2,2],91:[2,2],92:[2,2]},{1:[2,3],9:[2,3],11:[2,3],14:[2,3],15:[2,3],22:[2,3],24:[2,3],25:[2,3],27:[2,3],30:[2,3],34:[2,3],35:[2,3],36:[2,3],37:[2,3],42:[2,3],47:[2,3],48:[2,3],49:[2,3],50:[2,3],52:[2,3],53:[2,3],54:[2,3],55:[2,3],56:[2,3],57:[2,3],58:[2,3],59:[2,3],60:[2,3],61:[2,3],62:[2,3],63:[2,3],68:[2,3],71:[2,3],81:[2,3],82:[2,3],83:[2,3],89:[2,3],90:[2,3],91:[2,3],92:[2,3]},{1:[2,4],9:[2,4],11:[2,4],14:[2,4],15:[2,4],22:[2,4],24:[2,4],25:[2,4],27:[2,4],30:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4],42:[2,4],47:[2,4],48:[2,4],49:[2,4],50:[2,4],52:[2,4],53:[2,4],54:[2,4],55:[2,4],56:[2,4],57:[2,4],58:[2,4],59:[2,4],60:[2,4],61:[2,4],62:[2,4],63:[2,4],68:[2,4],71:[2,4],81:[2,4],82:[2,4],83:[2,4],89:[2,4],90:[2,4],91:[2,4],92:[2,4]},{1:[2,5],9:[2,5],11:[2,5],14:[2,5],15:[2,5],22:[2,5],24:[2,5],25:[2,5],27:[2,5],30:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5],42:[2,5],47:[2,5],48:[2,5],49:[2,5],50:[2,5],52:[2,5],53:[2,5],54:[2,5],55:[2,5],56:[2,5],57:[2,5],58:[2,5],59:[2,5],60:[2,5],61:[2,5],62:[2,5],63:[2,5],68:[2,5],71:[2,5],81:[2,5],82:[2,5],83:[2,5],89:[2,5],90:[2,5],91:[2,5],92:[2,5]},{11:[1,101]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:102,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:4,18:[1,34],19:104,20:[1,27],23:[1,35],24:[1,103],25:[2,36],26:[1,105],27:[1,106],28:[1,39],31:[1,26],35:[2,36],36:[1,6],38:[1,11],39:3,40:5,41:[1,8],44:[1,9],46:[1,10],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],87:107,88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:108,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:109,4:[1,110],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,74],23:[1,35],28:[1,39],93:[1,111]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:112,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{4:[1,126],5:122,7:[1,127],8:[1,123],10:116,20:[1,125],23:[1,128],28:[1,124],29:113,30:[2,122],32:121,34:[2,122],35:[2,122],36:[1,115],38:[1,119],46:[1,120],50:[1,118],84:117,85:114},{1:[2,39],3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:7,20:[1,27],23:[1,35],25:[2,39],26:[1,14],27:[1,13],28:[1,39],31:[1,26],35:[2,39],37:[2,39],38:[1,11],40:129,41:[1,8],44:[1,9],46:[1,10],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,36],3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:7,20:[1,27],23:[1,35],25:[2,36],26:[1,14],27:[1,13],28:[1,39],31:[1,26],35:[2,36],38:[1,11],39:130,40:5,41:[1,8],44:[1,9],46:[1,10],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{35:[1,40],37:[1,131]},{3:132,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,74],23:[1,35],28:[1,39]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:133,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],36:[1,134],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:135,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:136,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:137,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:138,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:139,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:140,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:141,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:142,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:143,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:144,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:145,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:146,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:147,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{13:148,34:[1,149],35:[2,34],36:[2,34],42:[2,34]},{14:[2,27],22:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[2,27],42:[2,27]},{14:[2,31],22:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[2,31],42:[2,31],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],14:[2,33],16:[1,33],18:[1,34],19:150,20:[1,27],22:[2,33],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],34:[2,33],35:[2,33],36:[2,33],37:[2,33],41:[1,62],42:[2,33],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:151,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],38:[1,61],41:[1,62],42:[2,26],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,42],25:[2,42],34:[1,152],35:[2,42],37:[2,42]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:153,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,158],25:[2,158],34:[2,158],35:[2,158],36:[2,158],37:[2,158],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:154,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],36:[1,155],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,54],14:[2,54],22:[2,54],24:[2,54],25:[2,54],30:[2,54],34:[2,54],35:[2,54],36:[2,54],37:[2,54],42:[2,54],47:[2,54],49:[2,54],50:[2,54],52:[2,54],53:[2,54],54:[2,54],55:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],68:[2,54],71:[2,54],82:[2,54],83:[2,54],89:[2,54],91:[2,54]},{1:[2,74],14:[2,74],22:[2,74],24:[2,74],25:[2,74],30:[2,74],34:[2,74],35:[2,74],36:[2,74],37:[2,74],42:[2,74],47:[2,74],49:[2,74],50:[2,74],52:[2,74],53:[2,74],54:[2,74],55:[2,74],56:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],68:[2,74],71:[2,74],82:[2,74],83:[2,74],89:[2,74],91:[2,74]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:156,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{4:[1,126],5:122,6:158,7:[1,127],10:157,20:[1,159],23:[1,128],28:[1,39],32:121},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:160,14:[2,26],16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,9],9:[2,9],11:[2,9],14:[2,9],15:[2,9],22:[2,9],24:[2,9],25:[2,9],27:[2,9],30:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],42:[2,9],47:[2,9],48:[2,9],49:[2,9],50:[2,9],52:[2,9],53:[2,9],54:[2,9],55:[2,9],56:[2,9],57:[2,9],58:[2,9],59:[2,9],60:[2,9],61:[2,9],62:[2,9],63:[2,9],68:[2,9],71:[2,9],81:[2,9],82:[2,9],83:[2,9],89:[2,9],90:[2,9],91:[2,9],92:[2,9]},{1:[2,53],9:[1,70],11:[1,71],14:[2,53],15:[1,72],22:[2,53],24:[2,53],25:[2,53],30:[2,53],34:[2,53],35:[2,53],36:[2,53],37:[2,53],42:[2,53],47:[2,53],49:[2,53],50:[2,53],52:[2,53],53:[2,53],54:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],68:[2,53],71:[2,53],82:[2,53],83:[2,53],89:[2,53],91:[2,53]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:100,16:[1,33],18:[1,34],19:161,20:[1,27],22:[2,26],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:162,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,74],23:[1,35],28:[1,39]},{1:[2,58],14:[2,58],22:[2,58],24:[2,58],25:[2,58],30:[2,58],34:[2,58],35:[2,58],36:[2,58],37:[2,58],42:[2,58],47:[1,43],49:[2,58],50:[2,58],52:[2,58],53:[2,58],54:[2,58],55:[1,49],56:[2,58],57:[2,58],58:[2,58],59:[1,53],60:[2,58],61:[2,58],62:[2,58],68:[2,58],71:[2,58],82:[2,58],83:[2,58],89:[2,58],91:[2,58]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:163,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:164,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,74],23:[1,35],28:[1,39]},{1:[2,59],14:[2,59],22:[2,59],24:[2,59],25:[2,59],30:[2,59],34:[2,59],35:[2,59],36:[2,59],37:[2,59],42:[2,59],47:[1,43],49:[2,59],50:[2,59],52:[2,59],53:[2,59],54:[2,59],55:[1,49],56:[2,59],57:[2,59],58:[2,59],59:[1,53],60:[2,59],61:[2,59],62:[2,59],68:[2,59],71:[2,59],82:[2,59],83:[2,59],89:[2,59],91:[2,59]},{3:165,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,74],23:[1,35],28:[1,39]},{1:[2,60],14:[2,60],22:[2,60],24:[2,60],25:[2,60],30:[2,60],34:[2,60],35:[2,60],36:[2,60],37:[2,60],42:[2,60],47:[1,43],49:[2,60],50:[2,60],52:[2,60],53:[2,60],54:[2,60],55:[1,49],56:[2,60],57:[2,60],58:[2,60],59:[1,53],60:[2,60],61:[2,60],62:[2,60],68:[2,60],71:[2,60],82:[2,60],83:[2,60],89:[2,60],91:[2,60]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:166,14:[2,26],16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{17:167,36:[1,6],88:[1,168]},{1:[2,80],14:[2,80],22:[2,80],24:[2,80],25:[2,80],30:[2,80],34:[2,80],35:[2,80],36:[2,80],37:[2,80],42:[2,80],47:[2,80],49:[2,80],50:[2,80],52:[2,80],53:[2,80],54:[2,80],55:[2,80],56:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],61:[2,80],62:[2,80],67:[1,169],68:[2,80],71:[2,80],82:[2,80],83:[2,80],89:[2,80],91:[2,80]},{71:[1,170]},{1:[2,83],14:[2,83],22:[2,83],24:[2,83],25:[2,83],30:[2,83],34:[2,83],35:[2,83],36:[2,83],37:[2,83],42:[2,83],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[2,83],62:[2,83],68:[2,83],71:[2,83],82:[2,83],83:[2,83],89:[2,83],91:[2,83]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:171,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,87],14:[2,87],22:[2,87],24:[2,87],25:[2,87],30:[2,87],34:[2,87],35:[2,87],36:[2,87],37:[2,87],42:[2,87],47:[2,87],49:[2,87],50:[2,87],52:[2,87],53:[2,87],54:[2,87],55:[2,87],56:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87],61:[2,87],62:[2,87],68:[2,87],71:[2,87],82:[2,87],83:[2,87],89:[2,87],91:[2,87]},{47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],75:172,91:[1,92]},{1:[2,91],14:[2,91],22:[2,91],24:[2,91],25:[2,91],30:[2,91],34:[2,91],35:[2,91],36:[2,91],37:[2,91],42:[2,91],47:[2,91],49:[2,91],50:[2,91],52:[2,91],53:[2,91],54:[2,91],55:[2,91],56:[2,91],57:[2,91],58:[2,91],59:[2,91],60:[2,91],61:[2,91],62:[2,91],67:[1,174],68:[2,91],71:[2,91],76:[1,173],82:[2,91],83:[2,91],89:[2,91],91:[1,175]},{1:[2,94],14:[2,94],22:[2,94],24:[2,94],25:[2,94],30:[2,94],34:[2,94],35:[2,94],36:[2,94],37:[2,94],42:[2,94],47:[2,94],49:[2,94],50:[2,94],52:[2,94],53:[2,94],54:[2,94],55:[2,94],56:[2,94],57:[2,94],58:[2,94],59:[2,94],60:[2,94],61:[2,94],62:[2,94],68:[2,94],71:[2,94],82:[2,94],83:[2,94],89:[2,94],91:[2,94]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:65,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],45:176,50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,95],14:[2,95],22:[2,95],24:[2,95],25:[2,95],30:[2,95],34:[2,95],35:[2,95],36:[2,95],37:[2,95],42:[2,95],47:[2,95],49:[2,95],50:[2,95],52:[2,95],53:[2,95],54:[2,95],55:[2,95],56:[2,95],57:[2,95],58:[2,95],59:[2,95],60:[2,95],61:[2,95],62:[2,95],68:[2,95],71:[2,95],78:[1,177],79:[1,178],82:[2,95],83:[2,95],89:[2,95],91:[2,95]},{1:[2,99],14:[2,99],22:[2,99],24:[2,99],25:[2,99],30:[2,99],34:[2,99],35:[2,99],36:[2,99],37:[2,99],42:[2,99],47:[2,99],49:[2,99],50:[2,99],52:[2,99],53:[2,99],54:[2,99],55:[2,99],56:[2,99],57:[2,99],58:[2,99],59:[2,99],60:[2,99],61:[2,99],62:[2,99],68:[2,99],71:[2,99],82:[2,99],83:[2,99],89:[2,99],91:[2,99]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:179,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{9:[1,70],11:[1,71],15:[1,72],17:180,36:[1,6],81:[1,181]},{1:[2,104],14:[2,104],22:[2,104],24:[2,104],25:[2,104],30:[2,104],34:[2,104],35:[2,104],36:[2,104],37:[2,104],42:[2,104],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[2,104],62:[2,104],68:[2,104],71:[2,104],82:[2,104],83:[2,104],89:[2,104],91:[2,104]},{1:[2,105],14:[2,105],22:[2,105],24:[2,105],25:[2,105],30:[2,105],34:[2,105],35:[2,105],36:[2,105],37:[2,105],42:[2,105],47:[2,105],49:[2,105],50:[2,105],52:[2,105],53:[2,105],54:[2,105],55:[2,105],56:[2,105],57:[2,105],58:[2,105],59:[2,105],60:[2,105],61:[2,105],62:[2,105],68:[2,105],71:[2,105],82:[2,105],83:[2,105],89:[2,105],91:[2,105]},{21:183,22:[2,31],34:[2,31],35:[2,31],36:[2,31],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],69:184,71:[1,38],82:[1,182],89:[1,37]},{13:185,22:[2,34],34:[1,149],35:[2,34],36:[2,34]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:186,14:[2,26],16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{17:187,36:[1,6],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:189,20:[1,27],23:[1,35],25:[1,188],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{24:[1,190],25:[2,40],35:[2,40],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:76,20:[1,27],23:[1,35],25:[1,191],26:[1,14],27:[1,13],28:[1,39],31:[1,26],36:[1,77],41:[1,62],48:[1,75],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:73,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,74],23:[1,35],25:[1,192],28:[1,39]},{25:[1,193]},{17:194,36:[1,6],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{9:[1,70],11:[1,71],15:[1,72],90:[1,195]},{9:[2,1],11:[2,1],15:[2,1],34:[1,197],90:[2,1],92:[1,196],94:[1,198]},{4:[1,199]},{22:[2,150],34:[1,201],36:[2,150],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,150],89:[2,150],91:[1,200]},{13:202,30:[2,34],34:[1,203],35:[2,34]},{30:[2,123],34:[2,123],35:[2,123],37:[2,123]},{4:[1,126],5:122,7:[1,127],8:[1,123],10:116,20:[1,125],23:[1,128],28:[1,124],29:204,32:121,34:[2,122],35:[2,122],36:[1,115],37:[2,122],38:[1,119],46:[1,120],50:[1,118],84:117,85:114},{9:[1,206],30:[2,108],34:[2,108],35:[2,108],37:[2,108],53:[2,108],86:[1,205]},{30:[2,116],34:[2,116],35:[2,116],37:[2,116],53:[1,207]},{4:[1,126],5:122,7:[1,127],8:[1,209],10:208,23:[1,128],32:121},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:210,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{30:[2,121],34:[2,121],35:[2,121],37:[2,121]},{1:[2,22],9:[2,22],11:[2,22],14:[2,22],15:[2,22],22:[2,22],24:[2,22],25:[2,22],27:[2,22],30:[2,22],34:[2,22],35:[2,22],36:[2,22],37:[2,22],42:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],52:[2,22],53:[2,22],54:[2,22],55:[2,22],56:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22],63:[2,22],68:[2,22],71:[2,22],81:[2,22],82:[2,22],83:[2,22],86:[2,22],89:[2,22],90:[2,22],91:[2,22],92:[2,22]},{1:[2,23],9:[2,23],11:[2,23],14:[2,23],15:[2,23],22:[2,23],24:[2,23],25:[2,23],27:[2,23],30:[2,23],34:[2,23],35:[2,23],36:[2,23],37:[2,23],42:[2,23],47:[2,23],48:[2,23],49:[2,23],50:[2,23],52:[2,23],53:[2,23],54:[2,23],55:[2,23],56:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],68:[2,23],71:[2,23],81:[2,23],82:[2,23],83:[2,23],86:[2,23],89:[2,23],90:[2,23],91:[2,23],92:[2,23]},{9:[1,211],30:[2,109],34:[2,109],35:[2,109],37:[2,109],53:[2,109]},{4:[1,126],5:122,7:[1,127],8:[1,123],10:116,20:[1,125],23:[1,128],28:[1,124],29:212,30:[2,122],32:121,34:[2,122],35:[2,122],36:[1,115],38:[1,119],46:[1,120],50:[1,118],84:117,85:114},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:213,16:[1,33],18:[1,34],19:60,20:[1,27],22:[2,26],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,24],9:[2,24],11:[2,24],14:[2,24],15:[2,24],22:[2,24],24:[2,24],25:[2,24],27:[2,24],30:[2,24],34:[2,24],35:[2,24],36:[2,24],37:[2,24],42:[2,24],47:[2,24],48:[2,24],49:[2,24],50:[2,24],52:[2,24],53:[2,24],54:[2,24],55:[2,24],56:[2,24],57:[2,24],58:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],68:[2,24],71:[2,24],81:[2,24],82:[2,24],83:[2,24],86:[2,24],89:[2,24],90:[2,24],91:[2,24],92:[2,24]},{1:[2,25],9:[2,25],11:[2,25],14:[2,25],15:[2,25],22:[2,25],24:[2,25],25:[2,25],27:[2,25],30:[2,25],34:[2,25],35:[2,25],36:[2,25],37:[2,25],42:[2,25],47:[2,25],48:[2,25],49:[2,25],50:[2,25],52:[2,25],53:[2,25],54:[2,25],55:[2,25],56:[2,25],57:[2,25],58:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],68:[2,25],71:[2,25],81:[2,25],82:[2,25],83:[2,25],86:[2,25],89:[2,25],90:[2,25],91:[2,25],92:[2,25]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],17:4,18:[1,34],19:7,20:[1,27],23:[1,35],25:[2,36],26:[1,14],27:[1,13],28:[1,39],31:[1,26],35:[2,36],36:[1,6],38:[1,11],39:3,40:5,41:[1,8],44:[1,9],46:[1,10],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],87:107,88:[1,36],89:[1,37]},{1:[2,38],25:[2,38],35:[2,38],37:[2,38]},{1:[2,130],25:[2,130],35:[1,40]},{1:[2,46],9:[2,46],11:[2,46],14:[2,46],15:[2,46],22:[2,46],24:[2,46],25:[2,46],27:[2,46],30:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],42:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],52:[2,46],53:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],67:[2,46],68:[2,46],71:[2,46],76:[2,46],78:[2,46],79:[2,46],81:[2,46],82:[2,46],83:[2,46],89:[2,46],90:[2,46],91:[2,46],92:[2,46]},{9:[1,70],11:[1,71],15:[1,72],47:[1,214]},{1:[2,51],14:[2,51],22:[2,51],24:[2,51],25:[2,51],30:[2,51],34:[2,51],35:[2,51],36:[2,51],37:[2,51],42:[2,51],47:[1,43],49:[2,51],50:[1,45],52:[2,51],53:[2,51],54:[1,48],55:[1,49],56:[2,51],57:[2,51],58:[2,51],59:[1,53],60:[2,51],61:[2,51],62:[2,51],68:[2,51],71:[2,51],82:[2,51],83:[2,51],89:[2,51],91:[2,51]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:215,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,62],14:[2,62],22:[2,62],24:[2,62],25:[2,62],30:[2,62],34:[2,62],35:[2,62],36:[2,62],37:[2,62],42:[2,62],47:[1,43],49:[2,62],50:[2,62],52:[2,62],53:[2,62],54:[1,48],55:[1,49],56:[2,62],57:[2,62],58:[2,62],59:[1,53],60:[2,62],61:[2,62],62:[2,62],68:[2,62],71:[2,62],82:[2,62],83:[2,62],89:[2,62],91:[2,62]},{1:[2,63],14:[2,63],22:[2,63],24:[2,63],25:[2,63],30:[2,63],34:[2,63],35:[2,63],36:[2,63],37:[2,63],42:[2,63],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[2,63],54:[1,48],55:[1,49],56:[1,50],57:[2,63],58:[2,63],59:[1,53],60:[1,54],61:[2,63],62:[2,63],68:[2,63],71:[2,63],82:[2,63],83:[2,63],89:[2,63],91:[2,63]},{1:[2,64],14:[2,64],22:[2,64],24:[2,64],25:[2,64],30:[2,64],34:[2,64],35:[2,64],36:[2,64],37:[2,64],42:[2,64],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[2,64],59:[1,53],60:[1,54],61:[2,64],62:[2,64],68:[2,64],71:[2,64],82:[2,64],83:[2,64],89:[2,64],91:[2,64]},{1:[2,65],14:[2,65],22:[2,65],24:[2,65],25:[2,65],30:[2,65],34:[2,65],35:[2,65],36:[2,65],37:[2,65],42:[2,65],47:[1,43],49:[2,65],50:[2,65],52:[2,65],53:[2,65],54:[2,65],55:[1,49],56:[2,65],57:[2,65],58:[2,65],59:[1,53],60:[2,65],61:[2,65],62:[2,65],68:[2,65],71:[2,65],82:[2,65],83:[2,65],89:[2,65],91:[2,65]},{1:[2,66],14:[2,66],22:[2,66],24:[2,66],25:[2,66],30:[2,66],34:[2,66],35:[2,66],36:[2,66],37:[2,66],42:[2,66],47:[1,43],49:[2,66],50:[2,66],52:[2,66],53:[2,66],54:[2,66],55:[1,49],56:[2,66],57:[2,66],58:[2,66],59:[1,53],60:[2,66],61:[2,66],62:[2,66],68:[2,66],71:[2,66],82:[2,66],83:[2,66],89:[2,66],91:[2,66]},{1:[2,67],14:[2,67],22:[2,67],24:[2,67],25:[2,67],30:[2,67],34:[2,67],35:[2,67],36:[2,67],37:[2,67],42:[2,67],47:[1,43],49:[2,67],50:[1,45],52:[2,67],53:[2,67],54:[1,48],55:[1,49],56:[2,67],57:[2,67],58:[2,67],59:[1,53],60:[2,67],61:[2,67],62:[2,67],68:[2,67],71:[2,67],82:[2,67],83:[2,67],89:[2,67],91:[2,67]},{1:[2,68],14:[2,68],22:[2,68],24:[2,68],25:[2,68],30:[2,68],34:[2,68],35:[2,68],36:[2,68],37:[2,68],42:[2,68],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[2,68],54:[1,48],55:[1,49],56:[1,50],57:[2,68],58:[2,68],59:[1,53],60:[1,54],61:[2,68],62:[2,68],68:[2,68],71:[2,68],82:[2,68],83:[2,68],89:[2,68],91:[2,68]},{1:[2,69],14:[2,69],22:[2,69],24:[2,69],25:[2,69],30:[2,69],34:[2,69],35:[2,69],36:[2,69],37:[2,69],42:[2,69],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[2,69],62:[2,69],68:[2,69],71:[2,69],82:[2,69],83:[2,69],89:[2,69],91:[2,69]},{1:[2,70],14:[2,70],22:[2,70],24:[2,70],25:[2,70],30:[2,70],34:[2,70],35:[2,70],36:[2,70],37:[2,70],42:[2,70],47:[1,43],49:[2,70],50:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[1,53],60:[2,70],61:[2,70],62:[2,70],68:[2,70],71:[2,70],82:[2,70],83:[2,70],89:[2,70],91:[2,70]},{1:[2,71],14:[2,71],22:[2,71],24:[2,71],25:[2,71],30:[2,71],34:[2,71],35:[2,71],36:[2,71],37:[2,71],42:[2,71],47:[1,43],49:[1,44],50:[1,45],52:[2,71],53:[2,71],54:[1,48],55:[1,49],56:[1,50],57:[2,71],58:[2,71],59:[1,53],60:[2,71],61:[2,71],62:[2,71],68:[2,71],71:[2,71],82:[2,71],83:[2,71],89:[2,71],91:[2,71]},{1:[2,72],14:[2,72],22:[2,72],24:[2,72],25:[2,72],30:[2,72],34:[2,72],35:[2,72],36:[2,72],37:[2,72],42:[2,72],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[2,72],62:[1,56],68:[2,72],71:[2,72],82:[2,72],83:[2,72],89:[2,72],91:[2,72]},{1:[2,73],14:[2,73],22:[2,73],24:[2,73],25:[2,73],30:[2,73],34:[2,73],35:[2,73],36:[2,73],37:[2,73],42:[2,73],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[2,73],62:[1,56],68:[2,73],71:[2,73],82:[2,73],83:[2,73],89:[2,73],91:[2,73]},{1:[2,79],14:[2,79],22:[2,79],24:[2,79],25:[2,79],30:[2,79],34:[2,79],35:[2,79],36:[2,79],37:[2,79],42:[2,79],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[2,79],62:[1,56],68:[2,79],71:[2,79],82:[2,79],83:[2,79],89:[2,79],91:[2,79]},{35:[1,217],36:[1,218],42:[1,216]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],14:[2,35],16:[1,33],18:[1,34],19:60,20:[1,27],22:[2,35],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:219,35:[2,35],36:[2,35],37:[2,35],38:[1,61],41:[1,62],42:[2,35],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{14:[2,32],22:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32],42:[2,32],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{13:220,34:[1,149],35:[2,34],36:[2,34],42:[2,34]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:221,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{13:222,34:[1,149],35:[2,34],36:[2,34],37:[2,34]},{1:[2,49],14:[2,49],22:[2,49],24:[2,49],25:[2,49],30:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],42:[2,49],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[2,49],62:[2,49],68:[2,49],71:[2,49],82:[2,49],83:[2,49],89:[2,49],91:[2,49]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:223,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,103],14:[2,103],22:[2,103],24:[2,103],25:[2,103],30:[2,103],34:[2,103],35:[2,103],36:[2,103],37:[2,103],42:[2,103],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[2,103],62:[2,103],68:[2,103],71:[2,103],82:[2,103],83:[2,103],89:[2,103],91:[2,103]},{1:[2,6],9:[2,6],11:[2,6],14:[2,6],15:[2,6],22:[2,6],24:[2,6],25:[2,6],27:[2,6],30:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6],42:[2,6],47:[2,6],48:[2,6],49:[2,6],50:[2,6],52:[2,6],53:[2,6],54:[2,6],55:[2,6],56:[2,6],57:[2,6],58:[2,6],59:[2,6],60:[2,6],61:[2,6],62:[2,6],63:[2,6],68:[2,6],71:[2,6],81:[2,6],82:[2,6],83:[2,6],89:[2,6],90:[2,6],91:[2,6],92:[2,6]},{1:[2,7],9:[2,7],11:[2,7],14:[2,7],15:[2,7],22:[2,7],24:[2,7],25:[2,7],27:[2,7],30:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],42:[2,7],47:[2,7],48:[2,7],49:[2,7],50:[2,7],52:[2,7],53:[2,7],54:[2,7],55:[2,7],56:[2,7],57:[2,7],58:[2,7],59:[2,7],60:[2,7],61:[2,7],62:[2,7],63:[2,7],68:[2,7],71:[2,7],81:[2,7],82:[2,7],83:[2,7],89:[2,7],90:[2,7],91:[2,7],92:[2,7]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:100,16:[1,33],18:[1,34],19:60,20:[1,27],22:[2,26],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{13:224,14:[2,34],34:[1,149],35:[2,34],36:[2,34]},{21:183,22:[2,31],34:[2,31],35:[2,31],36:[2,31],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],69:184,71:[1,38],89:[1,37]},{1:[2,55],9:[1,70],11:[1,71],14:[2,55],15:[1,72],22:[2,55],24:[2,55],25:[2,55],30:[2,55],34:[2,55],35:[2,55],36:[2,55],37:[2,55],42:[2,55],47:[2,55],49:[2,55],50:[2,55],52:[2,55],53:[2,55],54:[2,55],55:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],68:[2,55],71:[2,55],82:[2,55],83:[2,55],89:[2,55],91:[2,55]},{13:225,34:[1,149],35:[2,34],36:[2,34],37:[2,34]},{1:[2,56],9:[1,70],11:[1,71],14:[2,56],15:[1,72],22:[2,56],24:[2,56],25:[2,56],30:[2,56],34:[2,56],35:[2,56],36:[2,56],37:[2,56],42:[2,56],47:[2,56],49:[2,56],50:[2,56],52:[2,56],53:[2,56],54:[2,56],55:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],68:[2,56],71:[2,56],82:[2,56],83:[2,56],89:[2,56],91:[2,56]},{1:[2,57],9:[1,70],11:[1,71],14:[2,57],15:[1,72],22:[2,57],24:[2,57],25:[2,57],30:[2,57],34:[2,57],35:[2,57],36:[2,57],37:[2,57],42:[2,57],47:[2,57],49:[2,57],50:[2,57],52:[2,57],53:[2,57],54:[2,57],55:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],68:[2,57],71:[2,57],82:[2,57],83:[2,57],89:[2,57],91:[2,57]},{13:226,14:[2,34],34:[1,149],35:[2,34],36:[2,34]},{1:[2,78],14:[2,78],22:[2,78],24:[2,78],25:[2,78],30:[2,78],34:[2,78],35:[2,78],36:[2,78],37:[2,78],42:[2,78],47:[2,78],49:[2,78],50:[2,78],52:[2,78],53:[2,78],54:[2,78],55:[2,78],56:[2,78],57:[2,78],58:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],68:[2,78],71:[2,78],82:[2,78],83:[2,78],89:[2,78],91:[2,78]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:227,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{17:228,36:[1,6]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:229,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{13:230,34:[1,149],35:[2,34],36:[2,34],37:[2,34]},{1:[2,88],14:[2,88],22:[2,88],24:[2,88],25:[2,88],30:[2,88],34:[2,88],35:[2,88],36:[2,88],37:[2,88],42:[2,88],47:[2,88],49:[2,88],50:[2,88],52:[2,88],53:[2,88],54:[2,88],55:[2,88],56:[2,88],57:[2,88],58:[2,88],59:[2,88],60:[2,88],61:[2,88],62:[2,88],67:[1,232],68:[2,88],71:[2,88],76:[1,231],82:[2,88],83:[2,88],89:[2,88],91:[1,175]},{17:233,36:[1,6]},{17:234,36:[1,6]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:65,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],45:235,50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{17:236,34:[1,152],36:[1,6]},{17:237,36:[1,6]},{17:238,36:[1,6]},{17:239,36:[1,6],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{1:[2,101],14:[2,101],22:[2,101],24:[2,101],25:[2,101],30:[2,101],34:[2,101],35:[2,101],36:[2,101],37:[2,101],42:[2,101],47:[2,101],49:[2,101],50:[2,101],52:[2,101],53:[2,101],54:[2,101],55:[2,101],56:[2,101],57:[2,101],58:[2,101],59:[2,101],60:[2,101],61:[2,101],62:[2,101],68:[2,101],71:[2,101],82:[2,101],83:[2,101],89:[2,101],91:[2,101]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:240,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:241,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{22:[1,242],69:243,71:[1,38],89:[1,37]},{22:[2,154],71:[2,154],89:[2,154]},{22:[1,244],35:[1,217],36:[1,218]},{13:245,14:[2,34],34:[1,149],35:[2,34],36:[2,34]},{1:[2,11],9:[2,11],11:[2,11],14:[2,11],15:[2,11],22:[2,11],24:[2,11],25:[2,11],27:[2,11],30:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],42:[2,11],47:[2,11],48:[2,11],49:[2,11],50:[2,11],52:[2,11],53:[2,11],54:[2,11],55:[2,11],56:[2,11],57:[2,11],58:[2,11],59:[2,11],60:[2,11],61:[2,11],62:[2,11],63:[2,11],68:[2,11],71:[2,11],81:[2,11],82:[2,11],83:[2,11],89:[2,11],90:[2,11],91:[2,11],92:[2,11]},{1:[2,13],9:[2,13],11:[2,13],14:[2,13],15:[2,13],22:[2,13],24:[2,13],25:[2,13],27:[2,13],30:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],42:[2,13],47:[2,13],48:[2,13],49:[2,13],50:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],68:[2,13],71:[2,13],81:[2,13],82:[2,13],83:[2,13],89:[2,13],90:[2,13],91:[2,13],92:[2,13]},{25:[1,246],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{25:[1,247]},{1:[2,16],9:[2,16],11:[2,16],14:[2,16],15:[2,16],22:[2,16],24:[2,16],25:[2,16],27:[2,16],30:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],42:[2,16],47:[2,16],48:[2,16],49:[2,16],50:[2,16],52:[2,16],53:[2,16],54:[2,16],55:[2,16],56:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16],63:[2,16],68:[2,16],71:[2,16],81:[2,16],82:[2,16],83:[2,16],89:[2,16],90:[2,16],91:[2,16],92:[2,16]},{1:[2,17],9:[2,17],11:[2,17],14:[2,17],15:[2,17],22:[2,17],24:[2,17],25:[2,17],27:[2,17],30:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],42:[2,17],47:[2,17],48:[2,17],49:[2,17],50:[2,17],52:[2,17],53:[2,17],54:[2,17],55:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],68:[2,17],71:[2,17],81:[2,17],82:[2,17],83:[2,17],89:[2,17],90:[2,17],91:[2,17],92:[2,17]},{1:[2,127],9:[2,127],11:[2,127],14:[2,127],15:[2,127],22:[2,127],24:[2,127],25:[2,127],27:[2,127],30:[2,127],34:[2,127],35:[2,127],36:[2,127],37:[2,127],42:[2,127],47:[2,127],48:[2,127],49:[2,127],50:[2,127],52:[2,127],53:[2,127],54:[2,127],55:[2,127],56:[2,127],57:[2,127],58:[2,127],59:[2,127],60:[2,127],61:[2,127],62:[2,127],63:[2,127],68:[2,127],71:[2,127],81:[2,127],82:[2,127],83:[2,127],86:[2,127],89:[2,127],90:[2,127],91:[2,127],92:[2,127]},{1:[2,131],14:[2,131],22:[2,131],24:[2,131],25:[2,131],30:[2,131],34:[2,131],35:[2,131],36:[2,131],37:[2,131],42:[2,131],47:[2,131],49:[2,131],50:[2,131],52:[2,131],53:[2,131],54:[2,131],55:[2,131],56:[2,131],57:[2,131],58:[2,131],59:[2,131],60:[2,131],61:[2,131],62:[2,131],67:[2,131],68:[2,131],71:[2,131],82:[2,131],83:[2,131],89:[2,131],91:[2,131]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:248,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:249,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:250,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,74],23:[1,35],28:[1,39]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:251,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{34:[1,253],92:[1,252]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:254,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:255,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{30:[1,256],35:[1,257]},{4:[1,126],5:122,7:[1,127],8:[1,123],10:116,20:[1,125],23:[1,128],28:[1,124],30:[2,35],32:121,35:[2,35],37:[2,35],38:[1,119],46:[1,120],50:[1,118],84:117,85:258},{13:259,34:[1,203],35:[2,34],37:[2,34]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:260,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],36:[1,261],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{4:[1,126],7:[1,127],32:262},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:263,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{30:[2,118],34:[2,118],35:[2,118],37:[2,118]},{30:[2,119],34:[2,119],35:[2,119],37:[2,119]},{30:[2,120],34:[2,120],35:[2,120],37:[2,120],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{4:[1,126],7:[1,127],32:264},{13:265,30:[2,34],34:[1,203],35:[2,34]},{13:266,22:[2,34],34:[1,149],35:[2,34],36:[2,34]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:267,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{13:268,34:[1,149],35:[2,34],36:[2,34],37:[2,34]},{43:[1,269],64:[1,270]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:271,38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:272,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{14:[2,28],22:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[2,28],42:[2,28]},{35:[1,217],36:[1,218],42:[1,273]},{1:[2,159],25:[2,159],34:[2,159],35:[2,159],36:[2,159],37:[2,159],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{35:[1,217],36:[1,218],37:[1,274]},{13:275,34:[1,149],35:[2,34],36:[2,34],37:[2,34]},{14:[1,276],35:[1,217],36:[1,218]},{35:[1,217],36:[1,218],37:[1,277]},{14:[1,278],35:[1,217],36:[1,218]},{17:279,36:[1,6],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{1:[2,81],14:[2,81],22:[2,81],24:[2,81],25:[2,81],30:[2,81],34:[2,81],35:[2,81],36:[2,81],37:[2,81],42:[2,81],47:[2,81],49:[2,81],50:[2,81],52:[2,81],53:[2,81],54:[2,81],55:[2,81],56:[2,81],57:[2,81],58:[2,81],59:[2,81],60:[2,81],61:[2,81],62:[2,81],68:[2,81],71:[2,81],82:[2,81],83:[2,81],89:[2,81],91:[2,81]},{1:[2,82],14:[2,82],22:[2,82],24:[2,82],25:[2,82],30:[2,82],34:[2,82],35:[2,82],36:[2,82],37:[2,82],42:[2,82],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[2,82],62:[1,56],68:[2,82],71:[2,82],82:[2,82],83:[2,82],89:[2,82],91:[2,82]},{35:[1,217],36:[1,218],37:[1,280]},{17:281,36:[1,6]},{17:282,36:[1,6]},{1:[2,92],14:[2,92],22:[2,92],24:[2,92],25:[2,92],30:[2,92],34:[2,92],35:[2,92],36:[2,92],37:[2,92],42:[2,92],47:[2,92],49:[2,92],50:[2,92],52:[2,92],53:[2,92],54:[2,92],55:[2,92],56:[2,92],57:[2,92],58:[2,92],59:[2,92],60:[2,92],61:[2,92],62:[2,92],68:[2,92],71:[2,92],82:[2,92],83:[2,92],89:[2,92],91:[2,92]},{1:[2,93],14:[2,93],22:[2,93],24:[2,93],25:[2,93],30:[2,93],34:[2,93],35:[2,93],36:[2,93],37:[2,93],42:[2,93],47:[2,93],49:[2,93],50:[2,93],52:[2,93],53:[2,93],54:[2,93],55:[2,93],56:[2,93],57:[2,93],58:[2,93],59:[2,93],60:[2,93],61:[2,93],62:[2,93],68:[2,93],71:[2,93],82:[2,93],83:[2,93],89:[2,93],91:[2,93]},{17:283,34:[1,152],36:[1,6]},{1:[2,156],14:[2,156],22:[2,156],24:[2,156],25:[2,156],30:[2,156],34:[2,156],35:[2,156],36:[2,156],37:[2,156],42:[2,156],47:[2,156],49:[2,156],50:[2,156],52:[2,156],53:[2,156],54:[2,156],55:[2,156],56:[2,156],57:[2,156],58:[2,156],59:[2,156],60:[2,156],61:[2,156],62:[2,156],67:[2,156],68:[2,156],71:[2,156],76:[2,156],82:[2,156],83:[2,156],89:[2,156],91:[2,156]},{1:[2,96],14:[2,96],22:[2,96],24:[2,96],25:[2,96],30:[2,96],34:[2,96],35:[2,96],36:[2,96],37:[2,96],42:[2,96],47:[2,96],49:[2,96],50:[2,96],52:[2,96],53:[2,96],54:[2,96],55:[2,96],56:[2,96],57:[2,96],58:[2,96],59:[2,96],60:[2,96],61:[2,96],62:[2,96],68:[2,96],71:[2,96],79:[1,284],82:[2,96],83:[2,96],89:[2,96],91:[2,96]},{1:[2,98],14:[2,98],22:[2,98],24:[2,98],25:[2,98],30:[2,98],34:[2,98],35:[2,98],36:[2,98],37:[2,98],42:[2,98],47:[2,98],49:[2,98],50:[2,98],52:[2,98],53:[2,98],54:[2,98],55:[2,98],56:[2,98],57:[2,98],58:[2,98],59:[2,98],60:[2,98],61:[2,98],62:[2,98],68:[2,98],71:[2,98],82:[2,98],83:[2,98],89:[2,98],91:[2,98]},{1:[2,100],14:[2,100],22:[2,100],24:[2,100],25:[2,100],30:[2,100],34:[2,100],35:[2,100],36:[2,100],37:[2,100],42:[2,100],47:[2,100],49:[2,100],50:[2,100],52:[2,100],53:[2,100],54:[2,100],55:[2,100],56:[2,100],57:[2,100],58:[2,100],59:[2,100],60:[2,100],61:[2,100],62:[2,100],68:[2,100],71:[2,100],82:[2,100],83:[2,100],89:[2,100],91:[2,100]},{17:285,36:[1,6],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{22:[1,286],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],83:[1,287]},{1:[2,12],9:[2,12],11:[2,12],14:[2,12],15:[2,12],22:[2,12],24:[2,12],25:[2,12],27:[2,12],30:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],42:[2,12],47:[2,12],48:[2,12],49:[2,12],50:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],63:[2,12],68:[2,12],71:[2,12],81:[2,12],82:[2,12],83:[2,12],89:[2,12],90:[2,12],91:[2,12],92:[2,12]},{22:[2,155],71:[2,155],89:[2,155]},{1:[2,18],9:[2,18],11:[2,18],14:[2,18],15:[2,18],22:[2,18],24:[2,18],25:[2,18],27:[2,18],30:[2,18],31:[1,288],34:[2,18],35:[2,18],36:[2,18],37:[2,18],42:[2,18],47:[2,18],48:[2,18],49:[2,18],50:[2,18],52:[2,18],53:[2,18],54:[2,18],55:[2,18],56:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18],63:[2,18],68:[2,18],71:[2,18],81:[2,18],82:[2,18],83:[2,18],89:[2,18],90:[2,18],91:[2,18],92:[2,18]},{14:[1,289],35:[1,217],36:[1,218]},{1:[2,14],9:[2,14],11:[2,14],14:[2,14],15:[2,14],22:[2,14],24:[2,14],25:[2,14],27:[2,14],30:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],42:[2,14],47:[2,14],48:[2,14],49:[2,14],50:[2,14],52:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],63:[2,14],68:[2,14],71:[2,14],81:[2,14],82:[2,14],83:[2,14],89:[2,14],90:[2,14],91:[2,14],92:[2,14]},{1:[2,15],9:[2,15],11:[2,15],14:[2,15],15:[2,15],22:[2,15],24:[2,15],25:[2,15],27:[2,15],30:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],42:[2,15],47:[2,15],48:[2,15],49:[2,15],50:[2,15],52:[2,15],53:[2,15],54:[2,15],55:[2,15],56:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15],63:[2,15],68:[2,15],71:[2,15],81:[2,15],82:[2,15],83:[2,15],89:[2,15],90:[2,15],91:[2,15],92:[2,15]},{22:[2,133],36:[2,133],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,133],83:[1,291],89:[2,133],91:[1,290]},{22:[2,137],36:[2,137],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,137],89:[2,137],91:[1,292]},{9:[1,70],11:[1,71],15:[1,72],92:[1,293]},{47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],82:[1,294]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:295,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:296,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],20:[1,74],23:[1,35],28:[1,39]},{22:[2,151],36:[2,151],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,151],89:[2,151]},{22:[2,152],36:[2,152],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,152],89:[2,152],91:[1,297]},{1:[2,19],9:[2,19],11:[2,19],14:[2,19],15:[2,19],22:[2,19],24:[2,19],25:[2,19],27:[2,19],30:[2,19],31:[1,298],34:[2,19],35:[2,19],36:[2,19],37:[2,19],42:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],52:[2,19],53:[2,19],54:[2,19],55:[2,19],56:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19],61:[2,19],62:[2,19],63:[2,19],68:[2,19],71:[2,19],81:[2,19],82:[2,19],83:[2,19],89:[2,19],90:[2,19],91:[2,19],92:[2,19]},{4:[1,126],5:122,7:[1,127],8:[1,123],10:116,20:[1,125],23:[1,128],28:[1,124],32:121,38:[1,119],46:[1,120],50:[1,118],84:117,85:299},{30:[2,124],34:[2,124],35:[2,124],37:[2,124]},{35:[1,257],37:[1,300]},{30:[2,114],34:[2,114],35:[2,114],37:[2,114],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],12:301,16:[1,33],18:[1,34],19:60,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],33:59,34:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[1,61],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{30:[2,110],34:[2,110],35:[2,110],37:[2,110],53:[2,110]},{30:[2,117],34:[2,117],35:[2,117],37:[2,117],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{30:[2,111],34:[2,111],35:[2,111],37:[2,111],53:[2,111]},{30:[1,302],35:[1,257]},{22:[1,303],35:[1,217],36:[1,218]},{1:[2,47],14:[2,47],22:[2,47],24:[2,47],25:[2,47],30:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],42:[2,47],47:[2,47],49:[2,47],50:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],68:[2,47],71:[2,47],82:[2,47],83:[2,47],89:[2,47],91:[2,47]},{35:[1,217],36:[1,218],37:[1,304]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:305,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{17:306,36:[1,6]},{14:[2,29],22:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29],42:[2,29]},{13:307,34:[1,149],35:[2,34],36:[2,34],37:[2,34]},{64:[1,270]},{1:[2,43],25:[2,43],35:[2,43],37:[2,43]},{35:[1,217],36:[1,218],37:[1,308]},{1:[2,8],9:[2,8],11:[2,8],14:[2,8],15:[2,8],22:[2,8],24:[2,8],25:[2,8],27:[2,8],30:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],42:[2,8],47:[2,8],48:[2,8],49:[2,8],50:[2,8],52:[2,8],53:[2,8],54:[2,8],55:[2,8],56:[2,8],57:[2,8],58:[2,8],59:[2,8],60:[2,8],61:[2,8],62:[2,8],63:[2,8],68:[2,8],71:[2,8],81:[2,8],82:[2,8],83:[2,8],89:[2,8],90:[2,8],91:[2,8],92:[2,8]},{1:[2,61],14:[2,61],22:[2,61],24:[2,61],25:[2,61],30:[2,61],34:[2,61],35:[2,61],36:[2,61],37:[2,61],42:[2,61],47:[2,61],49:[2,61],50:[2,61],52:[2,61],53:[2,61],54:[2,61],55:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],68:[2,61],71:[2,61],82:[2,61],83:[2,61],89:[2,61],91:[2,61]},{17:309,36:[1,6]},{1:[2,132],14:[2,132],22:[2,132],24:[2,132],25:[2,132],30:[2,132],34:[2,132],35:[2,132],36:[2,132],37:[2,132],42:[2,132],47:[2,132],49:[2,132],50:[2,132],52:[2,132],53:[2,132],54:[2,132],55:[2,132],56:[2,132],57:[2,132],58:[2,132],59:[2,132],60:[2,132],61:[2,132],62:[2,132],67:[2,132],68:[2,132],71:[2,132],82:[2,132],83:[2,132],89:[2,132],91:[2,132]},{1:[2,84],14:[2,84],22:[2,84],24:[2,84],25:[2,84],30:[2,84],34:[2,84],35:[2,84],36:[2,84],37:[2,84],42:[2,84],47:[2,84],49:[2,84],50:[2,84],52:[2,84],53:[2,84],54:[2,84],55:[2,84],56:[2,84],57:[2,84],58:[2,84],59:[2,84],60:[2,84],61:[2,84],62:[2,84],68:[2,84],71:[2,84],82:[2,84],83:[2,84],89:[2,84],91:[2,84]},{1:[2,89],14:[2,89],22:[2,89],24:[2,89],25:[2,89],30:[2,89],34:[2,89],35:[2,89],36:[2,89],37:[2,89],42:[2,89],47:[2,89],49:[2,89],50:[2,89],52:[2,89],53:[2,89],54:[2,89],55:[2,89],56:[2,89],57:[2,89],58:[2,89],59:[2,89],60:[2,89],61:[2,89],62:[2,89],68:[2,89],71:[2,89],82:[2,89],83:[2,89],89:[2,89],91:[2,89]},{1:[2,90],14:[2,90],22:[2,90],24:[2,90],25:[2,90],30:[2,90],34:[2,90],35:[2,90],36:[2,90],37:[2,90],42:[2,90],47:[2,90],49:[2,90],50:[2,90],52:[2,90],53:[2,90],54:[2,90],55:[2,90],56:[2,90],57:[2,90],58:[2,90],59:[2,90],60:[2,90],61:[2,90],62:[2,90],68:[2,90],71:[2,90],82:[2,90],83:[2,90],89:[2,90],91:[2,90]},{1:[2,157],14:[2,157],22:[2,157],24:[2,157],25:[2,157],30:[2,157],34:[2,157],35:[2,157],36:[2,157],37:[2,157],42:[2,157],47:[2,157],49:[2,157],50:[2,157],52:[2,157],53:[2,157],54:[2,157],55:[2,157],56:[2,157],57:[2,157],58:[2,157],59:[2,157],60:[2,157],61:[2,157],62:[2,157],67:[2,157],68:[2,157],71:[2,157],76:[2,157],82:[2,157],83:[2,157],89:[2,157],91:[2,157]},{17:310,36:[1,6]},{1:[2,102],14:[2,102],22:[2,102],24:[2,102],25:[2,102],30:[2,102],34:[2,102],35:[2,102],36:[2,102],37:[2,102],42:[2,102],47:[2,102],49:[2,102],50:[2,102],52:[2,102],53:[2,102],54:[2,102],55:[2,102],56:[2,102],57:[2,102],58:[2,102],59:[2,102],60:[2,102],61:[2,102],62:[2,102],68:[2,102],71:[2,102],82:[2,102],83:[2,102],89:[2,102],91:[2,102]},{1:[2,106],14:[2,106],22:[2,106],24:[2,106],25:[2,106],30:[2,106],34:[2,106],35:[2,106],36:[2,106],37:[2,106],42:[2,106],47:[2,106],49:[2,106],50:[2,106],52:[2,106],53:[2,106],54:[2,106],55:[2,106],56:[2,106],57:[2,106],58:[2,106],59:[2,106],60:[2,106],61:[2,106],62:[2,106],68:[2,106],71:[2,106],82:[2,106],83:[2,106],89:[2,106],91:[2,106]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:311,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,20],9:[2,20],11:[2,20],14:[2,20],15:[2,20],22:[2,20],24:[2,20],25:[2,20],27:[2,20],30:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],42:[2,20],47:[2,20],48:[2,20],49:[2,20],50:[2,20],52:[2,20],53:[2,20],54:[2,20],55:[2,20],56:[2,20],57:[2,20],58:[2,20],59:[2,20],60:[2,20],61:[2,20],62:[2,20],63:[2,20],68:[2,20],71:[2,20],81:[2,20],82:[2,20],83:[2,20],89:[2,20],90:[2,20],91:[2,20],92:[2,20]},{17:312,36:[1,6]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:313,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:314,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:315,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:316,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:317,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{22:[2,141],36:[2,141],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,141],89:[2,141],91:[1,318]},{9:[1,70],11:[1,71],15:[1,72],92:[1,319]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:320,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{1:[2,21],9:[2,21],11:[2,21],14:[2,21],15:[2,21],22:[2,21],24:[2,21],25:[2,21],27:[2,21],30:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],42:[2,21],47:[2,21],48:[2,21],49:[2,21],50:[2,21],52:[2,21],53:[2,21],54:[2,21],55:[2,21],56:[2,21],57:[2,21],58:[2,21],59:[2,21],60:[2,21],61:[2,21],62:[2,21],63:[2,21],68:[2,21],71:[2,21],81:[2,21],82:[2,21],83:[2,21],89:[2,21],90:[2,21],91:[2,21],92:[2,21]},{30:[2,125],34:[2,125],35:[2,125],37:[2,125]},{30:[2,126],34:[2,126],35:[2,126],37:[2,126]},{13:321,34:[1,149],35:[2,34],36:[2,34],37:[2,34]},{31:[1,322]},{31:[1,323]},{1:[2,52],14:[2,52],22:[2,52],24:[2,52],25:[2,52],30:[2,52],34:[2,52],35:[2,52],36:[2,52],37:[2,52],42:[2,52],47:[2,52],49:[2,52],50:[2,52],52:[2,52],53:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],68:[2,52],71:[2,52],82:[2,52],83:[2,52],89:[2,52],91:[2,52]},{1:[2,41],25:[2,41],35:[2,41],37:[2,41],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{1:[2,75],14:[2,75],22:[2,75],24:[2,75],25:[2,75],30:[2,75],34:[2,75],35:[2,75],36:[2,75],37:[2,75],42:[2,75],47:[2,75],49:[2,75],50:[2,75],52:[2,75],53:[2,75],54:[2,75],55:[2,75],56:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],68:[2,75],71:[2,75],82:[2,75],83:[2,75],89:[2,75],91:[2,75]},{35:[1,217],36:[1,218],37:[1,324]},{1:[2,50],14:[2,50],22:[2,50],24:[2,50],25:[2,50],30:[2,50],34:[2,50],35:[2,50],36:[2,50],37:[2,50],42:[2,50],47:[2,50],49:[2,50],50:[2,50],52:[2,50],53:[2,50],54:[2,50],55:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],68:[2,50],71:[2,50],82:[2,50],83:[2,50],89:[2,50],91:[2,50]},{1:[2,76],14:[2,76],22:[2,76],24:[2,76],25:[2,76],30:[2,76],34:[2,76],35:[2,76],36:[2,76],37:[2,76],42:[2,76],47:[2,76],49:[2,76],50:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],56:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],68:[2,76],71:[2,76],82:[2,76],83:[2,76],89:[2,76],91:[2,76]},{1:[2,97],14:[2,97],22:[2,97],24:[2,97],25:[2,97],30:[2,97],34:[2,97],35:[2,97],36:[2,97],37:[2,97],42:[2,97],47:[2,97],49:[2,97],50:[2,97],52:[2,97],53:[2,97],54:[2,97],55:[2,97],56:[2,97],57:[2,97],58:[2,97],59:[2,97],60:[2,97],61:[2,97],62:[2,97],68:[2,97],71:[2,97],82:[2,97],83:[2,97],89:[2,97],91:[2,97]},{22:[1,325],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57]},{1:[2,10],9:[2,10],11:[2,10],14:[2,10],15:[2,10],22:[2,10],24:[2,10],25:[2,10],27:[2,10],30:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],42:[2,10],47:[2,10],48:[2,10],49:[2,10],50:[2,10],52:[2,10],53:[2,10],54:[2,10],55:[2,10],56:[2,10],57:[2,10],58:[2,10],59:[2,10],60:[2,10],61:[2,10],62:[2,10],63:[2,10],68:[2,10],71:[2,10],81:[2,10],82:[2,10],83:[2,10],89:[2,10],90:[2,10],91:[2,10],92:[2,10]},{22:[2,134],36:[2,134],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,134],89:[2,134]},{22:[2,135],36:[2,135],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,135],89:[2,135],91:[1,326]},{22:[2,138],36:[2,138],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,138],89:[2,138]},{22:[2,139],36:[2,139],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,139],89:[2,139],91:[1,327]},{22:[2,145],36:[2,145],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,145],83:[1,329],89:[2,145],91:[1,328]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:330,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:331,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{22:[2,153],36:[2,153],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,153],89:[2,153]},{35:[1,217],36:[1,218],37:[1,332]},{30:[2,112],34:[2,112],35:[2,112],37:[2,112],53:[2,112]},{30:[2,113],34:[2,113],35:[2,113],37:[2,113],53:[2,113]},{14:[2,30],22:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[2,30],42:[2,30]},{1:[2,107],14:[2,107],22:[2,107],24:[2,107],25:[2,107],30:[2,107],34:[2,107],35:[2,107],36:[2,107],37:[2,107],42:[2,107],47:[2,107],49:[2,107],50:[2,107],52:[2,107],53:[2,107],54:[2,107],55:[2,107],56:[2,107],57:[2,107],58:[2,107],59:[2,107],60:[2,107],61:[2,107],62:[2,107],68:[2,107],71:[2,107],82:[2,107],83:[2,107],89:[2,107],91:[2,107]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:333,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:334,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:335,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:336,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{22:[2,142],36:[2,142],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,142],89:[2,142]},{22:[2,143],36:[2,143],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,143],89:[2,143],91:[1,337]},{30:[2,115],34:[2,115],35:[2,115],37:[2,115]},{22:[2,136],36:[2,136],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,136],89:[2,136]},{22:[2,140],36:[2,140],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,140],89:[2,140]},{22:[2,146],36:[2,146],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,146],83:[1,338],89:[2,146]},{22:[2,147],36:[2,147],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,147],89:[2,147],91:[1,339]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:340,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:341,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{3:12,4:[1,28],5:29,6:30,7:[1,31],8:[1,32],16:[1,33],18:[1,34],19:342,20:[1,27],23:[1,35],26:[1,14],27:[1,13],28:[1,39],31:[1,26],41:[1,62],50:[1,15],51:[1,16],65:[1,17],66:18,69:19,70:[1,20],71:[1,38],72:[1,21],73:[1,22],74:[1,23],77:[1,24],80:[1,25],88:[1,36],89:[1,37]},{22:[2,144],36:[2,144],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,144],89:[2,144]},{22:[2,149],36:[2,149],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,149],89:[2,149]},{22:[2,148],36:[2,148],47:[1,43],49:[1,44],50:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51],58:[1,52],59:[1,53],60:[1,54],61:[1,55],62:[1,56],68:[1,57],71:[2,148],89:[2,148]}],
defaultActions: {2:[2,160]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    if (typeof this.lexer.yylloc == 'undefined')
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    if (typeof this.yy.parseError === 'function')
        this.parseError = this.yy.parseError;

    function popStack (n) {
        stack.length = stack.length - 2*n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || 1; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length-1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol == null)
                symbol = lex();
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

        // handle parse error
        _handle_error:
        if (typeof action === 'undefined' || !action.length || !action[0]) {

            if (!recovering) {
                // Report error
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'"+this.terminals_[p]+"'");
                }
                var errStr = '';
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + this.terminals_[symbol]+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == 1 /*EOF*/ ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr,
                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol == EOF) {
                    throw new Error(errStr || 'Parsing halted.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            while (1) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    break;
                }
                if (state == 0) {
                    throw new Error(errStr || 'Parsing halted.');
                }
                popStack(1);
                state = stack[stack.length-1];
            }

            preErrorSymbol = symbol; // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0)
                        recovering--;
                } else { // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2: // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3: // accept
                return true;
        }

    }

    return true;
}};
undefined


/***/ },
/* 5 */
/***/ function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ },
/* 6 */
/***/ function(module, exports) {



/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var __split = ''.split;
module.exports = function(LiveScript){
  var fs, path;
  fs = __webpack_require__(6);
  path = __webpack_require__(7);
  LiveScript.run = function(code, options, js){
    var filename, main, dirname, __ref;
    if (options != null) {
      filename = options.filename;
    }
    main = __webpack_require__.c[__webpack_require__.s];
    if (filename) {
      dirname = path.dirname(fs.realpathSync(filename = process.argv[1] = path.resolve(filename)));
    } else {
      dirname = filename = '.';
    }
    main.paths = main.constructor._nodeModulePaths(dirname);
    main.filename = filename;
    js || (code = LiveScript.compile(code, (__ref = {}, __import(__ref, options), __ref.bare = true, __ref)));
    try {
      return main._compile(code, filename);
    } catch (e) {
      throw hackTrace(e, code, filename);
    }
  };
  __importAll(LiveScript, __webpack_require__(5).EventEmitter.prototype);
  ({})['.ls'] = function(module, filename){
    var js;
    js = LiveScript.compile(fs.readFileSync(filename, 'utf8'), {
      filename: filename,
      bare: true
    });
    try {
      return module._compile(js, filename);
    } catch (e) {
      throw hackTrace(e, js, filename);
    }
  };
};
function hackTrace(error, js, filename){
  var stack, traces, i, trace, index, lno, end, length, lines, n, __len, __ref;
  if (error != null) {
    stack = error.stack;
  }
  if (!stack) {
    return error;
  }
  traces = __split.call(stack, '\n');
  if (!(traces.length > 1)) {
    return error;
  }
  for (i = 0, __len = traces.length; i < __len; ++i) {
    trace = traces[i];
    if (0 > (index = trace.indexOf("(" + filename + ":"))) {
      continue;
    }
    lno = (/:(\d+):/.exec(trace.slice(index + filename.length)) || '')[1];
    if (!(lno = +lno)) {
      continue;
    }
    length = ('' + (end = lno + 4)).length;
    lines || (lines = __split.call(js, '\n'));
    for (n = 1 > (__ref = lno - 4) ? 1 : __ref; n <= end; ++n) {
      traces[i] += "\n" + ('    ' + n).slice(-length) + "" + '|+'.charAt(n === lno) + " " + [lines[n - 1]];
    }
  }
  return error.stack = traces.join('\n'), error;
}
function __import(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function __importAll(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

self.Livescript  = __webpack_require__(1);

self.onmessage = function(ev) {
  var data = JSON.parse(ev.data);
  var opts = data.options || {};
  var js = data.js;
  var result;
  var err

    try {
      result = self.Livescript.compile(js, opts);
    } catch (e) {
      err = e
    }

  self.postMessage(JSON.stringify({err: err, js: result}))
};


/***/ }
/******/ ]);
//# sourceMappingURL=livescript-0.9.6.min.js.map